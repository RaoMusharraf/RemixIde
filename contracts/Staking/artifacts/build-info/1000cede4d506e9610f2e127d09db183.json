{
	"id": "1000cede4d506e9610f2e127d09db183",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Staking/StakingFinal.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ncontract TokenStaking is Ownable {\n    using SafeERC20 for IERC20;\n    address public ERC20Address;\n    address ownerAddress;\n    uint256 public totalStakedTokens;\n    bool Check;\n    uint256 Tax;\n    uint256 penalty;\n    struct Staker {\n        uint256 depositTokens;\n        uint256 stakeTime;\n        uint256 StakeMonth;\n        uint256 EarnPersentage;\n        bool check;\n    }\n    mapping(address => Staker) public Details;\n    mapping(address => uint256) public InterestAmount;\n    mapping(uint256 => uint256) public APY;\n    mapping(uint256 => uint256) public APYPer;\n    mapping(address => uint256) public Tokens;\n    mapping(address => uint256) public RewardAmount;\n    mapping(address => uint256) public BurnAmount;\n\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n    1. This function is called when contract is first deployed.\n    2. It takes three parameters:\n        a. ERC20 Token Address (Address of ERC20 Token Contract)\n    */\n    constructor(address _ERC20Address) {\n        ERC20Address = _ERC20Address;\n        ownerAddress = msg.sender;\n    }\n\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint256 _amount) public onlyOwner {\n        Tokens[msg.sender] += _amount;\n        IERC20(ERC20Address).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n    }\n\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has some parameters.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function DepositTokens(\n        address to,\n        uint256 _payment,\n        uint256 StakeMonth,\n        uint256 EarnPersentage\n    ) public {\n        require(Tokens[ownerAddress] > 0, \"Please Wait !!!\");\n        uint256 _amount = _payment * 1000000000;\n        if (Details[to].check) {\n            require(((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\");\n            require(\n                Details[to].StakeMonth == StakeMonth,\n                \"Enter Right StakeMonth\"\n            );\n            require(\n                Details[to].EarnPersentage == EarnPersentage,\n                \"Enter Right EarnPersentage\"\n            );\n            Details[to].depositTokens = Details[to].depositTokens + _amount;\n            if (Details[to].StakeMonth == APY[1]) {\n                InterestAmount[to] += (_amount * APYPer[1]) / 1000;\n            } else if (Details[to].StakeMonth == APY[2]) {\n                InterestAmount[to] += (_amount * APYPer[2]) / 1000;\n            } else if (Details[to].StakeMonth == APY[3]) {\n                InterestAmount[to] += (_amount * APYPer[3]) / 1000;\n            }\n            IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount);\n        } else {\n            require(\n                StakeMonth == APY[1] ||\n                    StakeMonth == APY[2] ||\n                    StakeMonth == APY[3],\n                \"Enter Right StakeMonth\"\n            );\n            require(\n                EarnPersentage == 100 ||\n                    EarnPersentage == 75 ||\n                    EarnPersentage == 50,\n                \"Enter Right EarnPersentage\"\n            );\n            uint256 AdminFee = (_amount * Tax) / 1000;\n            Details[to] = Staker(\n                _amount - AdminFee,\n                block.timestamp,\n                StakeMonth,\n                EarnPersentage,\n                true\n            );\n            if (Details[to].StakeMonth == APY[1]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[1]) / 1000;\n            } else if (Details[to].StakeMonth == APY[2]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[2]) / 1000;\n            } else if (Details[to].StakeMonth == APY[3]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[3]) / 1000;\n            }\n            IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount);\n        }\n        Tokens[to] += _amount;\n        totalStakedTokens += _amount;\n    }\n\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function WithdrawTokens(address to) public {\n        require(Details[to].check, \"First Stake Tokens\");\n        uint256 EarnToken;\n        uint256 BurnToken;\n        if (\n            ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) < block.timestamp) {\n            if (Details[to].EarnPersentage == 100) {\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens +\n                        (InterestAmount[to] - RewardAmount[to])\n                );\n            } else if (Details[to].EarnPersentage == 75) {\n                EarnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 75) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens + EarnToken\n                );\n                BurnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 25) /\n                    100;\n                BurnAmount[to] = BurnToken;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            } else if (Details[to].EarnPersentage == 50) {\n                EarnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 50) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens + EarnToken\n                );\n                BurnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 50) /\n                    100;\n                BurnAmount[to] = BurnToken;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n        } else {\n            uint256 InterestAmountperday;\n            uint256 Total;\n            uint256 PenaltyResult;\n            uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60);\n            InterestAmountperday =\n                InterestAmount[to] /\n                (Details[to].StakeMonth * 30);\n\n            //Transfer reward to user 100%\n            if (Details[to].EarnPersentage == 100) {\n                EarnToken = (InterestAmountperday * Stakdays);\n                Total =\n                    Details[to].depositTokens +\n                    (EarnToken - RewardAmount[to]);\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n            }\n            //Transfer reward to user 75% and Burn 25%\n            else if (Details[to].EarnPersentage == 75) {\n                EarnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        75) /\n                    100;\n                Total = Details[to].depositTokens + EarnToken;\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n                BurnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        25) /\n                    100;\n                BurnAmount[to] = BurnToken;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n            //Transfer reward to user 50% and Burn 50%\n            else if (Details[to].EarnPersentage == 50) {\n                EarnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        50) /\n                    100;\n                Total = Details[to].depositTokens + EarnToken;\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n                BurnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        50) /\n                    100;\n                BurnAmount[to] = BurnToken;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n        }\n        Details[to].check = false;\n        delete RewardAmount[to];\n        delete InterestAmount[to];\n        Tokens[to] -= Details[to].depositTokens;\n        totalStakedTokens -= Details[to].depositTokens;\n    }\n\n    /*   ~~~~~~~~~~~~~Claim Function~~~~~~~~~~~~~~~\n    1. This function is used to claim reward tokens.\n    2. User will call this function to claim all rewards from this contract.\n    */\n    function ClaimRewards(address to) public {\n        require(\n            ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >\n                block.timestamp,\n            \"Your Stake Time Complete, Please Call Withdraw Function !\"\n        );\n        uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60);\n        uint256 InterestAmountperday = InterestAmount[to] /\n            (Details[to].StakeMonth * 30);\n        uint256 EarnToken = InterestAmountperday * Stakdays;\n        require(EarnToken > 0, \"Reward must be greater than zero.\");\n        RewardAmount[to] += EarnToken - RewardAmount[to];\n\n        IERC20(ERC20Address).transfer(to, EarnToken);\n    }\n    function viewBurnRewards(address to) public view returns (uint256 reward) {\n        if(Details[to].EarnPersentage == 100){\n            return 0;\n        }\n        else{\n            return (InterestAmount[to]*(100-Details[to].EarnPersentage))/100;\n        }\n    }\n\n    function viewRewards(address to) public view returns (uint256 reward) {\n        if (\n            ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) <\n            block.timestamp\n        ) {\n            return (InterestAmount[to]);\n        } else {\n            uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60);\n            uint256 InterestAmountperday = InterestAmount[to] /\n                (Details[to].StakeMonth * 30);\n            uint256 EarnToken = (InterestAmountperday * Stakdays) -\n                RewardAmount[to];\n            return (EarnToken);\n        }\n    }\n\n    /*   ~~~~~~~~~~~~~ SetAPY Function~~~~~~~~~~~~~~~\n    1. This function is used to set Months.\n    */\n    function SetAPY(\n        uint256 Month1,\n        uint256 Month2,\n        uint256 Month3\n    ) public onlyOwner {\n        APY[1] = Month1;\n        APY[2] = Month2;\n        APY[3] = Month3;\n    }\n\n    /*   ~~~~~~~~~~~~~ SetAPY Function~~~~~~~~~~~~~~~\n    1. This function is used to set Months.\n    */\n    function SetRewardPersentage(\n        uint256 Month1Per,\n        uint256 Month2Per,\n        uint256 Month3Per\n    ) public onlyOwner {\n        APYPer[1] = Month1Per;\n        APYPer[2] = Month2Per;\n        APYPer[3] = Month3Per;\n    }\n\n    /*   ~~~~~~~~~~~~~ SetTex Function~~~~~~~~~~~~~~~\n    1. This function is used to set Tax fee and Penalty charges.\n    */\n    function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {\n        Tax = taxFee;\n        penalty = _penalty;\n    }\n\n    function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {\n        return (Tax, penalty);\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0x2B SWAP8 CALLVALUE DUP4 SAR 0x5D 0xCE 0xC4 PUSH23 0x285142EB14AECF45B32179EFD7792F7914C8596FE98864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0x2B SWAP8 CALLVALUE DUP4 SAR 0x5D 0xCE 0xC4 PUSH23 0x285142EB14AECF45B32179EFD7792F7914C8596FE98864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xCE 0xF8 0xAD 0xA9 0xCC ORIGIN 0xB6 DELEGATECALL 0xCD LOG3 DUP4 0xEA 0x1F 0xF PUSH18 0x628057C0662187477208A19291A51DA06473 PUSH16 0x6C634300081300330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xCE 0xF8 0xAD 0xA9 0xCC ORIGIN 0xB6 DELEGATECALL 0xCD LOG3 DUP4 0xEA 0x1F 0xF PUSH18 0x628057C0662187477208A19291A51DA06473 PUSH16 0x6C634300081300330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Staking/StakingFinal.sol": {
				"TokenStaking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "APY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "APYPer",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "BurnAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ClaimRewards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_payment",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								}
							],
							"name": "DepositTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "depositTokens",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakeTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "InterestAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "RewardAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Month1",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month2",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month3",
									"type": "uint256"
								}
							],
							"name": "SetAPY",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Month1Per",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month2Per",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month3Per",
									"type": "uint256"
								}
							],
							"name": "SetRewardPersentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Tokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "WithdrawTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTaxPenalty",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tax",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pen",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "taxFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_penalty",
									"type": "uint256"
								}
							],
							"name": "setTexAndPenalty",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalStakedTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "viewBurnRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "viewRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Staking/StakingFinal.sol\":281:12169  contract TokenStaking is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Staking/StakingFinal.sol\":1244:1359  constructor(address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/Staking/StakingFinal.sol\":1289:1301  ERC20Address */\n  0x01\n    /* \"contracts/Staking/StakingFinal.sol\":1289:1317  ERC20Address = _ERC20Address */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap3\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap3\n  dup4\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/Staking/StakingFinal.sol\":1327:1339  ownerAddress */\n  0x02\n    /* \"contracts/Staking/StakingFinal.sol\":1327:1352  ownerAddress = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"contracts/Staking/StakingFinal.sol\":1342:1352  msg.sender */\n  caller\n    /* \"contracts/Staking/StakingFinal.sol\":1327:1352  ownerAddress = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/Staking/StakingFinal.sol\":281:12169  contract TokenStaking is Ownable {... */\n  jump(tag_15)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_17\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_17:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_18:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_15:\n    /* \"contracts/Staking/StakingFinal.sol\":281:12169  contract TokenStaking is Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Staking/StakingFinal.sol\":281:12169  contract TokenStaking is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa6021ace\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa6021ace\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd6f80a25\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xda40ef80\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x777b4cd8\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x897b3a68\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x9131a05a\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x21736665\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x21736665\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x22b72666\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x264b4af6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x2e886f1f\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x3ae73259\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x662b12c9\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x0178be5f\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x032ad8fb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x0deef63a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x10c404da\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x186cb65b\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Staking/StakingFinal.sol\":9556:10255  function ClaimRewards(address to) public {... */\n    tag_3:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_33:\n      tag_34\n      jump\t// in\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":529:554   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking/StakingFinal.sol\":860:901  mapping(address => uint256) public Tokens */\n    tag_5:\n      tag_32\n      tag_38\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_38:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":2114:4628  function DepositTokens(... */\n    tag_6:\n      tag_28\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":769:807  mapping(uint256 => uint256) public APY */\n    tag_7:\n      tag_32\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":11258:11451  function SetAPY(... */\n    tag_8:\n      tag_28\n      tag_51\n      calldatasize\n      0x04\n      tag_52\n      jump\t// in\n    tag_51:\n      tag_53\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":960:1005  mapping(address => uint256) public BurnAmount */\n    tag_9:\n      tag_32\n      tag_55\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_55:\n      mstore(0x20, 0x0d)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":11927:12051  function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {... */\n    tag_10:\n      tag_28\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n        /* \"contracts/Staking/StakingFinal.sol\":12004:12007  Tax */\n      0x05\n        /* \"contracts/Staking/StakingFinal.sol\":12004:12016  Tax = taxFee */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":12026:12033  penalty */\n      0x06\n        /* \"contracts/Staking/StakingFinal.sol\":12026:12044  penalty = _penalty */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11927:12051  function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {... */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":12057:12167  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n    tag_11:\n        /* \"contracts/Staking/StakingFinal.sol\":12147:12150  Tax */\n      sload(0x05)\n        /* \"contracts/Staking/StakingFinal.sol\":12152:12159  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/StakingFinal.sol\":12057:12167  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1894:1919   */\n      swap3\n      dup4\n      mstore\n        /* \"#utility.yul\":1950:1952   */\n      0x20\n        /* \"#utility.yul\":1935:1953   */\n      dup4\n      add\n        /* \"#utility.yul\":1928:1962   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":1867:1885   */\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":12057:12167  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n      tag_35\n        /* \"#utility.yul\":1720:1968   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":411:443  uint256 public totalStakedTokens */\n    tag_12:\n      tag_32\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":714:763  mapping(address => uint256) public InterestAmount */\n    tag_13:\n      tag_32\n      tag_70\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_70:\n      mstore(0x20, 0x08)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_28\n      tag_74\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":907:954  mapping(address => uint256) public RewardAmount */\n    tag_15:\n      tag_32\n      tag_76\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_76:\n      mstore(0x20, 0x0c)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":813:854  mapping(uint256 => uint256) public APYPer */\n    tag_16:\n      tag_32\n      tag_80\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_80:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_83:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2137:2169   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2119:2170   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2107:2109   */\n      0x20\n        /* \"#utility.yul\":2092:2110   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      tag_35\n        /* \"#utility.yul\":1973:2176   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":4824:9361  function WithdrawTokens(address to) public {... */\n    tag_18:\n      tag_28\n      tag_88\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_88:\n      tag_89\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":352:379  address public ERC20Address */\n    tag_19:\n      sload(0x01)\n      tag_83\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":1586:1818  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n    tag_20:\n      tag_28\n      tag_94\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":11562:11795  function SetRewardPersentage(... */\n    tag_21:\n      tag_28\n      tag_97\n      calldatasize\n      0x04\n      tag_52\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":10528:11147  function viewRewards(address to) public view returns (uint256 reward) {... */\n    tag_22:\n      tag_32\n      tag_100\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":667:708  mapping(address => Staker) public Details */\n    tag_23:\n      tag_103\n      tag_104\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_104:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      dup5\n      add\n      sload\n      0x04\n      swap1\n      swap5\n      add\n      sload\n      swap3\n      swap4\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup6\n      jump\n    tag_103:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":2434:2459   */\n      swap6\n      dup7\n      mstore\n        /* \"#utility.yul\":2490:2492   */\n      0x20\n        /* \"#utility.yul\":2475:2493   */\n      dup7\n      add\n        /* \"#utility.yul\":2468:2502   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":2518:2536   */\n      swap3\n      dup5\n      add\n        /* \"#utility.yul\":2511:2545   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2576:2578   */\n      0x60\n        /* \"#utility.yul\":2561:2579   */\n      dup4\n      add\n        /* \"#utility.yul\":2554:2588   */\n      mstore\n        /* \"#utility.yul\":2632:2646   */\n      iszero\n        /* \"#utility.yul\":2625:2647   */\n      iszero\n        /* \"#utility.yul\":2619:2622   */\n      0x80\n        /* \"#utility.yul\":2604:2623   */\n      dup3\n      add\n        /* \"#utility.yul\":2597:2648   */\n      mstore\n        /* \"#utility.yul\":2421:2424   */\n      0xa0\n        /* \"#utility.yul\":2406:2425   */\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":667:708  mapping(address => Staker) public Details */\n      tag_35\n        /* \"#utility.yul\":2181:2654   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_28\n      tag_109\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":9556:10255  function ClaimRewards(address to) public {... */\n    tag_31:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9676:9687  Details[to] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9676:9683  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":9676:9687  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9676:9697  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9652  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9717:9732  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":9676:9697  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9657  Details[to].StakeMonth * 30 */\n      tag_112\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9655:9657  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9657  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9662  Details[to].StakeMonth * 30 * 24 */\n      tag_114\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9660:9662  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9662  Details[to].StakeMonth * 30 * 24 */\n      tag_113\n      jump\t// in\n    tag_114:\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9667  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_115\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9665:9667  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9667  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_113\n      jump\t// in\n    tag_115:\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9672  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_116\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9670:9672  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":9630:9672  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_113\n      jump\t// in\n    tag_116:\n        /* \"contracts/Staking/StakingFinal.sol\":9629:9697  (Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime */\n      tag_117\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n        /* \"contracts/Staking/StakingFinal.sol\":9628:9732  ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >... */\n      gt\n        /* \"contracts/Staking/StakingFinal.sol\":9607:9815  require(... */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3296:3298   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":9607:9815  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3278:3299   */\n      mstore\n        /* \"#utility.yul\":3335:3337   */\n      0x39\n        /* \"#utility.yul\":3315:3333   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3308:3338   */\n      mstore\n        /* \"#utility.yul\":3374:3408   */\n      0x596f7572205374616b652054696d6520436f6d706c6574652c20506c65617365\n        /* \"#utility.yul\":3354:3372   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3347:3409   */\n      mstore\n        /* \"#utility.yul\":3445:3472   */\n      0x2043616c6c2057697468647261772046756e6374696f6e202100000000000000\n        /* \"#utility.yul\":3425:3443   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3418:3473   */\n      mstore\n        /* \"#utility.yul\":3490:3509   */\n      0x84\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":9607:9815  require(... */\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9863:9874  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":9825:9841  uint256 Stakdays */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":9863:9874  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9863:9870  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":9863:9874  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9863:9884  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9889:9901  24 * 60 * 60 */\n      0x015180\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9845:9884  block.timestamp - Details[to].stakeTime */\n      tag_122\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9845:9860  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":9845:9884  block.timestamp - Details[to].stakeTime */\n      tag_123\n      jump\t// in\n    tag_122:\n        /* \"contracts/Staking/StakingFinal.sol\":9844:9902  (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      tag_124\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9977:9988  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":9912:9940  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":9977:9988  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9977:9984  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":9977:9988  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9977:9999  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9825:9902  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":9912:9940  uint256 InterestAmountperday */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9977:10004  Details[to].StakeMonth * 30 */\n      tag_126\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10002:10004  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":9977:10004  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9943:9961  InterestAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9943:9957  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":9943:9961  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9943:10005  InterestAmount[to] /... */\n      tag_127\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_127:\n        /* \"contracts/Staking/StakingFinal.sol\":9912:10005  uint256 InterestAmountperday = InterestAmount[to] /... */\n      swap1\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":10015:10032  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10035:10066  InterestAmountperday * Stakdays */\n      tag_128\n        /* \"contracts/Staking/StakingFinal.sol\":10058:10066  Stakdays */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":9912:10005  uint256 InterestAmountperday = InterestAmount[to] /... */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":10035:10066  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_128:\n        /* \"contracts/Staking/StakingFinal.sol\":10015:10066  uint256 EarnToken = InterestAmountperday * Stakdays */\n      swap1\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":10096:10097  0 */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10084:10093  EarnToken */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":10084:10097  EarnToken > 0 */\n      gt\n        /* \"contracts/Staking/StakingFinal.sol\":10076:10135  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      tag_129\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4077:4079   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":10076:10135  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4059:4080   */\n      mstore\n        /* \"#utility.yul\":4116:4118   */\n      0x21\n        /* \"#utility.yul\":4096:4114   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4089:4119   */\n      mstore\n        /* \"#utility.yul\":4155:4189   */\n      0x526577617264206d7573742062652067726561746572207468616e207a65726f\n        /* \"#utility.yul\":4135:4153   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4128:4190   */\n      mstore\n      shl(0xf9, 0x17)\n        /* \"#utility.yul\":4206:4224   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4199:4230   */\n      mstore\n        /* \"#utility.yul\":4247:4266   */\n      0x84\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":10076:10135  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      tag_120\n        /* \"#utility.yul\":3875:4272   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":10076:10135  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10177:10193  RewardAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10177:10189  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":10177:10193  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10165:10193  EarnToken - RewardAmount[to] */\n      tag_132\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10165:10174  EarnToken */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":10165:10193  EarnToken - RewardAmount[to] */\n      tag_123\n      jump\t// in\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10161  RewardAmount[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10157  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10161  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10193  RewardAmount[to] += EarnToken - RewardAmount[to] */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10161  RewardAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10145:10193  RewardAmount[to] += EarnToken - RewardAmount[to] */\n      tag_133\n      swap1\n      dup5\n      swap1\n      tag_118\n      jump\t// in\n    tag_133:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":10211:10223  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10204:10248  IERC20(ERC20Address).transfer(to, EarnToken) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10211:10223  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10204:10233  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10204:10248  IERC20(ERC20Address).transfer(to, EarnToken) */\n      tag_134\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10234:10236  to */\n      dup8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10238:10247  EarnToken */\n      dup6\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10204:10248  IERC20(ERC20Address).transfer(to, EarnToken) */\n      0x04\n      add\n      tag_135\n      jump\t// in\n    tag_134:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_137\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_137:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":9597:10255  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":9556:10255  function ClaimRewards(address to) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_34:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10358  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":10318:10332  uint256 reward */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10358  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10354  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10358  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10373  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10377:10380  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":10347:10380  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":10344:10516  if(Details[to].EarnPersentage == 100){... */\n      tag_141\n      jumpi\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":10402:10403  0 */\n      0x00\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":10344:10516  if(Details[to].EarnPersentage == 100){... */\n    tag_141:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10473:10484  Details[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10473:10480  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":10473:10484  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10473:10499  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10502:10505  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10469:10499  100-Details[to].EarnPersentage */\n      tag_143\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10502:10505  100 */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":10469:10499  100-Details[to].EarnPersentage */\n      tag_123\n      jump\t// in\n    tag_143:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10449:10467  InterestAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10449:10463  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":10449:10467  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10449:10500  InterestAmount[to]*(100-Details[to].EarnPersentage) */\n      tag_144\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_144:\n        /* \"contracts/Staking/StakingFinal.sol\":10448:10505  (InterestAmount[to]*(100-Details[to].EarnPersentage))/100 */\n      tag_145\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_145:\n        /* \"contracts/Staking/StakingFinal.sol\":10441:10505  return (InterestAmount[to]*(100-Details[to].EarnPersentage))/100 */\n      swap3\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":10344:10516  if(Details[to].EarnPersentage == 100){... */\n    tag_142:\n        /* \"contracts/Staking/StakingFinal.sol\":10260:10522  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":2114:4628  function DepositTokens(... */\n    tag_44:\n        /* \"contracts/Staking/StakingFinal.sol\":2281:2293  ownerAddress */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Staking/StakingFinal.sol\":2297:2298  0 */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2274:2294  Tokens[ownerAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2274:2280  Tokens */\n      0x0b\n        /* \"contracts/Staking/StakingFinal.sol\":2274:2294  Tokens[ownerAddress] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2266:2318  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5040:5042   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":2266:2318  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5022:5043   */\n      mstore\n        /* \"#utility.yul\":5079:5081   */\n      0x0f\n        /* \"#utility.yul\":5059:5077   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5052:5082   */\n      mstore\n      shl(0x88, 0x506c65617365205761697420212121)\n        /* \"#utility.yul\":5098:5116   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5091:5136   */\n      mstore\n        /* \"#utility.yul\":5153:5171   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2266:2318  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      tag_120\n        /* \"#utility.yul\":4838:5177   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":2266:2318  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n    tag_147:\n        /* \"contracts/Staking/StakingFinal.sol\":2328:2343  uint256 _amount */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2346:2367  _payment * 1000000000 */\n      tag_150\n        /* \"contracts/Staking/StakingFinal.sol\":2346:2354  _payment */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":2357:2367  1000000000 */\n      0x3b9aca00\n        /* \"contracts/Staking/StakingFinal.sol\":2346:2367  _payment * 1000000000 */\n      tag_113\n      jump\t// in\n    tag_150:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2381:2392  Details[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2381:2388  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2381:2392  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2381:2398  Details[to].check */\n      0x04\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2328:2367  uint256 _amount = _payment * 1000000000 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2381:2398  Details[to].check */\n      0xff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":2377:4553  if (Details[to].check) {... */\n      iszero\n      tag_151\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2470:2481  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2470:2477  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2470:2481  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2470:2491  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2446  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2494:2509  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":2470:2491  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2451  Details[to].StakeMonth * 30 */\n      tag_152\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2449:2451  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2451  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_152:\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2456  Details[to].StakeMonth * 30 * 24 */\n      tag_153\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2454:2456  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2456  Details[to].StakeMonth * 30 * 24 */\n      tag_113\n      jump\t// in\n    tag_153:\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2461  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_154\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2459:2461  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2461  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_113\n      jump\t// in\n    tag_154:\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2466  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_155\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2464:2466  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":2424:2466  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_113\n      jump\t// in\n    tag_155:\n        /* \"contracts/Staking/StakingFinal.sol\":2423:2491  (Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime */\n      tag_156\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_156:\n        /* \"contracts/Staking/StakingFinal.sol\":2422:2509  ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp */\n      gt\n        /* \"contracts/Staking/StakingFinal.sol\":2414:2539  require(((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5384:5386   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":2414:2539  require(((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5366:5387   */\n      mstore\n        /* \"#utility.yul\":5423:5425   */\n      0x1a\n        /* \"#utility.yul\":5403:5421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5396:5426   */\n      mstore\n        /* \"#utility.yul\":5462:5490   */\n      0x596f75722054696d6520506572696f6420436f6d706c6574652e000000000000\n        /* \"#utility.yul\":5442:5460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5435:5491   */\n      mstore\n        /* \"#utility.yul\":5508:5526   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2414:2539  require(((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      tag_120\n        /* \"#utility.yul\":5182:5532   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":2414:2539  require(((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n    tag_157:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2578:2589  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2578:2585  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2578:2589  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2578:2600  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2578:2614  Details[to].StakeMonth == StakeMonth */\n      dup4\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":2553:2670  require(... */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5739:5741   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":2553:2670  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5721:5742   */\n      mstore\n        /* \"#utility.yul\":5778:5780   */\n      0x16\n        /* \"#utility.yul\":5758:5776   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5751:5781   */\n      mstore\n      shl(0x53, 0x08adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d)\n        /* \"#utility.yul\":5797:5815   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5790:5842   */\n      mstore\n        /* \"#utility.yul\":5859:5877   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2553:2670  require(... */\n      tag_120\n        /* \"#utility.yul\":5537:5883   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":2553:2670  require(... */\n    tag_160:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2709:2720  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2709:2716  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2709:2720  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2709:2735  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2709:2753  Details[to].EarnPersentage == EarnPersentage */\n      dup3\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":2684:2813  require(... */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6090:6092   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":2684:2813  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6072:6093   */\n      mstore\n        /* \"#utility.yul\":6129:6131   */\n      0x1a\n        /* \"#utility.yul\":6109:6127   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6102:6132   */\n      mstore\n        /* \"#utility.yul\":6168:6196   */\n      0x456e746572205269676874204561726e50657273656e74616765000000000000\n        /* \"#utility.yul\":6148:6166   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6141:6197   */\n      mstore\n        /* \"#utility.yul\":6214:6232   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2684:2813  require(... */\n      tag_120\n        /* \"#utility.yul\":5888:6238   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":2684:2813  require(... */\n    tag_163:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2866  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2862  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2866  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2880  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2890  Details[to].depositTokens + _amount */\n      tag_166\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2883:2890  _amount */\n      dup3\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2855:2890  Details[to].depositTokens + _amount */\n      tag_118\n      jump\t// in\n    tag_166:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2827:2838  Details[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2827:2834  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":2827:2838  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2827:2890  Details[to].depositTokens = Details[to].depositTokens + _amount */\n      swap1\n      dup2\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2934:2940  APY[1] */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2908:2930  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2908:2940  Details[to].StakeMonth == APY[1] */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":2904:3279  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_167\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3000:3001  1 */\n      0x01\n        /* \"contracts/Staking/StakingFinal.sol\":2993:3002  APYPer[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2993:2999  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":2993:3002  APYPer[1] */\n      0x20\n      mstore\n      sload(0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7)\n        /* \"contracts/Staking/StakingFinal.sol\":3006:3010  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2983:3002  _amount * APYPer[1] */\n      tag_168\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2983:2990  _amount */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":2983:3002  _amount * APYPer[1] */\n      tag_113\n      jump\t// in\n    tag_168:\n        /* \"contracts/Staking/StakingFinal.sol\":2982:3010  (_amount * APYPer[1]) / 1000 */\n      tag_169\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_169:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":2960:2978  InterestAmount[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":2960:2974  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":2960:2978  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2960:3010  InterestAmount[to] += (_amount * APYPer[1]) / 1000 */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2960:2978  InterestAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2960:3010  InterestAmount[to] += (_amount * APYPer[1]) / 1000 */\n      tag_170\n      swap1\n      dup5\n      swap1\n      tag_118\n      jump\t// in\n    tag_170:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2904:3279  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_177\n      swap1\n      pop\n      jump\n    tag_167:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3061:3067  APY[2] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3046  Details[to] */\n      dup7\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":3061:3067  APY[2] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3046  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3042  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":3061:3067  APY[2] */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3046  Details[to] */\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3061:3067  APY[2] */\n      0x40\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3046  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3065:3066  2 */\n      0x02\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3057  Details[to].StakeMonth */\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3035:3067  Details[to].StakeMonth == APY[2] */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3031:3279  if (Details[to].StakeMonth == APY[2]) {... */\n      tag_172\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3127:3128  2 */\n      0x02\n        /* \"contracts/Staking/StakingFinal.sol\":3120:3129  APYPer[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3120:3126  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":3120:3129  APYPer[2] */\n      0x20\n      mstore\n      sload(0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8)\n        /* \"contracts/Staking/StakingFinal.sol\":3133:3137  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":3110:3129  _amount * APYPer[2] */\n      tag_168\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":3110:3117  _amount */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":3110:3129  _amount * APYPer[2] */\n      tag_113\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":3031:3279  if (Details[to].StakeMonth == APY[2]) {... */\n    tag_172:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3188:3194  APY[3] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3173  Details[to] */\n      dup7\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":3188:3194  APY[3] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3173  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3169  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":3188:3194  APY[3] */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3173  Details[to] */\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3188:3194  APY[3] */\n      0x40\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3173  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3184  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3162:3194  Details[to].StakeMonth == APY[3] */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3158:3279  if (Details[to].StakeMonth == APY[3]) {... */\n      tag_177\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3254:3255  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3247:3256  APYPer[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3247:3253  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":3247:3256  APYPer[3] */\n      0x20\n      mstore\n      sload(0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759)\n        /* \"contracts/Staking/StakingFinal.sol\":3260:3264  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":3237:3256  _amount * APYPer[3] */\n      tag_178\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":3237:3244  _amount */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":3237:3256  _amount * APYPer[3] */\n      tag_113\n      jump\t// in\n    tag_178:\n        /* \"contracts/Staking/StakingFinal.sol\":3236:3264  (_amount * APYPer[3]) / 1000 */\n      tag_179\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_179:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3232  InterestAmount[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3228  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3232  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3264  InterestAmount[to] += (_amount * APYPer[3]) / 1000 */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3232  InterestAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":3214:3264  InterestAmount[to] += (_amount * APYPer[3]) / 1000 */\n      tag_180\n      swap1\n      dup5\n      swap1\n      tag_118\n      jump\t// in\n    tag_180:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3158:3279  if (Details[to].StakeMonth == APY[3]) {... */\n    tag_177:\n        /* \"contracts/Staking/StakingFinal.sol\":3299:3311  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3292:3357  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      tag_181\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3299:3311  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":3330:3332  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":3342:3346  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":3349:3356  _amount */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":3292:3329  IERC20(ERC20Address).safeTransferFrom */\n      tag_182\n        /* \"contracts/Staking/StakingFinal.sol\":3292:3357  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      jump\t// in\n    tag_181:\n        /* \"contracts/Staking/StakingFinal.sol\":2377:4553  if (Details[to].check) {... */\n      jump(tag_183)\n    tag_151:\n        /* \"contracts/Staking/StakingFinal.sol\":3431:3432  1 */\n      0x01\n        /* \"contracts/Staking/StakingFinal.sol\":3427:3433  APY[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3427:3430  APY */\n      0x09\n        /* \"contracts/Staking/StakingFinal.sol\":3427:3433  APY[1] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3413:3433  StakeMonth == APY[1] */\n      dup4\n      eq\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3413:3477  StakeMonth == APY[1] ||... */\n      tag_184\n      jumpi\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3475:3476  2 */\n      0x02\n        /* \"contracts/Staking/StakingFinal.sol\":3471:3477  APY[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3471:3474  APY */\n      0x09\n        /* \"contracts/Staking/StakingFinal.sol\":3471:3477  APY[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3457:3477  StakeMonth == APY[2] */\n      dup4\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":3413:3477  StakeMonth == APY[1] ||... */\n    tag_184:\n        /* \"contracts/Staking/StakingFinal.sol\":3413:3521  StakeMonth == APY[1] ||... */\n      dup1\n      tag_185\n      jumpi\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3519:3520  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3515:3521  APY[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3515:3518  APY */\n      0x09\n        /* \"contracts/Staking/StakingFinal.sol\":3515:3521  APY[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3501:3521  StakeMonth == APY[3] */\n      dup4\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":3413:3521  StakeMonth == APY[1] ||... */\n    tag_185:\n        /* \"contracts/Staking/StakingFinal.sol\":3388:3577  require(... */\n      tag_186\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5739:5741   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":3388:3577  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5721:5742   */\n      mstore\n        /* \"#utility.yul\":5778:5780   */\n      0x16\n        /* \"#utility.yul\":5758:5776   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5751:5781   */\n      mstore\n      shl(0x53, 0x08adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d)\n        /* \"#utility.yul\":5797:5815   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5790:5842   */\n      mstore\n        /* \"#utility.yul\":5859:5877   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":3388:3577  require(... */\n      tag_120\n        /* \"#utility.yul\":5537:5883   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":3388:3577  require(... */\n    tag_186:\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3630  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":3634:3637  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3637  EarnPersentage == 100 */\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3681  EarnPersentage == 100 ||... */\n      dup1\n      tag_188\n      jumpi\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3661:3675  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":3679:3681  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":3661:3681  EarnPersentage == 75 */\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3681  EarnPersentage == 100 ||... */\n    tag_188:\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3725  EarnPersentage == 100 ||... */\n      dup1\n      tag_189\n      jumpi\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3705:3719  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":3723:3725  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":3705:3725  EarnPersentage == 50 */\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":3616:3725  EarnPersentage == 100 ||... */\n    tag_189:\n        /* \"contracts/Staking/StakingFinal.sol\":3591:3785  require(... */\n      tag_190\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6090:6092   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":3591:3785  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6072:6093   */\n      mstore\n        /* \"#utility.yul\":6129:6131   */\n      0x1a\n        /* \"#utility.yul\":6109:6127   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6102:6132   */\n      mstore\n        /* \"#utility.yul\":6168:6196   */\n      0x456e746572205269676874204561726e50657273656e74616765000000000000\n        /* \"#utility.yul\":6148:6166   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6141:6197   */\n      mstore\n        /* \"#utility.yul\":6214:6232   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":3591:3785  require(... */\n      tag_120\n        /* \"#utility.yul\":5888:6238   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":3591:3785  require(... */\n    tag_190:\n        /* \"contracts/Staking/StakingFinal.sol\":3799:3815  uint256 AdminFee */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3836:3840  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":3829:3832  Tax */\n      sload(0x05)\n        /* \"contracts/Staking/StakingFinal.sol\":3819:3826  _amount */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":3819:3832  _amount * Tax */\n      tag_192\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_192:\n        /* \"contracts/Staking/StakingFinal.sol\":3818:3840  (_amount * Tax) / 1000 */\n      tag_193\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_193:\n        /* \"contracts/Staking/StakingFinal.sol\":3799:3840  uint256 AdminFee = (_amount * Tax) / 1000 */\n      swap1\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3868:4039  Staker(... */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3902:3910  AdminFee */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":3892:3899  _amount */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":3892:3910  _amount - AdminFee */\n      tag_194\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_194:\n        /* \"contracts/Staking/StakingFinal.sol\":3868:4039  Staker(... */\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3928:3943  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":3868:4039  Staker(... */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      dup1\n      dup4\n      add\n      dup9\n      swap1\n      mstore\n      0x60\n      dup1\n      dup5\n      add\n      dup9\n      swap1\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4021:4025  true */\n      0x01\n        /* \"contracts/Staking/StakingFinal.sol\":3868:4039  Staker(... */\n      0x80\n      swap5\n      dup6\n      add\n      dup2\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":3854:3865  Details[to] */\n      dup13\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":3854:3861  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":3854:3865  Details[to] */\n      dup6\n      mstore\n      dup4\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3854:4039  Details[to] = Staker(... */\n      dup7\n      mload\n      dup2\n      sstore\n      swap4\n      dup7\n      add\n      mload\n      swap1\n      dup5\n      add\n      sstore\n      swap1\n      dup5\n      add\n      mload\n      0x02\n      dup4\n      add\n      dup2\n      swap1\n      sstore\n      swap1\n      dup5\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      swap3\n      swap1\n      swap2\n      add\n      mload\n      0x04\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4083:4089  APY[1] */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4057:4089  Details[to].StakeMonth == APY[1] */\n      swap1\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":4053:4464  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_195\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":4161:4162  1 */\n      0x01\n        /* \"contracts/Staking/StakingFinal.sol\":4154:4163  APYPer[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4154:4160  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":4154:4163  APYPer[1] */\n      0x20\n      mstore\n      sload(0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7)\n        /* \"contracts/Staking/StakingFinal.sol\":4167:4171  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4132:4150  _amount - AdminFee */\n      tag_196\n        /* \"contracts/Staking/StakingFinal.sol\":4142:4150  AdminFee */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":4132:4139  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4132:4150  _amount - AdminFee */\n      tag_123\n      jump\t// in\n    tag_196:\n        /* \"contracts/Staking/StakingFinal.sol\":4131:4163  (_amount - AdminFee) * APYPer[1] */\n      tag_197\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_197:\n        /* \"contracts/Staking/StakingFinal.sol\":4130:4171  ((_amount - AdminFee) * APYPer[1]) / 1000 */\n      tag_198\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_198:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4109:4127  InterestAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4109:4123  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":4109:4127  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4109:4171  InterestAmount[to] = ((_amount - AdminFee) * APYPer[1]) / 1000 */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":4053:4464  if (Details[to].StakeMonth == APY[1]) {... */\n      jump(tag_205)\n    tag_195:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4222:4228  APY[2] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4207  Details[to] */\n      dup8\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4222:4228  APY[2] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4207  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4203  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":4222:4228  APY[2] */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4207  Details[to] */\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4222:4228  APY[2] */\n      0x40\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4207  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4226:4227  2 */\n      0x02\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4218  Details[to].StakeMonth */\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4196:4228  Details[to].StakeMonth == APY[2] */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":4192:4464  if (Details[to].StakeMonth == APY[2]) {... */\n      tag_200\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":4300:4301  2 */\n      0x02\n        /* \"contracts/Staking/StakingFinal.sol\":4293:4302  APYPer[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4293:4299  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":4293:4302  APYPer[2] */\n      0x20\n      mstore\n      sload(0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8)\n        /* \"contracts/Staking/StakingFinal.sol\":4306:4310  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4271:4289  _amount - AdminFee */\n      tag_196\n        /* \"contracts/Staking/StakingFinal.sol\":4281:4289  AdminFee */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":4271:4278  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4271:4289  _amount - AdminFee */\n      tag_123\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":4192:4464  if (Details[to].StakeMonth == APY[2]) {... */\n    tag_200:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4361:4367  APY[3] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4346  Details[to] */\n      dup8\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4361:4367  APY[3] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4346  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4342  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":4361:4367  APY[3] */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4346  Details[to] */\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4361:4367  APY[3] */\n      0x40\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4346  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4357  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4335:4367  Details[to].StakeMonth == APY[3] */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":4331:4464  if (Details[to].StakeMonth == APY[3]) {... */\n      tag_205\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":4439:4440  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4432:4441  APYPer[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4432:4438  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":4432:4441  APYPer[3] */\n      0x20\n      mstore\n      sload(0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759)\n        /* \"contracts/Staking/StakingFinal.sol\":4445:4449  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4410:4428  _amount - AdminFee */\n      tag_206\n        /* \"contracts/Staking/StakingFinal.sol\":4420:4428  AdminFee */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":4410:4417  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4410:4428  _amount - AdminFee */\n      tag_123\n      jump\t// in\n    tag_206:\n        /* \"contracts/Staking/StakingFinal.sol\":4409:4441  (_amount - AdminFee) * APYPer[3] */\n      tag_207\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_207:\n        /* \"contracts/Staking/StakingFinal.sol\":4408:4449  ((_amount - AdminFee) * APYPer[3]) / 1000 */\n      tag_208\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_208:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4387:4405  InterestAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4387:4401  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":4387:4405  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4387:4449  InterestAmount[to] = ((_amount - AdminFee) * APYPer[3]) / 1000 */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":4331:4464  if (Details[to].StakeMonth == APY[3]) {... */\n    tag_205:\n        /* \"contracts/Staking/StakingFinal.sol\":4484:4496  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4477:4542  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      tag_209\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4484:4496  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4515:4517  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4527:4531  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":4534:4541  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4477:4514  IERC20(ERC20Address).safeTransferFrom */\n      tag_182\n        /* \"contracts/Staking/StakingFinal.sol\":4477:4542  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      jump\t// in\n    tag_209:\n        /* \"contracts/Staking/StakingFinal.sol\":3374:4553  {... */\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2377:4553  if (Details[to].check) {... */\n    tag_183:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4572  Tokens[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4568  Tokens */\n      0x0b\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4572  Tokens[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4583  Tokens[to] += _amount */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4576:4583  _amount */\n      dup4\n      swap3\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4572  Tokens[to] */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4583  Tokens[to] += _amount */\n      tag_210\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4576:4583  _amount */\n      dup5\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":4562:4583  Tokens[to] += _amount */\n      tag_118\n      jump\t// in\n    tag_210:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4614:4621  _amount */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":4593:4610  totalStakedTokens */\n      0x03\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4593:4621  totalStakedTokens += _amount */\n      dup3\n      dup3\n      sload\n      tag_211\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_211:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2114:4628  function DepositTokens(... */\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":11258:11451  function SetAPY(... */\n    tag_53:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_213\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_213:\n        /* \"contracts/Staking/StakingFinal.sol\":11379:11382  APY */\n      0x09\n        /* \"contracts/Staking/StakingFinal.sol\":11379:11385  APY[1] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":11379:11394  APY[1] = Month1 */\n      swap3\n      swap1\n      swap3\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":11404:11419  APY[2] = Month2 */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11433:11434  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":11379:11385  APY[1] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":11429:11435  APY[3] */\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":11429:11444  APY[3] = Month3 */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11258:11451  function SetAPY(... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_219\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_221\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_222\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":4824:9361  function WithdrawTokens(address to) public {... */\n    tag_89:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":4885:4896  Details[to] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":4885:4892  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":4885:4896  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4885:4902  Details[to].check */\n      0x04\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4877:4925  require(Details[to].check, \"First Stake Tokens\") */\n      tag_225\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6445:6447   */\n      0x20\n        /* \"contracts/Staking/StakingFinal.sol\":4877:4925  require(Details[to].check, \"First Stake Tokens\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6427:6448   */\n      mstore\n        /* \"#utility.yul\":6484:6486   */\n      0x12\n        /* \"#utility.yul\":6464:6482   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6457:6487   */\n      mstore\n      shl(0x70, 0x4669727374205374616b6520546f6b656e73)\n        /* \"#utility.yul\":6503:6521   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6496:6544   */\n      mstore\n        /* \"#utility.yul\":6561:6579   */\n      0x64\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":4877:4925  require(Details[to].check, \"First Stake Tokens\") */\n      tag_120\n        /* \"#utility.yul\":6243:6585   */\n      jump\n        /* \"contracts/Staking/StakingFinal.sol\":4877:4925  require(Details[to].check, \"First Stake Tokens\") */\n    tag_225:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5054:5065  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4935:4952  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":5054:5065  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5054:5061  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":5054:5065  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5054:5075  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5030  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4935:4952  uint256 EarnToken */\n      dup3\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5079:5094  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5035  Details[to].StakeMonth * 30 */\n      tag_228\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5033:5035  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5035  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_228:\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5040  Details[to].StakeMonth * 30 * 24 */\n      tag_229\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5038:5040  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5040  Details[to].StakeMonth * 30 * 24 */\n      tag_113\n      jump\t// in\n    tag_229:\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5045  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_230\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5043:5045  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5045  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_113\n      jump\t// in\n    tag_230:\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5050  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_231\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5048:5050  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":5008:5050  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_113\n      jump\t// in\n    tag_231:\n        /* \"contracts/Staking/StakingFinal.sol\":5007:5075  (Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime */\n      tag_232\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_232:\n        /* \"contracts/Staking/StakingFinal.sol\":5006:5094  ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) < block.timestamp */\n      lt\n        /* \"contracts/Staking/StakingFinal.sol\":4989:9147  if (... */\n      iszero\n      tag_233\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5114:5125  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5114:5121  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":5114:5125  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5114:5140  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5144:5147  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":5114:5147  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":5110:6676  if (Details[to].EarnPersentage == 100) {... */\n      tag_234\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":5174:5186  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5316:5332  RewardAmount[to] */\n      dup5\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":5174:5186  ERC20Address */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":5316:5332  RewardAmount[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5316:5328  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":5316:5332  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5295:5309  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":5295:5313  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5174:5186  ERC20Address */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5167:5196  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5218:5220  to */\n      dup7\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5295:5332  InterestAmount[to] - RewardAmount[to] */\n      tag_235\n      swap2\n      tag_123\n      jump\t// in\n    tag_235:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5242:5253  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5242:5249  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":5242:5253  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5242:5267  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5242:5333  Details[to].depositTokens +... */\n      tag_236\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_236:\n        /* \"contracts/Staking/StakingFinal.sol\":5167:5351  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_237:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_239\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_239:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_240\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_240:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4989:9147  if (... */\n      jump(tag_275)\n        /* \"contracts/Staking/StakingFinal.sol\":5110:6676  if (Details[to].EarnPersentage == 100) {... */\n    tag_234:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5376:5387  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5376:5383  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":5376:5387  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5376:5402  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5406:5408  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":5376:5408  Details[to].EarnPersentage == 75 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":5372:6676  if (Details[to].EarnPersentage == 75) {... */\n      tag_242\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5483:5499  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5483:5495  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":5483:5499  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5462:5476  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":5462:5480  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5529:5532  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5462:5499  InterestAmount[to] - RewardAmount[to] */\n      tag_243\n      swap2\n      tag_123\n      jump\t// in\n    tag_243:\n        /* \"contracts/Staking/StakingFinal.sol\":5461:5505  (InterestAmount[to] - RewardAmount[to]) * 75 */\n      tag_244\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5503:5505  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":5461:5505  (InterestAmount[to] - RewardAmount[to]) * 75 */\n      tag_113\n      jump\t// in\n    tag_244:\n        /* \"contracts/Staking/StakingFinal.sol\":5460:5532  ((InterestAmount[to] - RewardAmount[to]) * 75) /... */\n      tag_245\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_245:\n        /* \"contracts/Staking/StakingFinal.sol\":5557:5569  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5636  Details[to] */\n      dup6\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":5557:5569  ERC20Address */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5636  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5632  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5636  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5650  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5428:5532  EarnToken =... */\n      swap3\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":5557:5569  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5550:5579  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5601:5603  to */\n      dup6\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5662  Details[to].depositTokens + EarnToken */\n      tag_246\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5428:5532  EarnToken =... */\n      dup7\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5625:5662  Details[to].depositTokens + EarnToken */\n      tag_118\n      jump\t// in\n    tag_246:\n        /* \"contracts/Staking/StakingFinal.sol\":5550:5680  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_247\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_247:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_249\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_249:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_250\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_250:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5753:5769  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5753:5765  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":5753:5769  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5732:5746  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":5732:5750  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":5799:5802  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":5732:5769  InterestAmount[to] - RewardAmount[to] */\n      tag_251\n      swap2\n      tag_123\n      jump\t// in\n    tag_251:\n        /* \"contracts/Staking/StakingFinal.sol\":5731:5775  (InterestAmount[to] - RewardAmount[to]) * 25 */\n      tag_252\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5773:5775  25 */\n      0x19\n        /* \"contracts/Staking/StakingFinal.sol\":5731:5775  (InterestAmount[to] - RewardAmount[to]) * 25 */\n      tag_113\n      jump\t// in\n    tag_252:\n        /* \"contracts/Staking/StakingFinal.sol\":5730:5802  ((InterestAmount[to] - RewardAmount[to]) * 25) /... */\n      tag_253\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_253:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5820:5834  BurnAmount[to] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5820:5830  BurnAmount */\n      0x0d\n        /* \"contracts/Staking/StakingFinal.sol\":5820:5834  BurnAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":5820:5846  BurnAmount[to] = BurnToken */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":5871:5883  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":5864:6006  IERC20(ERC20Address).transfer(... */\n      swap1\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":5698:5802  BurnToken =... */\n      swap3\n      swap4\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":5871:5883  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5864:5893  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5864:6006  IERC20(ERC20Address).transfer(... */\n      tag_237\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5915:5957  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5698:5802  BurnToken =... */\n      dup6\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":5864:6006  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_135\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":5372:6676  if (Details[to].EarnPersentage == 75) {... */\n    tag_242:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6031:6042  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6031:6038  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":6031:6042  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":6031:6057  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6061:6063  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":6031:6063  Details[to].EarnPersentage == 50 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":6027:6676  if (Details[to].EarnPersentage == 50) {... */\n      tag_259\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6138:6154  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6138:6150  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":6138:6154  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6117:6131  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":6117:6135  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6184:6187  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":6117:6154  InterestAmount[to] - RewardAmount[to] */\n      tag_260\n      swap2\n      tag_123\n      jump\t// in\n    tag_260:\n        /* \"contracts/Staking/StakingFinal.sol\":6116:6160  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_261\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6158:6160  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":6116:6160  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_113\n      jump\t// in\n    tag_261:\n        /* \"contracts/Staking/StakingFinal.sol\":6115:6187  ((InterestAmount[to] - RewardAmount[to]) * 50) /... */\n      tag_262\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_262:\n        /* \"contracts/Staking/StakingFinal.sol\":6212:6224  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6291  Details[to] */\n      dup6\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":6212:6224  ERC20Address */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6291  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6287  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6291  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6305  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6083:6187  EarnToken =... */\n      swap3\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":6212:6224  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6205:6234  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6256:6258  to */\n      dup6\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6317  Details[to].depositTokens + EarnToken */\n      tag_263\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6083:6187  EarnToken =... */\n      dup7\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6280:6317  Details[to].depositTokens + EarnToken */\n      tag_118\n      jump\t// in\n    tag_263:\n        /* \"contracts/Staking/StakingFinal.sol\":6205:6335  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_264\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_264:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_266\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_266:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_267\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_267:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6408:6424  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6408:6420  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":6408:6424  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6387:6401  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":6387:6405  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6454:6457  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":6387:6424  InterestAmount[to] - RewardAmount[to] */\n      tag_268\n      swap2\n      tag_123\n      jump\t// in\n    tag_268:\n        /* \"contracts/Staking/StakingFinal.sol\":6386:6430  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_252\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6428:6430  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":6386:6430  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_113\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":6027:6676  if (Details[to].EarnPersentage == 50) {... */\n    tag_259:\n        /* \"contracts/Staking/StakingFinal.sol\":4989:9147  if (... */\n      jump(tag_275)\n    tag_233:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6848:6859  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":6706:6734  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":6848:6859  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6848:6855  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":6848:6859  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":6848:6869  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6706:6734  uint256 InterestAmountperday */\n      dup2\n      swap1\n      dup2\n      swap1\n      dup2\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6874:6886  24 * 60 * 60 */\n      0x015180\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6830:6869  block.timestamp - Details[to].stakeTime */\n      tag_276\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":6830:6845  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":6830:6869  block.timestamp - Details[to].stakeTime */\n      tag_123\n      jump\t// in\n    tag_276:\n        /* \"contracts/Staking/StakingFinal.sol\":6829:6887  (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      tag_277\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_277:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6978:6989  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6978:6985  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":6978:6989  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":6978:7000  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6810:6887  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":6978:7005  Details[to].StakeMonth * 30 */\n      tag_278\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7003:7005  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":6978:7005  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_278:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":6940:6958  InterestAmount[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":6940:6954  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":6940:6958  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6940:7006  InterestAmount[to] /... */\n      tag_279\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_279:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7068:7079  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7068:7075  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":7068:7079  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":7068:7094  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":6901:7006  InterestAmountperday =... */\n      swap1\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7098:7101  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":7068:7101  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":7064:9137  if (Details[to].EarnPersentage == 100) {... */\n      tag_280\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":7134:7165  InterestAmountperday * Stakdays */\n      tag_281\n        /* \"contracts/Staking/StakingFinal.sol\":7157:7165  Stakdays */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":7134:7154  InterestAmountperday */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":7134:7165  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7273:7289  RewardAmount[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7273:7285  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":7273:7289  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":7121:7166  EarnToken = (InterestAmountperday * Stakdays) */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7261:7289  EarnToken - RewardAmount[to] */\n      tag_282\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7121:7166  EarnToken = (InterestAmountperday * Stakdays) */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":7261:7289  EarnToken - RewardAmount[to] */\n      tag_123\n      jump\t// in\n    tag_282:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7212:7223  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7212:7219  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":7212:7223  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":7212:7237  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":7212:7290  Details[to].depositTokens +... */\n      tag_283\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_283:\n        /* \"contracts/Staking/StakingFinal.sol\":7184:7290  Total =... */\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7344:7348  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":7333:7340  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/StakingFinal.sol\":7325:7330  Total */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":7325:7340  Total * penalty */\n      tag_284\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_284:\n        /* \"contracts/Staking/StakingFinal.sol\":7324:7348  (Total * penalty) / 1000 */\n      tag_285\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_285:\n        /* \"contracts/Staking/StakingFinal.sol\":7373:7385  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7308:7348  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7373:7385  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":7366:7395  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":7396:7398  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":7401:7422  Total - PenaltyResult */\n      tag_286\n        /* \"contracts/Staking/StakingFinal.sol\":7308:7348  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":7401:7406  Total */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":7401:7422  Total - PenaltyResult */\n      tag_123\n      jump\t// in\n    tag_286:\n        /* \"contracts/Staking/StakingFinal.sol\":7366:7424  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_287\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_287:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_289\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_289:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_290\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_290:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7064:9137  if (Details[to].EarnPersentage == 100) {... */\n      jump(tag_314)\n    tag_280:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7516:7527  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7516:7523  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":7516:7527  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":7516:7542  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":7546:7548  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":7516:7548  Details[to].EarnPersentage == 75 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":7512:9137  if (Details[to].EarnPersentage == 75) {... */\n      tag_292\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7638:7654  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7638:7650  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":7638:7654  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":7708:7711  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7603:7634  InterestAmountperday * Stakdays */\n      tag_293\n        /* \"contracts/Staking/StakingFinal.sol\":7626:7634  Stakdays */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":7603:7623  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":7603:7634  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_293:\n        /* \"contracts/Staking/StakingFinal.sol\":7602:7654  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_294\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_294:\n        /* \"contracts/Staking/StakingFinal.sol\":7601:7684  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_295\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7682:7684  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":7601:7684  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_295:\n        /* \"contracts/Staking/StakingFinal.sol\":7600:7711  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_296\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_296:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7748  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7744  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7748  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7762  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":7568:7711  EarnToken =... */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7774  Details[to].depositTokens + EarnToken */\n      tag_297\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7568:7711  EarnToken =... */\n      dup8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7737:7774  Details[to].depositTokens + EarnToken */\n      tag_118\n      jump\t// in\n    tag_297:\n        /* \"contracts/Staking/StakingFinal.sol\":7729:7774  Total = Details[to].depositTokens + EarnToken */\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":7828:7832  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":7817:7824  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/StakingFinal.sol\":7809:7814  Total */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":7809:7824  Total * penalty */\n      tag_298\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_298:\n        /* \"contracts/Staking/StakingFinal.sol\":7808:7832  (Total * penalty) / 1000 */\n      tag_299\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_299:\n        /* \"contracts/Staking/StakingFinal.sol\":7857:7869  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7792:7832  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7857:7869  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":7850:7879  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":7880:7882  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":7885:7906  Total - PenaltyResult */\n      tag_300\n        /* \"contracts/Staking/StakingFinal.sol\":7792:7832  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":7885:7890  Total */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":7885:7906  Total - PenaltyResult */\n      tag_123\n      jump\t// in\n    tag_300:\n        /* \"contracts/Staking/StakingFinal.sol\":7850:7908  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_301\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_301:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_303\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_303:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_304\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_304:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":7996:8012  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7996:8008  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":7996:8012  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":8066:8069  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7961:7992  InterestAmountperday * Stakdays */\n      tag_305\n        /* \"contracts/Staking/StakingFinal.sol\":7984:7992  Stakdays */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":7961:7981  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":7961:7992  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_305:\n        /* \"contracts/Staking/StakingFinal.sol\":7960:8012  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_306\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_306:\n        /* \"contracts/Staking/StakingFinal.sol\":7959:8042  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_307\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8040:8042  25 */\n      0x19\n        /* \"contracts/Staking/StakingFinal.sol\":7959:8042  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_307:\n        /* \"contracts/Staking/StakingFinal.sol\":7958:8069  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_308\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_308:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8087:8101  BurnAmount[to] */\n      dup1\n      dup10\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8087:8097  BurnAmount */\n      0x0d\n        /* \"contracts/Staking/StakingFinal.sol\":8087:8101  BurnAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":8087:8113  BurnAmount[to] = BurnToken */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":8138:8150  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8131:8273  IERC20(ERC20Address).transfer(... */\n      swap1\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":7926:8069  BurnToken =... */\n      swap3\n      swap8\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":8138:8150  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8131:8160  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8131:8273  IERC20(ERC20Address).transfer(... */\n      tag_287\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8182:8224  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":7926:8069  BurnToken =... */\n      dup10\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8131:8273  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_135\n      jump\t// in\n        /* \"contracts/Staking/StakingFinal.sol\":7512:9137  if (Details[to].EarnPersentage == 75) {... */\n    tag_292:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8365:8376  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8365:8372  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":8365:8376  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":8365:8391  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":8395:8397  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":8365:8397  Details[to].EarnPersentage == 50 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":8361:9137  if (Details[to].EarnPersentage == 50) {... */\n      tag_314\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8487:8503  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8487:8499  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":8487:8503  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":8557:8560  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8452:8483  InterestAmountperday * Stakdays */\n      tag_315\n        /* \"contracts/Staking/StakingFinal.sol\":8475:8483  Stakdays */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":8452:8472  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":8452:8483  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_315:\n        /* \"contracts/Staking/StakingFinal.sol\":8451:8503  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_316\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_316:\n        /* \"contracts/Staking/StakingFinal.sol\":8450:8533  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_317\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8531:8533  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":8450:8533  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_317:\n        /* \"contracts/Staking/StakingFinal.sol\":8449:8560  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_318\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_318:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8597  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8593  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8597  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8611  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":8417:8560  EarnToken =... */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8623  Details[to].depositTokens + EarnToken */\n      tag_319\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8417:8560  EarnToken =... */\n      dup8\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8586:8623  Details[to].depositTokens + EarnToken */\n      tag_118\n      jump\t// in\n    tag_319:\n        /* \"contracts/Staking/StakingFinal.sol\":8578:8623  Total = Details[to].depositTokens + EarnToken */\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":8677:8681  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":8666:8673  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/StakingFinal.sol\":8658:8663  Total */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":8658:8673  Total * penalty */\n      tag_320\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_320:\n        /* \"contracts/Staking/StakingFinal.sol\":8657:8681  (Total * penalty) / 1000 */\n      tag_321\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_321:\n        /* \"contracts/Staking/StakingFinal.sol\":8706:8718  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8641:8681  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8706:8718  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":8699:8728  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":8729:8731  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":8734:8755  Total - PenaltyResult */\n      tag_322\n        /* \"contracts/Staking/StakingFinal.sol\":8641:8681  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":8734:8739  Total */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":8734:8755  Total - PenaltyResult */\n      tag_123\n      jump\t// in\n    tag_322:\n        /* \"contracts/Staking/StakingFinal.sol\":8699:8757  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_323\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_323:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_325\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_325:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_326\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_326:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8845:8861  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8845:8857  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":8845:8861  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":8915:8918  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8810:8841  InterestAmountperday * Stakdays */\n      tag_327\n        /* \"contracts/Staking/StakingFinal.sol\":8833:8841  Stakdays */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":8810:8830  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":8810:8841  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_327:\n        /* \"contracts/Staking/StakingFinal.sol\":8809:8861  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_328\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_328:\n        /* \"contracts/Staking/StakingFinal.sol\":8808:8891  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_329\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8889:8891  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":8808:8891  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_329:\n        /* \"contracts/Staking/StakingFinal.sol\":8807:8918  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_330\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_330:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8936:8950  BurnAmount[to] */\n      dup1\n      dup10\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8936:8946  BurnAmount */\n      0x0d\n        /* \"contracts/Staking/StakingFinal.sol\":8936:8950  BurnAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":8936:8962  BurnAmount[to] = BurnToken */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":8987:8999  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":8980:9122  IERC20(ERC20Address).transfer(... */\n      swap1\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":8775:8918  BurnToken =... */\n      swap3\n      swap8\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":8987:8999  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8980:9009  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8980:9122  IERC20(ERC20Address).transfer(... */\n      tag_331\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9031:9073  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8775:8918  BurnToken =... */\n      dup10\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":8980:9122  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_135\n      jump\t// in\n    tag_331:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_333\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_333:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_334\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_334:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":8361:9137  if (Details[to].EarnPersentage == 50) {... */\n    tag_314:\n        /* \"contracts/Staking/StakingFinal.sol\":6692:9147  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4989:9147  if (... */\n    tag_275:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9167  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":9176:9181  false */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9167  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9163  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9167  Details[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9173  Details[to].check */\n      0x04\n      dup2\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":9156:9181  Details[to].check = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":9198:9210  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":9198:9214  RewardAmount[to] */\n      dup4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9191:9214  delete RewardAmount[to] */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":9231:9245  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":9231:9249  InterestAmount[to] */\n      dup4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9224:9249  delete InterestAmount[to] */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":9273:9298  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9265  Tokens */\n      0x0b\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9269  Tokens[to] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9298  Tokens[to] -= Details[to].depositTokens */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9273:9298  Details[to].depositTokens */\n      swap2\n      swap3\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9269  Tokens[to] */\n      swap1\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9298  Tokens[to] -= Details[to].depositTokens */\n      tag_335\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9273:9298  Details[to].depositTokens */\n      dup5\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9259:9298  Tokens[to] -= Details[to].depositTokens */\n      tag_123\n      jump\t// in\n    tag_335:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9340  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9336  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9340  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9354  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9308:9325  totalStakedTokens */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":9308:9354  totalStakedTokens -= Details[to].depositTokens */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9354  Details[to].depositTokens */\n      swap2\n      swap3\n        /* \"contracts/Staking/StakingFinal.sol\":9308:9325  totalStakedTokens */\n      swap1\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":9308:9354  totalStakedTokens -= Details[to].depositTokens */\n      tag_336\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9329:9354  Details[to].depositTokens */\n      dup5\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":9308:9354  totalStakedTokens -= Details[to].depositTokens */\n      tag_123\n      jump\t// in\n    tag_336:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4824:9361  function WithdrawTokens(address to) public {... */\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":1586:1818  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_338\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_338:\n        /* \"contracts/Staking/StakingFinal.sol\":1660:1670  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1671  Tokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1659  Tokens */\n      0x0b\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1671  Tokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1682  Tokens[msg.sender] += _amount */\n      dup1\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":1675:1682  _amount */\n      dup4\n      swap3\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1671  Tokens[msg.sender] */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1682  Tokens[msg.sender] += _amount */\n      tag_340\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":1675:1682  _amount */\n      dup5\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":1653:1682  Tokens[msg.sender] += _amount */\n      tag_118\n      jump\t// in\n    tag_340:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":1699:1711  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":1692:1811  IERC20(ERC20Address).safeTransferFrom(... */\n      tag_341\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":1699:1711  ERC20Address */\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":1743:1753  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1775:1779  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":1794:1801  _amount */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":1692:1729  IERC20(ERC20Address).safeTransferFrom */\n      tag_182\n        /* \"contracts/Staking/StakingFinal.sol\":1692:1811  IERC20(ERC20Address).safeTransferFrom(... */\n      jump\t// in\n    tag_341:\n        /* \"contracts/Staking/StakingFinal.sol\":1586:1818  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":11562:11795  function SetRewardPersentage(... */\n    tag_98:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_343\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_343:\n        /* \"contracts/Staking/StakingFinal.sol\":11705:11711  APYPer */\n      0x0a\n        /* \"contracts/Staking/StakingFinal.sol\":11705:11714  APYPer[1] */\n      0x20\n      mstore\n      0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7\n        /* \"contracts/Staking/StakingFinal.sol\":11705:11726  APYPer[1] = Month1Per */\n      swap3\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11736:11745  APYPer[2] */\n      0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8\n        /* \"contracts/Staking/StakingFinal.sol\":11736:11757  APYPer[2] = Month2Per */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11774:11775  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":11705:11714  APYPer[1] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":11767:11776  APYPer[3] */\n      mstore\n      0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759\n        /* \"contracts/Staking/StakingFinal.sol\":11767:11788  APYPer[3] = Month3Per */\n      sstore\n        /* \"contracts/Staking/StakingFinal.sol\":11562:11795  function SetRewardPersentage(... */\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":10528:11147  function viewRewards(address to) public view returns (uint256 reward) {... */\n    tag_101:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10684  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":10582:10596  uint256 reward */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10684  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10680  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10684  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10694  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10649  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10710:10725  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/StakingFinal.sol\":10673:10694  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10654  Details[to].StakeMonth * 30 */\n      tag_346\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10652:10654  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10654  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_346:\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10659  Details[to].StakeMonth * 30 * 24 */\n      tag_347\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10657:10659  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10659  Details[to].StakeMonth * 30 * 24 */\n      tag_113\n      jump\t// in\n    tag_347:\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10664  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_348\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10662:10664  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10664  Details[to].StakeMonth * 30 * 24 * 60 */\n      tag_113\n      jump\t// in\n    tag_348:\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10669  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_349\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10667:10669  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":10627:10669  Details[to].StakeMonth * 30 * 24 * 60 * 60 */\n      tag_113\n      jump\t// in\n    tag_349:\n        /* \"contracts/Staking/StakingFinal.sol\":10626:10694  (Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime */\n      tag_350\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_350:\n        /* \"contracts/Staking/StakingFinal.sol\":10625:10725  ((Details[to].StakeMonth * 30 * 24 * 60 * 60) + Details[to].stakeTime) <... */\n      lt\n        /* \"contracts/Staking/StakingFinal.sol\":10608:11141  if (... */\n      iszero\n      tag_351\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10758:10776  InterestAmount[to] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10758:10772  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":10758:10776  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10528:11147  function viewRewards(address to) public view returns (uint256 reward) {... */\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":10608:11141  if (... */\n    tag_351:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10846:10857  Details[to] */\n      dup3\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":10808:10824  uint256 Stakdays */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10846:10857  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10846:10853  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":10846:10857  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10846:10867  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10872:10884  24 * 60 * 60 */\n      0x015180\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10828:10867  block.timestamp - Details[to].stakeTime */\n      tag_353\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10828:10843  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":10828:10867  block.timestamp - Details[to].stakeTime */\n      tag_123\n      jump\t// in\n    tag_353:\n        /* \"contracts/Staking/StakingFinal.sol\":10827:10885  (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      tag_354\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_354:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10979  Details[to] */\n      dup5\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":10899:10927  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10979  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10975  Details */\n      0x07\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10979  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10990  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10808:10885  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (24 * 60 * 60) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":10899:10927  uint256 InterestAmountperday */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10995  Details[to].StakeMonth * 30 */\n      tag_355\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":10993:10995  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":10968:10995  Details[to].StakeMonth * 30 */\n      tag_113\n      jump\t// in\n    tag_355:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":10930:10948  InterestAmount[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":10930:10944  InterestAmount */\n      0x08\n        /* \"contracts/Staking/StakingFinal.sol\":10930:10948  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10930:10996  InterestAmount[to] /... */\n      tag_356\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_356:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/StakingFinal.sol\":11082:11098  RewardAmount[to] */\n      dup6\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":11010:11027  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":11082:11098  RewardAmount[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/StakingFinal.sol\":11082:11094  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":11082:11098  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":10899:10996  uint256 InterestAmountperday = InterestAmount[to] /... */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":11010:11027  uint256 EarnToken */\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":11031:11062  InterestAmountperday * Stakdays */\n      tag_357\n        /* \"contracts/Staking/StakingFinal.sol\":11054:11062  Stakdays */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":10899:10996  uint256 InterestAmountperday = InterestAmount[to] /... */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":11031:11062  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_357:\n        /* \"contracts/Staking/StakingFinal.sol\":11030:11098  (InterestAmountperday * Stakdays) -... */\n      tag_358\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_358:\n        /* \"contracts/Staking/StakingFinal.sol\":11010:11098  uint256 EarnToken = (InterestAmountperday * Stakdays) -... */\n      swap6\n        /* \"contracts/Staking/StakingFinal.sol\":10528:11147  function viewRewards(address to) public view returns (uint256 reward) {... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_110:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_360\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_360:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_362\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6792:6794   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6774:6795   */\n      mstore\n        /* \"#utility.yul\":6831:6833   */\n      0x26\n        /* \"#utility.yul\":6811:6829   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6804:6834   */\n      mstore\n        /* \"#utility.yul\":6870:6904   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":6850:6868   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6843:6905   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":6921:6939   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6914:6950   */\n      mstore\n        /* \"#utility.yul\":6967:6986   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_120\n        /* \"#utility.yul\":6590:6992   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_362:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_341\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_222\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_182:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7255:7270   */\n      dup6\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":7237:7271   */\n      mstore\n        /* \"#utility.yul\":7307:7322   */\n      dup5\n      and\n        /* \"#utility.yul\":7287:7305   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7280:7323   */\n      mstore\n        /* \"#utility.yul\":7339:7357   */\n      0x64\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7332:7366   */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":7172:7190   */\n      0x84\n      swap1\n      swap2\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      swap1\n      swap2\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0x23b872dd)\n      or\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_367\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_370\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_367:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_214:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_221\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7579:7581   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7561:7582   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7598:7616   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7591:7621   */\n      mstore\n        /* \"#utility.yul\":7657:7691   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7637:7655   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7630:7692   */\n      mstore\n        /* \"#utility.yul\":7709:7727   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_120\n        /* \"#utility.yul\":7377:7733   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_370:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_380\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_381\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_380:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_384\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_383\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_383:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_384\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7940:7942   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7922:7943   */\n      mstore\n        /* \"#utility.yul\":7979:7981   */\n      0x2a\n        /* \"#utility.yul\":7959:7977   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7952:7982   */\n      mstore\n        /* \"#utility.yul\":8018:8052   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":7998:8016   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7991:8053   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":8069:8087   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8062:8102   */\n      mstore\n        /* \"#utility.yul\":8119:8138   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_120\n        /* \"#utility.yul\":7738:8144   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n    tag_384:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3817:4453  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_381:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_389\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_390\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_389:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_390:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_392\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8351:8353   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8333:8354   */\n      mstore\n        /* \"#utility.yul\":8390:8392   */\n      0x26\n        /* \"#utility.yul\":8370:8388   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8363:8393   */\n      mstore\n        /* \"#utility.yul\":8429:8463   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":8409:8427   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8402:8464   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":8480:8498   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8473:8509   */\n      mstore\n        /* \"#utility.yul\":8526:8545   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_120\n        /* \"#utility.yul\":8149:8551   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_392:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_395\n      swap2\n      swap1\n      tag_396\n      jump\t// in\n    tag_395:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_399\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_398)\n    tag_399:\n      0x60\n      swap2\n      pop\n    tag_398:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_400\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_401\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_400:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_401:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_403\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_407\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_407\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9305:9307   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9287:9308   */\n      mstore\n        /* \"#utility.yul\":9344:9346   */\n      0x1d\n        /* \"#utility.yul\":9324:9342   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9317:9347   */\n      mstore\n        /* \"#utility.yul\":9383:9414   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":9363:9381   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9356:9415   */\n      mstore\n        /* \"#utility.yul\":9432:9450   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_120\n        /* \"#utility.yul\":9103:9456   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_407:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_389)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_403:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_389\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_415\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_415:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap2\n      swap1\n      tag_418\n      jump\t// in\n        /* \"#utility.yul\":14:187   */\n    tag_419:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_142\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":192:378   */\n    tag_30:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_426\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_426:\n        /* \"#utility.yul\":343:372   */\n      tag_427\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_419\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":192:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":565:956   */\n    tag_43:\n        /* \"#utility.yul\":651:657   */\n      0x00\n        /* \"#utility.yul\":659:665   */\n      dup1\n        /* \"#utility.yul\":667:673   */\n      0x00\n        /* \"#utility.yul\":675:681   */\n      dup1\n        /* \"#utility.yul\":728:731   */\n      0x80\n        /* \"#utility.yul\":716:725   */\n      dup6\n        /* \"#utility.yul\":707:714   */\n      dup8\n        /* \"#utility.yul\":703:726   */\n      sub\n        /* \"#utility.yul\":699:732   */\n      slt\n        /* \"#utility.yul\":696:749   */\n      iszero\n      tag_430\n      jumpi\n        /* \"#utility.yul\":745:746   */\n      0x00\n        /* \"#utility.yul\":742:743   */\n      dup1\n        /* \"#utility.yul\":735:747   */\n      revert\n        /* \"#utility.yul\":696:749   */\n    tag_430:\n        /* \"#utility.yul\":768:797   */\n      tag_431\n        /* \"#utility.yul\":787:796   */\n      dup6\n        /* \"#utility.yul\":768:797   */\n      tag_419\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":758:797   */\n      swap7\n        /* \"#utility.yul\":844:846   */\n      0x20\n        /* \"#utility.yul\":829:847   */\n      dup7\n      add\n        /* \"#utility.yul\":816:848   */\n      calldataload\n      swap7\n      pop\n        /* \"#utility.yul\":895:897   */\n      0x40\n        /* \"#utility.yul\":880:898   */\n      dup7\n      add\n        /* \"#utility.yul\":867:899   */\n      calldataload\n      swap6\n        /* \"#utility.yul\":946:948   */\n      0x60\n        /* \"#utility.yul\":931:949   */\n      add\n        /* \"#utility.yul\":918:950   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":565:956   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":961:1141   */\n    tag_47:\n        /* \"#utility.yul\":1020:1026   */\n      0x00\n        /* \"#utility.yul\":1073:1075   */\n      0x20\n        /* \"#utility.yul\":1061:1070   */\n      dup3\n        /* \"#utility.yul\":1052:1059   */\n      dup5\n        /* \"#utility.yul\":1048:1071   */\n      sub\n        /* \"#utility.yul\":1044:1076   */\n      slt\n        /* \"#utility.yul\":1041:1093   */\n      iszero\n      tag_433\n      jumpi\n        /* \"#utility.yul\":1089:1090   */\n      0x00\n        /* \"#utility.yul\":1086:1087   */\n      dup1\n        /* \"#utility.yul\":1079:1091   */\n      revert\n        /* \"#utility.yul\":1041:1093   */\n    tag_433:\n      pop\n        /* \"#utility.yul\":1112:1135   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":961:1141   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1146:1462   */\n    tag_52:\n        /* \"#utility.yul\":1223:1229   */\n      0x00\n        /* \"#utility.yul\":1231:1237   */\n      dup1\n        /* \"#utility.yul\":1239:1245   */\n      0x00\n        /* \"#utility.yul\":1292:1294   */\n      0x60\n        /* \"#utility.yul\":1280:1289   */\n      dup5\n        /* \"#utility.yul\":1271:1278   */\n      dup7\n        /* \"#utility.yul\":1267:1290   */\n      sub\n        /* \"#utility.yul\":1263:1295   */\n      slt\n        /* \"#utility.yul\":1260:1312   */\n      iszero\n      tag_435\n      jumpi\n        /* \"#utility.yul\":1308:1309   */\n      0x00\n        /* \"#utility.yul\":1305:1306   */\n      dup1\n        /* \"#utility.yul\":1298:1310   */\n      revert\n        /* \"#utility.yul\":1260:1312   */\n    tag_435:\n      pop\n      pop\n        /* \"#utility.yul\":1331:1354   */\n      dup2\n      calldataload\n      swap4\n        /* \"#utility.yul\":1401:1403   */\n      0x20\n        /* \"#utility.yul\":1386:1404   */\n      dup4\n      add\n        /* \"#utility.yul\":1373:1405   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":1452:1454   */\n      0x40\n        /* \"#utility.yul\":1437:1455   */\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1424:1456   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1146:1462   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1467:1715   */\n    tag_60:\n        /* \"#utility.yul\":1535:1541   */\n      0x00\n        /* \"#utility.yul\":1543:1549   */\n      dup1\n        /* \"#utility.yul\":1596:1598   */\n      0x40\n        /* \"#utility.yul\":1584:1593   */\n      dup4\n        /* \"#utility.yul\":1575:1582   */\n      dup6\n        /* \"#utility.yul\":1571:1594   */\n      sub\n        /* \"#utility.yul\":1567:1599   */\n      slt\n        /* \"#utility.yul\":1564:1616   */\n      iszero\n      tag_437\n      jumpi\n        /* \"#utility.yul\":1612:1613   */\n      0x00\n        /* \"#utility.yul\":1609:1610   */\n      dup1\n        /* \"#utility.yul\":1602:1614   */\n      revert\n        /* \"#utility.yul\":1564:1616   */\n    tag_437:\n      pop\n      pop\n        /* \"#utility.yul\":1635:1658   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1705:1707   */\n      0x20\n        /* \"#utility.yul\":1690:1708   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1677:1709   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1467:1715   */\n      jump\t// out\n        /* \"#utility.yul\":2659:2786   */\n    tag_420:\n        /* \"#utility.yul\":2720:2730   */\n      0x4e487b71\n        /* \"#utility.yul\":2715:2718   */\n      0xe0\n        /* \"#utility.yul\":2711:2731   */\n      shl\n        /* \"#utility.yul\":2708:2709   */\n      0x00\n        /* \"#utility.yul\":2701:2732   */\n      mstore\n        /* \"#utility.yul\":2751:2755   */\n      0x11\n        /* \"#utility.yul\":2748:2749   */\n      0x04\n        /* \"#utility.yul\":2741:2756   */\n      mstore\n        /* \"#utility.yul\":2775:2779   */\n      0x24\n        /* \"#utility.yul\":2772:2773   */\n      0x00\n        /* \"#utility.yul\":2765:2780   */\n      revert\n        /* \"#utility.yul\":2791:2959   */\n    tag_113:\n        /* \"#utility.yul\":2864:2873   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":2895:2904   */\n      dup2\n      iszero\n        /* \"#utility.yul\":2912:2927   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":2906:2928   */\n      dup5\n      eq\n        /* \"#utility.yul\":2892:2929   */\n      or\n        /* \"#utility.yul\":2882:2953   */\n      tag_145\n      jumpi\n        /* \"#utility.yul\":2933:2951   */\n      tag_145\n      tag_420\n      jump\t// in\n        /* \"#utility.yul\":2964:3089   */\n    tag_118:\n        /* \"#utility.yul\":3029:3038   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3050:3060   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3047:3083   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":3063:3081   */\n      tag_145\n      tag_420\n      jump\t// in\n        /* \"#utility.yul\":3520:3648   */\n    tag_123:\n        /* \"#utility.yul\":3587:3596   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":3608:3619   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":3605:3642   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":3622:3640   */\n      tag_145\n      tag_420\n      jump\t// in\n        /* \"#utility.yul\":3653:3870   */\n    tag_125:\n        /* \"#utility.yul\":3693:3694   */\n      0x00\n        /* \"#utility.yul\":3719:3720   */\n      dup3\n        /* \"#utility.yul\":3709:3841   */\n      tag_453\n      jumpi\n        /* \"#utility.yul\":3763:3773   */\n      0x4e487b71\n        /* \"#utility.yul\":3758:3761   */\n      0xe0\n        /* \"#utility.yul\":3754:3774   */\n      shl\n        /* \"#utility.yul\":3751:3752   */\n      0x00\n        /* \"#utility.yul\":3744:3775   */\n      mstore\n        /* \"#utility.yul\":3798:3802   */\n      0x12\n        /* \"#utility.yul\":3795:3796   */\n      0x04\n        /* \"#utility.yul\":3788:3803   */\n      mstore\n        /* \"#utility.yul\":3826:3830   */\n      0x24\n        /* \"#utility.yul\":3823:3824   */\n      0x00\n        /* \"#utility.yul\":3816:3831   */\n      revert\n        /* \"#utility.yul\":3709:3841   */\n    tag_453:\n      pop\n        /* \"#utility.yul\":3855:3864   */\n      div\n      swap1\n        /* \"#utility.yul\":3653:3870   */\n      jump\t// out\n        /* \"#utility.yul\":4277:4551   */\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4469:4501   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4451:4502   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4533:4535   */\n      0x20\n        /* \"#utility.yul\":4518:4536   */\n      dup3\n      add\n        /* \"#utility.yul\":4511:4545   */\n      mstore\n        /* \"#utility.yul\":4439:4441   */\n      0x40\n        /* \"#utility.yul\":4424:4442   */\n      add\n      swap1\n        /* \"#utility.yul\":4277:4551   */\n      jump\t// out\n        /* \"#utility.yul\":4556:4833   */\n    tag_139:\n        /* \"#utility.yul\":4623:4629   */\n      0x00\n        /* \"#utility.yul\":4676:4678   */\n      0x20\n        /* \"#utility.yul\":4664:4673   */\n      dup3\n        /* \"#utility.yul\":4655:4662   */\n      dup5\n        /* \"#utility.yul\":4651:4674   */\n      sub\n        /* \"#utility.yul\":4647:4679   */\n      slt\n        /* \"#utility.yul\":4644:4696   */\n      iszero\n      tag_457\n      jumpi\n        /* \"#utility.yul\":4692:4693   */\n      0x00\n        /* \"#utility.yul\":4689:4690   */\n      dup1\n        /* \"#utility.yul\":4682:4694   */\n      revert\n        /* \"#utility.yul\":4644:4696   */\n    tag_457:\n        /* \"#utility.yul\":4724:4733   */\n      dup2\n        /* \"#utility.yul\":4718:4734   */\n      mload\n        /* \"#utility.yul\":4777:4782   */\n      dup1\n        /* \"#utility.yul\":4770:4783   */\n      iszero\n        /* \"#utility.yul\":4763:4784   */\n      iszero\n        /* \"#utility.yul\":4756:4761   */\n      dup2\n        /* \"#utility.yul\":4753:4785   */\n      eq\n        /* \"#utility.yul\":4743:4803   */\n      tag_427\n      jumpi\n        /* \"#utility.yul\":4799:4800   */\n      0x00\n        /* \"#utility.yul\":4796:4797   */\n      dup1\n        /* \"#utility.yul\":4789:4801   */\n      revert\n        /* \"#utility.yul\":8556:8806   */\n    tag_421:\n        /* \"#utility.yul\":8641:8642   */\n      0x00\n        /* \"#utility.yul\":8651:8764   */\n    tag_470:\n        /* \"#utility.yul\":8665:8671   */\n      dup4\n        /* \"#utility.yul\":8662:8663   */\n      dup2\n        /* \"#utility.yul\":8659:8672   */\n      lt\n        /* \"#utility.yul\":8651:8764   */\n      iszero\n      tag_472\n      jumpi\n        /* \"#utility.yul\":8741:8752   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8735:8753   */\n      mload\n        /* \"#utility.yul\":8722:8733   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":8715:8754   */\n      mstore\n        /* \"#utility.yul\":8687:8689   */\n      0x20\n        /* \"#utility.yul\":8680:8690   */\n      add\n        /* \"#utility.yul\":8651:8764   */\n      jump(tag_470)\n    tag_472:\n      pop\n      pop\n        /* \"#utility.yul\":8798:8799   */\n      0x00\n        /* \"#utility.yul\":8780:8796   */\n      swap2\n      add\n        /* \"#utility.yul\":8773:8800   */\n      mstore\n        /* \"#utility.yul\":8556:8806   */\n      jump\t// out\n        /* \"#utility.yul\":8811:9098   */\n    tag_396:\n        /* \"#utility.yul\":8940:8943   */\n      0x00\n        /* \"#utility.yul\":8978:8984   */\n      dup3\n        /* \"#utility.yul\":8972:8985   */\n      mload\n        /* \"#utility.yul\":8994:9060   */\n      tag_474\n        /* \"#utility.yul\":9053:9059   */\n      dup2\n        /* \"#utility.yul\":9048:9051   */\n      dup5\n        /* \"#utility.yul\":9041:9045   */\n      0x20\n        /* \"#utility.yul\":9033:9039   */\n      dup8\n        /* \"#utility.yul\":9029:9046   */\n      add\n        /* \"#utility.yul\":8994:9060   */\n      tag_421\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":9076:9092   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":8811:9098   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9461:9857   */\n    tag_418:\n        /* \"#utility.yul\":9610:9612   */\n      0x20\n        /* \"#utility.yul\":9599:9608   */\n      dup2\n        /* \"#utility.yul\":9592:9613   */\n      mstore\n        /* \"#utility.yul\":9573:9577   */\n      0x00\n        /* \"#utility.yul\":9642:9648   */\n      dup3\n        /* \"#utility.yul\":9636:9649   */\n      mload\n        /* \"#utility.yul\":9685:9691   */\n      dup1\n        /* \"#utility.yul\":9680:9682   */\n      0x20\n        /* \"#utility.yul\":9669:9678   */\n      dup5\n        /* \"#utility.yul\":9665:9683   */\n      add\n        /* \"#utility.yul\":9658:9692   */\n      mstore\n        /* \"#utility.yul\":9701:9780   */\n      tag_477\n        /* \"#utility.yul\":9773:9779   */\n      dup2\n        /* \"#utility.yul\":9768:9770   */\n      0x40\n        /* \"#utility.yul\":9757:9766   */\n      dup6\n        /* \"#utility.yul\":9753:9771   */\n      add\n        /* \"#utility.yul\":9748:9750   */\n      0x20\n        /* \"#utility.yul\":9740:9746   */\n      dup8\n        /* \"#utility.yul\":9736:9751   */\n      add\n        /* \"#utility.yul\":9701:9780   */\n      tag_421\n      jump\t// in\n    tag_477:\n        /* \"#utility.yul\":9841:9843   */\n      0x1f\n        /* \"#utility.yul\":9820:9835   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":9816:9845   */\n      and\n        /* \"#utility.yul\":9801:9846   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":9848:9850   */\n      0x40\n        /* \"#utility.yul\":9797:9851   */\n      add\n      swap3\n        /* \"#utility.yul\":9461:9857   */\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b 6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3\n    data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4 c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7\n    data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e 92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36\n\n    auxdata: 0xa2646970667358221220aa9862f6d1aec9ea314baa8a0a0b69052ab1aecbe17bc6bc3c37b493e013e51564736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1096": {
									"entryPoint": null,
									"id": 1096,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": null,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 110,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 190,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:10"
															},
															"nodeType": "YulIf",
															"src": "105:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:10"
															},
															"nodeType": "YulIf",
															"src": "204:70:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:10",
														"type": ""
													}
												],
												"src": "14:290:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x22B0 CODESIZE SUB DUP1 PUSH3 0x22B0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xBE JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x6E JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH3 0xF0 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x21B0 DUP1 PUSH3 0x100 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA6021ACE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0xD6F80A25 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDA40EF80 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x777B4CD8 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x897B3A68 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21736665 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x21736665 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x22B72666 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x264B4AF6 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x2E886F1F EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x662B12C9 EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178BE5F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x32AD8FB EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xDEEF63A EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x186CB65B EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16F PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F57 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FD5 JUMP JUMPDEST PUSH1 0x5 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x16F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0xEC9 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0x197F JUMP JUMPDEST PUSH2 0x16F PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x371 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x3DF SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x3EA SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x3F5 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x400 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x40A SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST GT PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2043616C6C2057697468647261772046756E6374696F6E202100000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x4AD SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x4E2 SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x513 DUP4 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x56F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526577617264206D7573742062652067726561746572207468616E207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x592 SWAP1 DUP3 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x5BA SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x5F1 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x610 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x634 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x666 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SWAP1 PUSH2 0x68F SWAP1 DUP3 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6B2 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x720 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x506C65617365205761697420212121 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x730 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x788 SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x793 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x79E SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x7A9 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x7B3 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST GT PUSH2 0x800 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 EQ PUSH2 0x863 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 EQ PUSH2 0x8CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8F1 SWAP1 DUP3 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SUB PUSH2 0x99E JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x961 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x96B SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x993 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xAAC SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA09 JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x961 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xAAC JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xA74 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xA7E SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xAA6 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xAC4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 ADDRESS DUP5 PUSH2 0x1BAD JUMP JUMPDEST PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ DUP1 PUSH2 0xB08 JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST DUP1 PUSH2 0xB2B JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST DUP2 PUSH1 0x64 EQ DUP1 PUSH2 0xB7F JUMPI POP DUP2 PUSH1 0x4B EQ JUMPDEST DUP1 PUSH2 0xB8A JUMPI POP DUP2 PUSH1 0x32 EQ JUMPDEST PUSH2 0xBD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E8 PUSH1 0x5 SLOAD DUP4 PUSH2 0xBE9 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xBF3 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP5 PUSH2 0xC0C SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP5 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SSTORE SWAP4 DUP7 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 SUB PUSH2 0xD03 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCD1 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xCDB SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xCE5 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xE07 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xD6E JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCD1 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xE07 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xDD9 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xDE3 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xDED SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xE1F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 ADDRESS DUP6 PUSH2 0x1BAD JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xE49 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE76 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0xEBD PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0xEC7 PUSH1 0x0 PUSH2 0x1C67 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4669727374205374616B6520546F6B656E73 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 TIMESTAMP SWAP2 PUSH2 0xF5B SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF66 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF71 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF7C SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF86 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST LT ISZERO PUSH2 0x1346 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x1077 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 DUP7 SWAP2 PUSH2 0xFEE SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1011 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x102E SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x104D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1071 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH2 0x18A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x1206 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x10CB SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x10D6 SWAP1 PUSH1 0x4B PUSH2 0x200D JUMP JUMPDEST PUSH2 0x10E0 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x1115 SWAP1 DUP7 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1132 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1151 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1175 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x11A7 SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x11B2 SWAP1 PUSH1 0x19 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x11BC SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x102E SWAP1 PUSH2 0xDEAD SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x1341 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x125A SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1265 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x126F SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x12A4 SWAP1 DUP7 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C1 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1304 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1336 SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x11B2 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x18A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH3 0x15180 SWAP1 PUSH2 0x1377 SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x13AB SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x13CE SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP5 POP PUSH1 0x64 SUB PUSH2 0x14E9 JUMPI PUSH2 0x13FE DUP2 DUP6 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1424 SWAP1 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1447 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x145A SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1464 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1483 DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A0 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E3 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x16A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x1532 DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x153C SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1547 SWAP1 PUSH1 0x4B PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1551 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1578 SWAP1 DUP8 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1595 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x15B4 DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D1 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1614 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x163B DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1645 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1650 SWAP1 PUSH1 0x19 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x165A SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP8 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x14A0 SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x18A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x16ED DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x16F7 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1702 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x170C SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1733 SWAP1 DUP8 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x1746 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1750 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x176F DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x178C SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17CF SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x17F6 DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1800 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x180B SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1815 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP8 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x185F SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x187E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18A2 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0xC DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x18FD SWAP1 DUP5 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x192E SWAP1 DUP5 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1940 PUSH2 0x1C0D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x195F SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH2 0x197C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x1BAD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1987 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SWAP3 SWAP1 SWAP3 SSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x1A2D SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A38 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A43 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A4E SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A58 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST LT ISZERO PUSH2 0x1A7A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x1AA5 SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1AAF SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1ADA SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1AFD SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1B24 DUP5 DUP5 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1B2E SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1B3F PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1BA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH2 0x197C DUP2 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1C07 SWAP1 DUP6 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D0C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D8E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1D89 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1D2A SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST PUSH2 0x1D89 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D9D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DA5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E22 SWAP2 SWAP1 PUSH2 0x20CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1E75 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1E80 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1EEF JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1EE8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1EE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST POP DUP2 PUSH2 0x1D9D JUMP JUMPDEST PUSH2 0x1D9D DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1F04 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x479 SWAP2 SWAP1 PUSH2 0x20E7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F50 DUP3 PUSH2 0x1F1E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F76 DUP6 PUSH2 0x1F1E JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2067 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20C2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20AA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x20DD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20A7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2106 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x20A7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH13 0xDE3CEA4B3A3FB2488B2808BAE7 SSTORE PUSH16 0x4A405E50F65E1794383BC026131B13C3 0xC5 PUSH22 0xC31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923 0x23 0x4C 0xF 0xE9 ADD 0x4A PUSH2 0xE792 0xE8 0x5D MUL JUMPI EXP DUP1 SWAP3 0xD0 SWAP11 PUSH15 0x3A57665BC3815A2699A4074001BF1C 0xCA 0xBF PUSH7 0xF5A36A2646970 PUSH7 0x7358221220AA98 PUSH3 0xF6D1AE 0xC9 0xEA BALANCE 0x4B 0xAA DUP11 EXP SIGNEXTEND PUSH10 0x52AB1AECBE17BC6BC3C CALLDATACOPY 0xB4 SWAP4 0xE0 SGT 0xE5 ISZERO PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "281:11888:9:-:0;;;1244:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:7;936:18:0;:32::i;:::-;1289:12:9;:28;;-1:-1:-1;;;;;1289:28:9;;;-1:-1:-1;;;;;;1289:28:9;;;;;;1327:12;:25;;;;;1342:10;1327:25;;;281:11888;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:290:10:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:10;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:10:o;:::-;281:11888:9;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@APYPer_1069": {
									"entryPoint": null,
									"id": 1069,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@APY_1065": {
									"entryPoint": null,
									"id": 1065,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@AdminAddToken_1124": {
									"entryPoint": 6456,
									"id": 1124,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@BurnAmount_1081": {
									"entryPoint": null,
									"id": 1081,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ClaimRewards_2052": {
									"entryPoint": 942,
									"id": 2052,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@DepositTokens_1457": {
									"entryPoint": 1735,
									"id": 1457,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@Details_1057": {
									"entryPoint": null,
									"id": 1057,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_1031": {
									"entryPoint": null,
									"id": 1031,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@InterestAmount_1061": {
									"entryPoint": null,
									"id": 1061,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@RewardAmount_1077": {
									"entryPoint": null,
									"id": 1077,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@SetAPY_2200": {
									"entryPoint": 3694,
									"id": 2200,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@SetRewardPersentage_2230": {
									"entryPoint": 6527,
									"id": 2230,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@Tokens_1073": {
									"entryPoint": null,
									"id": 1073,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WithdrawTokens_1957": {
									"entryPoint": 3785,
									"id": 1957,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 7351,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 7181,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": null,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_983": {
									"entryPoint": null,
									"id": 983,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 7271,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_808": {
									"entryPoint": 7589,
									"id": 808,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_744": {
									"entryPoint": 7566,
									"id": 744,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getTaxPenalty_2258": {
									"entryPoint": null,
									"id": 2258,
									"parameterSlots": 0,
									"returnSlots": 2
								},
								"@isContract_672": {
									"entryPoint": null,
									"id": 672,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 3765,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 7085,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setTexAndPenalty_2246": {
									"entryPoint": null,
									"id": 2246,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@totalStakedTokens_1035": {
									"entryPoint": null,
									"id": 1035,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 6967,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_939": {
									"entryPoint": 7808,
									"id": 939,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@viewBurnRewards_2086": {
									"entryPoint": 1595,
									"id": 2086,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@viewRewards_2170": {
									"entryPoint": 6652,
									"id": 2170,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 7966,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7989,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256": {
									"entryPoint": 8023,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 8325,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 8080,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 8149,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256t_uint256": {
									"entryPoint": 8105,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8395,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 8300,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8423,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8228,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8266,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8205,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 8359,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 8183,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9859:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:10"
															},
															"nodeType": "YulIf",
															"src": "111:70:10"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:10",
														"type": ""
													}
												],
												"src": "14:173:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "320:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:10"
															},
															"nodeType": "YulIf",
															"src": "272:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "333:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "343:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:10",
														"type": ""
													}
												],
												"src": "192:186:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "494:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "506:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "517:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "536:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "547:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "529:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "529:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "529:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "453:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "464:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "475:4:10",
														"type": ""
													}
												],
												"src": "383:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "686:270:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "733:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "742:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "745:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "735:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "735:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "735:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "707:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "716:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "703:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "703:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "728:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "699:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "699:33:10"
															},
															"nodeType": "YulIf",
															"src": "696:53:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "758:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "787:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "768:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "768:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "758:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "806:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "833:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "844:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "829:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "829:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "816:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "816:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "806:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "857:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "884:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "895:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "880:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "880:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "867:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "867:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "857:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "908:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "935:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "946:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "931:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "931:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "918:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "918:32:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "908:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "628:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "639:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "651:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "659:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "667:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "675:6:10",
														"type": ""
													}
												],
												"src": "565:391:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1031:110:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1077:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1086:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1089:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1079:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1079:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1079:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1052:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1061:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1048:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1048:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1073:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1044:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1044:32:10"
															},
															"nodeType": "YulIf",
															"src": "1041:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1102:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1125:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1112:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1112:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1102:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "997:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1008:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1020:6:10",
														"type": ""
													}
												],
												"src": "961:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1250:212:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1296:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1305:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1308:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1298:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1298:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1298:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1271:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1280:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1267:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1267:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1292:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1263:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1263:32:10"
															},
															"nodeType": "YulIf",
															"src": "1260:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1321:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1344:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1331:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1331:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1321:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1363:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1390:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1401:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1386:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1386:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1373:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1373:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1363:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1414:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1441:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1452:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1437:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1437:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1424:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1424:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1414:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1200:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1211:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1223:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1231:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1239:6:10",
														"type": ""
													}
												],
												"src": "1146:316:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1554:161:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1600:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1609:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1612:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1602:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1602:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1602:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1575:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1584:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1571:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1571:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1596:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1567:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1567:32:10"
															},
															"nodeType": "YulIf",
															"src": "1564:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1625:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1648:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1635:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1635:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1625:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1667:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1694:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1705:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1690:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1690:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1677:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1677:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1667:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1512:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1523:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1535:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1543:6:10",
														"type": ""
													}
												],
												"src": "1467:248:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1849:119:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1859:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1871:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1882:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1867:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1867:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1859:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1901:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1912:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1894:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1894:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1894:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1939:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1950:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1935:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1935:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1955:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1928:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1928:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1928:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1810:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1821:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1829:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1840:4:10",
														"type": ""
													}
												],
												"src": "1720:248:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2074:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2084:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2096:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2107:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2092:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2092:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2084:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2126:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2141:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2157:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2162:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2153:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2153:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2166:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2149:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2149:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2137:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2137:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2119:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2119:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2119:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2043:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2054:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2065:4:10",
														"type": ""
													}
												],
												"src": "1973:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2388:266:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2398:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2410:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2421:3:10",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2406:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2398:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2441:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2452:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2434:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2434:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2434:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2479:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2490:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2475:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2475:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2495:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2468:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2468:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2522:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2533:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2518:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2518:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "2538:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2511:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2511:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2511:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2565:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2576:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2561:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2561:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "2581:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2554:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2554:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2554:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2608:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2619:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2604:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2604:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "2639:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2632:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2632:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2625:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2625:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2597:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2597:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2325:9:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2336:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2344:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2352:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2360:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2368:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2379:4:10",
														"type": ""
													}
												],
												"src": "2181:473:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2691:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2708:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2715:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2711:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2711:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2701:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2701:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2701:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2748:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2751:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2741:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2741:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2741:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2772:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2775:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2765:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2765:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2765:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2659:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2843:116:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2853:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2868:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2871:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2864:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2864:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2853:7:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2931:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2933:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2933:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2933:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2902:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2895:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2895:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "2909:1:10"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "2916:7:10"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "2925:1:10"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "2912:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2912:15:10"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "2906:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2906:22:10"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "2892:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2892:37:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2885:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2885:45:10"
															},
															"nodeType": "YulIf",
															"src": "2882:71:10"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2822:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2825:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2831:7:10",
														"type": ""
													}
												],
												"src": "2791:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3012:77:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3022:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3033:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3036:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3029:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3022:3:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3061:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3063:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3063:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3063:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3053:1:10"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "3056:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3050:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3050:10:10"
															},
															"nodeType": "YulIf",
															"src": "3047:36:10"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2995:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2998:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3004:3:10",
														"type": ""
													}
												],
												"src": "2964:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3268:247:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3285:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3296:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3278:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3278:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3278:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3319:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3330:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3315:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3315:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3335:2:10",
																		"type": "",
																		"value": "57"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3308:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3308:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3308:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3358:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3369:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3354:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3354:18:10"
																	},
																	{
																		"hexValue": "596f7572205374616b652054696d6520436f6d706c6574652c20506c65617365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3374:34:10",
																		"type": "",
																		"value": "Your Stake Time Complete, Please"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3347:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3347:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3347:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3429:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3440:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3425:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3425:18:10"
																	},
																	{
																		"hexValue": "2043616c6c2057697468647261772046756e6374696f6e2021",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3445:27:10",
																		"type": "",
																		"value": " Call Withdraw Function !"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3418:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3418:55:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3418:55:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3482:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3494:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3505:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3490:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3490:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3482:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3245:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3259:4:10",
														"type": ""
													}
												],
												"src": "3094:421:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3569:79:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3579:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3591:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3594:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3587:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3587:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3579:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3620:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3622:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3622:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3622:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "3611:4:10"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3617:1:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3608:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3608:11:10"
															},
															"nodeType": "YulIf",
															"src": "3605:37:10"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3551:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3554:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3560:4:10",
														"type": ""
													}
												],
												"src": "3520:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3699:171:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3730:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3751:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3758:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3763:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3754:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3754:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3744:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3744:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3744:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3795:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3798:4:10",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3788:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3788:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3788:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3823:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3826:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3816:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3816:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3816:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3719:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3712:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3712:9:10"
															},
															"nodeType": "YulIf",
															"src": "3709:132:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3850:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3859:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3862:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3855:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3855:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3850:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3684:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3687:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3693:1:10",
														"type": ""
													}
												],
												"src": "3653:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4049:223:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4066:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4077:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4059:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4059:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4059:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4100:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4111:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4096:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4096:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4116:2:10",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4089:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4089:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4089:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4139:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4150:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4135:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4135:18:10"
																	},
																	{
																		"hexValue": "526577617264206d7573742062652067726561746572207468616e207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4155:34:10",
																		"type": "",
																		"value": "Reward must be greater than zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4128:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4128:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4128:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4210:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4221:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4206:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4206:18:10"
																	},
																	{
																		"hexValue": "2e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4226:3:10",
																		"type": "",
																		"value": "."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4199:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4199:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4199:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4239:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4251:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4262:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4247:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4247:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4239:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4026:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4040:4:10",
														"type": ""
													}
												],
												"src": "3875:397:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4406:145:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4416:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4428:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4439:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4424:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4424:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4416:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4458:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4473:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4489:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4494:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4485:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4485:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4498:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4481:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4481:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4469:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4469:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4451:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4451:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4451:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4522:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4533:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4518:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4518:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4538:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4511:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4511:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4511:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4367:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4378:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4386:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4397:4:10",
														"type": ""
													}
												],
												"src": "4277:274:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4634:199:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4680:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4689:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4692:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4682:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4682:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4682:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4655:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4664:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4651:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4651:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4676:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4647:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:32:10"
															},
															"nodeType": "YulIf",
															"src": "4644:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4705:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4724:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4718:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4718:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4709:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4787:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4796:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4799:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4789:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4789:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4789:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4756:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "4777:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "4770:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4770:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4763:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4763:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4753:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4753:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4746:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4746:40:10"
															},
															"nodeType": "YulIf",
															"src": "4743:60:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4812:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4822:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4812:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4600:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4611:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4623:6:10",
														"type": ""
													}
												],
												"src": "4556:277:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5012:165:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5029:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5040:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5022:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5022:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5022:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5063:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5074:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5059:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5059:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5079:2:10",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5052:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5052:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5052:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5102:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5113:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5098:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5098:18:10"
																	},
																	{
																		"hexValue": "506c65617365205761697420212121",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5118:17:10",
																		"type": "",
																		"value": "Please Wait !!!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5091:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5091:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5091:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5145:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5157:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5168:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5153:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5153:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5145:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4989:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5003:4:10",
														"type": ""
													}
												],
												"src": "4838:339:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5356:176:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5373:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5384:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5366:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5366:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5366:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5407:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5418:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5403:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5403:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5423:2:10",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5396:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5396:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5396:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5446:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5457:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5442:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5442:18:10"
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5462:28:10",
																		"type": "",
																		"value": "Your Time Period Complete."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5435:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5435:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5435:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5500:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5512:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5523:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5508:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5508:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5500:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5333:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5347:4:10",
														"type": ""
													}
												],
												"src": "5182:350:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5711:172:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5728:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5739:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5721:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5721:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5721:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5762:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5773:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5758:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5758:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5778:2:10",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5751:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5751:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5751:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5801:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5812:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5797:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5797:18:10"
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5817:24:10",
																		"type": "",
																		"value": "Enter Right StakeMonth"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5790:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5790:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5790:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5851:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5863:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5874:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5859:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5859:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5851:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5688:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5702:4:10",
														"type": ""
													}
												],
												"src": "5537:346:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6062:176:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6079:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6090:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6072:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6072:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6072:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6113:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6124:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6109:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6109:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6129:2:10",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6102:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6102:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6102:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6152:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6163:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6148:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6148:18:10"
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6168:28:10",
																		"type": "",
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6141:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6141:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6141:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6206:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6218:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6229:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6214:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6214:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6206:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6039:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6053:4:10",
														"type": ""
													}
												],
												"src": "5888:350:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6417:168:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6434:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6445:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6427:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6427:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6427:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6468:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6479:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6464:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6464:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6484:2:10",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6457:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6457:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6457:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6507:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6518:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6503:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6503:18:10"
																	},
																	{
																		"hexValue": "4669727374205374616b6520546f6b656e73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6523:20:10",
																		"type": "",
																		"value": "First Stake Tokens"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6496:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6496:48:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6496:48:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6553:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6565:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6576:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6561:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6561:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6553:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6394:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6408:4:10",
														"type": ""
													}
												],
												"src": "6243:342:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6764:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6781:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6792:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6774:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6774:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6774:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6815:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6826:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6811:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6811:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6831:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6804:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6804:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6804:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6854:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6865:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6850:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6850:18:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6870:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6843:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6843:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6843:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6925:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6936:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6921:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6921:18:10"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6941:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6914:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6914:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6914:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6959:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6971:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6982:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6967:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6967:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6959:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6741:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6755:4:10",
														"type": ""
													}
												],
												"src": "6590:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7154:218:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7164:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7176:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7187:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7172:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7172:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7164:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7199:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7217:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7222:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7213:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7213:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7226:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7209:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7209:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7203:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7244:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7259:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7267:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7255:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7255:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7237:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7237:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7237:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7291:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7302:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7287:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7287:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7311:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7319:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7307:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7307:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7280:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7280:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7280:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7343:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7354:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7339:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7339:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7359:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7332:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7332:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7332:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7107:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7118:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7126:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7134:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7145:4:10",
														"type": ""
													}
												],
												"src": "6997:375:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7551:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7568:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7579:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7561:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7561:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7561:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7602:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7613:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7598:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7598:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7618:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7591:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7591:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7591:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7641:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7652:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7637:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7637:18:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7657:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7630:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7630:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7630:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7701:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7713:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7724:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7709:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7709:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7701:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7528:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7542:4:10",
														"type": ""
													}
												],
												"src": "7377:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7912:232:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7929:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7940:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7922:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7922:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7922:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7963:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7974:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7959:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7959:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7979:2:10",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7952:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7952:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7952:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8002:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8013:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7998:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7998:18:10"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8018:34:10",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7991:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7991:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7991:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8073:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8084:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8069:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8069:18:10"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8089:12:10",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8062:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8062:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8062:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8111:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8123:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8134:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8119:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8119:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8111:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7889:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7903:4:10",
														"type": ""
													}
												],
												"src": "7738:406:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8323:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8340:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8351:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8333:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8333:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8333:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8374:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8385:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8370:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8370:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8390:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8363:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8363:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8363:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8413:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8424:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8409:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8409:18:10"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8429:34:10",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8402:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8402:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8402:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8484:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8495:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8480:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8480:18:10"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8500:8:10",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8473:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8473:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8473:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8518:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8530:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8541:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8526:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8526:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8518:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8300:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8314:4:10",
														"type": ""
													}
												],
												"src": "8149:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8622:184:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8632:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8641:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8636:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8701:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8726:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8731:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8722:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8722:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "8745:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8750:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8741:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8741:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "8735:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8735:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8715:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8715:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8715:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8662:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8665:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8659:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8659:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8673:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8675:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8684:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8687:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8680:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8680:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8675:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8655:3:10",
																"statements": []
															},
															"src": "8651:113:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8784:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8789:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8780:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8780:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8798:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8773:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8773:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8773:27:10"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8600:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8605:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8610:6:10",
														"type": ""
													}
												],
												"src": "8556:250:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8948:150:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8958:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8978:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8972:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8972:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8962:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9033:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9041:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9029:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9029:17:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9048:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9053:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8994:34:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8994:66:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8994:66:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9069:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9080:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9085:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9076:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9076:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9069:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8924:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8929:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8940:3:10",
														"type": ""
													}
												],
												"src": "8811:287:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9277:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9294:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9305:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9287:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9287:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9287:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9328:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9339:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9324:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9324:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9344:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9317:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9317:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9317:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9367:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9378:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9363:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9363:18:10"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9383:31:10",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9356:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9356:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9356:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9424:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9436:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9447:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9432:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9432:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9424:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9254:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9268:4:10",
														"type": ""
													}
												],
												"src": "9103:353:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9582:275:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9599:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9610:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9592:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9592:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9592:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9622:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9642:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9636:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9626:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9669:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9680:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9665:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9665:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9685:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9658:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9658:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9658:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9740:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9748:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9736:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9736:15:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9757:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9768:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9753:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9753:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9773:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "9701:34:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9701:79:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9701:79:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9789:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9805:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "9824:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9832:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9820:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9820:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9841:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9837:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9837:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9816:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9816:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9801:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9801:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9848:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9797:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9797:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9789:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9551:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9562:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9573:4:10",
														"type": ""
													}
												],
												"src": "9461:396:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"Your Stake Time Complete, Please\")\n        mstore(add(headStart, 96), \" Call Withdraw Function !\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Reward must be greater than zero\")\n        mstore(add(headStart, 96), \".\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Please Wait !!!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Your Time Period Complete.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Enter Right StakeMonth\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Enter Right EarnPersentage\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"First Stake Tokens\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063a6021ace1161007c578063a6021ace146102e5578063c0cd40ee146102f8578063d6f80a251461030b578063da40ef801461031e578063e88cc2be14610331578063f2fde38b1461039b57600080fd5b8063715018a614610265578063777b4cd81461026d578063897b3a681461028d5780638da5cb5b146102ad5780639131a05a146102d257600080fd5b8063217366651161010a57806321736665146101d557806322b72666146101e8578063264b4af6146102085780632e886f1f146102215780633ae732591461023c578063662b12c91461024557600080fd5b80630178be5f14610147578063032ad8fb1461015c5780630deef63a1461018257806310c404da146101a2578063186cb65b146101b5575b600080fd5b61015a610155366004611f35565b6103ae565b005b61016f61016a366004611f35565b61063b565b6040519081526020015b60405180910390f35b61016f610190366004611f35565b600b6020526000908152604090205481565b61015a6101b0366004611f57565b6106c7565b61016f6101c3366004611f90565b60096020526000908152604090205481565b61015a6101e3366004611fa9565b610e6e565b61016f6101f6366004611f35565b600d6020526000908152604090205481565b61015a610216366004611fd5565b600591909155600655565b60055460065460408051928352602083019190915201610179565b61016f60035481565b61016f610253366004611f35565b60086020526000908152604090205481565b61015a610eb5565b61016f61027b366004611f35565b600c6020526000908152604090205481565b61016f61029b366004611f90565b600a6020526000908152604090205481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610179565b61015a6102e0366004611f35565b610ec9565b6001546102ba906001600160a01b031681565b61015a610306366004611f90565b611938565b61015a610319366004611fa9565b61197f565b61016f61032c366004611f35565b6119fc565b61037161033f366004611f35565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a001610179565b61015a6103a9366004611f35565b611b37565b6001600160a01b038116600090815260076020526040902060018101546002909101544291906103df90601e61200d565b6103ea90601861200d565b6103f590603c61200d565b61040090603c61200d565b61040a9190612024565b116104825760405162461bcd60e51b815260206004820152603960248201527f596f7572205374616b652054696d6520436f6d706c6574652c20506c6561736560448201527f2043616c6c2057697468647261772046756e6374696f6e20210000000000000060648201526084015b60405180910390fd5b6001600160a01b03811660009081526007602052604081206001015462015180906104ad9042612037565b6104b7919061204a565b6001600160a01b038316600090815260076020526040812060020154919250906104e290601e61200d565b6001600160a01b038416600090815260086020526040902054610505919061204a565b90506000610513838361200d565b90506000811161056f5760405162461bcd60e51b815260206004820152602160248201527f526577617264206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b6064820152608401610479565b6001600160a01b0384166000908152600c60205260409020546105929082612037565b6001600160a01b0385166000908152600c6020526040812080549091906105ba908490612024565b909155505060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906105f1908790859060040161206c565b6020604051808303816000875af1158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190612085565b5050505050565b6001600160a01b03811660009081526007602052604081206003015460640361066657506000919050565b6001600160a01b03821660009081526007602052604090206003015460649061068f9082612037565b6001600160a01b0384166000908152600860205260409020546106b2919061200d565b6106bc919061204a565b92915050565b919050565b6002546001600160a01b03166000908152600b60205260409020546107205760405162461bcd60e51b815260206004820152600f60248201526e506c6561736520576169742021212160881b6044820152606401610479565b600061073084633b9aca0061200d565b6001600160a01b03861660009081526007602052604090206004015490915060ff1615610ac9576001600160a01b0385166000908152600760205260409020600181015460029091015442919061078890601e61200d565b61079390601861200d565b61079e90603c61200d565b6107a990603c61200d565b6107b39190612024565b116108005760405162461bcd60e51b815260206004820152601a60248201527f596f75722054696d6520506572696f6420436f6d706c6574652e0000000000006044820152606401610479565b6001600160a01b03851660009081526007602052604090206002015483146108635760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610479565b6001600160a01b03851660009081526007602052604090206003015482146108cd5760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610479565b6001600160a01b0385166000908152600760205260409020546108f1908290612024565b6001600160a01b038616600090815260076020526040902090815560008051602061215b833981519152546002909101540361099e576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e890610961908361200d565b61096b919061204a565b6001600160a01b03861660009081526008602052604081208054909190610993908490612024565b90915550610aac9050565b60008051602061211b833981519152546001600160a01b03861660009081526007602052604090206002015403610a09576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e890610961908361200d565b60008051602061213b833981519152546001600160a01b03861660009081526007602052604090206002015403610aac576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610a74908361200d565b610a7e919061204a565b6001600160a01b03861660009081526008602052604081208054909190610aa6908490612024565b90915550505b600154610ac4906001600160a01b0316863084611bad565b610e21565b6001600052600960205260008051602061215b83398151915254831480610b0857506002600052600960205260008051602061211b8339815191525483145b80610b2b57506003600052600960205260008051602061213b8339815191525483145b610b705760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610479565b8160641480610b7f575081604b145b80610b8a5750816032145b610bd65760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610479565b60006103e860055483610be9919061200d565b610bf3919061204a565b90506040518060a001604052808284610c0c9190612037565b81524260208083019190915260408083018890526060808401889052600160809485018190526001600160a01b038c16600090815260078552839020865181559386015190840155908401516002830181905590840151600383015592909101516004909101805460ff191691151591909117905560008051602061215b833981519152549003610d03576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e890610cd18385612037565b610cdb919061200d565b610ce5919061204a565b6001600160a01b038716600090815260086020526040902055610e07565b60008051602061211b833981519152546001600160a01b03871660009081526007602052604090206002015403610d6e576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e890610cd18385612037565b60008051602061213b833981519152546001600160a01b03871660009081526007602052604090206002015403610e07576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610dd98385612037565b610de3919061200d565b610ded919061204a565b6001600160a01b0387166000908152600860205260409020555b600154610e1f906001600160a01b0316873085611bad565b505b6001600160a01b0385166000908152600b602052604081208054839290610e49908490612024565b925050819055508060036000828254610e629190612024565b90915550505050505050565b610e76611c0d565b600960205260008051602061215b8339815191529290925560008051602061211b83398151915255600360005260008051602061213b83398151915255565b610ebd611c0d565b610ec76000611c67565b565b6001600160a01b03811660009081526007602052604090206004015460ff16610f295760405162461bcd60e51b81526020600482015260126024820152714669727374205374616b6520546f6b656e7360701b6044820152606401610479565b6001600160a01b0381166000908152600760205260408120600181015460029091015482914291610f5b90601e61200d565b610f6690601861200d565b610f7190603c61200d565b610f7c90603c61200d565b610f869190612024565b1015611346576001600160a01b038316600090815260076020526040902060030154606403611077576001546001600160a01b038481166000908152600c6020908152604080832054600890925290912054919092169163a9059cbb918691610fee91612037565b6001600160a01b0387166000908152600760205260409020546110119190612024565b6040518363ffffffff1660e01b815260040161102e92919061206c565b6020604051808303816000875af115801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190612085565b506118a9565b6001600160a01b038316600090815260076020526040902060030154604b03611206576001600160a01b0383166000908152600c60209081526040808320546008909252909120546064916110cb91612037565b6110d690604b61200d565b6110e0919061204a565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb908590611115908690612024565b6040518363ffffffff1660e01b815260040161113292919061206c565b6020604051808303816000875af1158015611151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111759190612085565b506001600160a01b0383166000908152600c60209081526040808320546008909252909120546064916111a791612037565b6111b290601961200d565b6111bc919061204a565b6001600160a01b038085166000908152600d602052604090819020839055600154905163a9059cbb60e01b8152929350169063a9059cbb9061102e9061dead90859060040161206c565b6001600160a01b038316600090815260076020526040902060030154603203611341576001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161125a91612037565b61126590603261200d565b61126f919061204a565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb9085906112a4908690612024565b6040518363ffffffff1660e01b81526004016112c192919061206c565b6020604051808303816000875af11580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190612085565b506001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161133691612037565b6111b290603261200d565b6118a9565b6001600160a01b03831660009081526007602052604081206001015481908190819062015180906113779042612037565b611381919061204a565b6001600160a01b0388166000908152600760205260409020600201549091506113ab90601e61200d565b6001600160a01b0388166000908152600860205260409020546113ce919061204a565b6001600160a01b0388166000908152600760205260409020600301549094506064036114e9576113fe818561200d565b6001600160a01b0388166000908152600c60205260409020549096506114249087612037565b6001600160a01b0388166000908152600760205260409020546114479190612024565b92506103e86006548461145a919061200d565b611464919061204a565b6001549092506001600160a01b031663a9059cbb886114838587612037565b6040518363ffffffff1660e01b81526004016114a092919061206c565b6020604051808303816000875af11580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e39190612085565b506118a4565b6001600160a01b038716600090815260076020526040902060030154604b036116a4576001600160a01b0387166000908152600c6020526040902054606490611532838761200d565b61153c9190612037565b61154790604b61200d565b611551919061204a565b6001600160a01b038816600090815260076020526040902054909650611578908790612024565b92506103e86006548461158b919061200d565b611595919061204a565b6001549092506001600160a01b031663a9059cbb886115b48587612037565b6040518363ffffffff1660e01b81526004016115d192919061206c565b6020604051808303816000875af11580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190612085565b506001600160a01b0387166000908152600c602052604090205460649061163b838761200d565b6116459190612037565b61165090601961200d565b61165a919061204a565b6001600160a01b038089166000908152600d602052604090819020839055600154905163a9059cbb60e01b8152929750169063a9059cbb906114a09061dead90899060040161206c565b6001600160a01b0387166000908152600760205260409020600301546032036118a4576001600160a01b0387166000908152600c60205260409020546064906116ed838761200d565b6116f79190612037565b61170290603261200d565b61170c919061204a565b6001600160a01b038816600090815260076020526040902054909650611733908790612024565b92506103e860065484611746919061200d565b611750919061204a565b6001549092506001600160a01b031663a9059cbb8861176f8587612037565b6040518363ffffffff1660e01b815260040161178c92919061206c565b6020604051808303816000875af11580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190612085565b506001600160a01b0387166000908152600c60205260409020546064906117f6838761200d565b6118009190612037565b61180b90603261200d565b611815919061204a565b6001600160a01b038089166000908152600d602052604090819020839055600154905163a9059cbb60e01b8152929750169063a9059cbb9061185f9061dead90899060040161206c565b6020604051808303816000875af115801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a29190612085565b505b505050505b6001600160a01b038316600090815260076020908152604080832060048101805460ff19169055600c83528184208490556008835281842084905554600b90925282208054919290916118fd908490612037565b90915550506001600160a01b038316600090815260076020526040812054600380549192909161192e908490612037565b9091555050505050565b611940611c0d565b336000908152600b60205260408120805483929061195f908490612024565b909155505060015461197c906001600160a01b0316333084611bad565b50565b611987611c0d565b600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7929092557fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba85560036000527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa3975955565b6001600160a01b03811660009081526007602052604081206001810154600290910154429190611a2d90601e61200d565b611a3890601861200d565b611a4390603c61200d565b611a4e90603c61200d565b611a589190612024565b1015611a7a57506001600160a01b031660009081526008602052604090205490565b6001600160a01b0382166000908152600760205260408120600101546201518090611aa59042612037565b611aaf919061204a565b6001600160a01b03841660009081526007602052604081206002015491925090611ada90601e61200d565b6001600160a01b038516600090815260086020526040902054611afd919061204a565b6001600160a01b0385166000908152600c602052604081205491925090611b24848461200d565b611b2e9190612037565b95945050505050565b611b3f611c0d565b6001600160a01b038116611ba45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610479565b61197c81611c67565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c07908590611cb7565b50505050565b6000546001600160a01b03163314610ec75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611d0c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d8e9092919063ffffffff16565b805190915015611d895780806020019051810190611d2a9190612085565b611d895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610479565b505050565b6060611d9d8484600085611da5565b949350505050565b606082471015611e065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610479565b600080866001600160a01b03168587604051611e2291906120cb565b60006040518083038185875af1925050503d8060008114611e5f576040519150601f19603f3d011682016040523d82523d6000602084013e611e64565b606091505b5091509150611e7587838387611e80565b979650505050505050565b60608315611eef578251600003611ee8576001600160a01b0385163b611ee85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610479565b5081611d9d565b611d9d8383815115611f045781518083602001fd5b8060405162461bcd60e51b815260040161047991906120e7565b80356001600160a01b03811681146106c257600080fd5b600060208284031215611f4757600080fd5b611f5082611f1e565b9392505050565b60008060008060808587031215611f6d57600080fd5b611f7685611f1e565b966020860135965060408601359560600135945092505050565b600060208284031215611fa257600080fd5b5035919050565b600080600060608486031215611fbe57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611fe857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106bc576106bc611ff7565b808201808211156106bc576106bc611ff7565b818103818111156106bc576106bc611ff7565b60008261206757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60006020828403121561209757600080fd5b81518015158114611f5057600080fd5b60005b838110156120c25781810151838201526020016120aa565b50506000910152565b600082516120dd8184602087016120a7565b9190910192915050565b60208152600082518060208401526121068160408501602087016120a7565b601f01601f1916919091016040019291505056fe6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e792e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36a2646970667358221220aa9862f6d1aec9ea314baa8a0a0b69052ab1aecbe17bc6bc3c37b493e013e51564736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA6021ACE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0xD6F80A25 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDA40EF80 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x777B4CD8 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x897B3A68 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21736665 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x21736665 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x22B72666 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x264B4AF6 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x2E886F1F EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x662B12C9 EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178BE5F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x32AD8FB EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xDEEF63A EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x186CB65B EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16F PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F57 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FD5 JUMP JUMPDEST PUSH1 0x5 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x16F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0xEB5 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0xEC9 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F90 JUMP JUMPDEST PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0x197F JUMP JUMPDEST PUSH2 0x16F PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x371 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F35 JUMP JUMPDEST PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x3DF SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x3EA SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x3F5 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x400 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x40A SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST GT PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2043616C6C2057697468647261772046756E6374696F6E202100000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x4AD SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x4E2 SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x513 DUP4 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x56F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526577617264206D7573742062652067726561746572207468616E207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x592 SWAP1 DUP3 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x5BA SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x5F1 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x610 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x634 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x666 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SWAP1 PUSH2 0x68F SWAP1 DUP3 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6B2 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x720 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x506C65617365205761697420212121 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x730 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x788 SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x793 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x79E SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x7A9 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x7B3 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST GT PUSH2 0x800 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 EQ PUSH2 0x863 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 EQ PUSH2 0x8CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8F1 SWAP1 DUP3 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SUB PUSH2 0x99E JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x961 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x96B SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x993 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xAAC SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA09 JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x961 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xAAC JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xA74 SWAP1 DUP4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xA7E SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xAA6 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xAC4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 ADDRESS DUP5 PUSH2 0x1BAD JUMP JUMPDEST PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ DUP1 PUSH2 0xB08 JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST DUP1 PUSH2 0xB2B JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST DUP2 PUSH1 0x64 EQ DUP1 PUSH2 0xB7F JUMPI POP DUP2 PUSH1 0x4B EQ JUMPDEST DUP1 PUSH2 0xB8A JUMPI POP DUP2 PUSH1 0x32 EQ JUMPDEST PUSH2 0xBD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E8 PUSH1 0x5 SLOAD DUP4 PUSH2 0xBE9 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xBF3 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP5 PUSH2 0xC0C SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP5 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SSTORE SWAP4 DUP7 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 SUB PUSH2 0xD03 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCD1 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xCDB SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xCE5 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xE07 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xD6E JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCD1 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xE07 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xDD9 DUP4 DUP6 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xDE3 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xDED SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xE1F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 ADDRESS DUP6 PUSH2 0x1BAD JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xE49 SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE76 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x215B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x211B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x213B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0xEBD PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0xEC7 PUSH1 0x0 PUSH2 0x1C67 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4669727374205374616B6520546F6B656E73 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 TIMESTAMP SWAP2 PUSH2 0xF5B SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF66 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF71 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF7C SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0xF86 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST LT ISZERO PUSH2 0x1346 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x1077 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 DUP7 SWAP2 PUSH2 0xFEE SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1011 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x102E SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x104D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1071 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH2 0x18A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x1206 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x10CB SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x10D6 SWAP1 PUSH1 0x4B PUSH2 0x200D JUMP JUMPDEST PUSH2 0x10E0 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x1115 SWAP1 DUP7 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1132 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1151 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1175 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x11A7 SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x11B2 SWAP1 PUSH1 0x19 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x11BC SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x102E SWAP1 PUSH2 0xDEAD SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x1341 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x125A SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1265 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x126F SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x12A4 SWAP1 DUP7 SWAP1 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C1 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1304 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1336 SWAP2 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x11B2 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x18A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH3 0x15180 SWAP1 PUSH2 0x1377 SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x13AB SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x13CE SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP5 POP PUSH1 0x64 SUB PUSH2 0x14E9 JUMPI PUSH2 0x13FE DUP2 DUP6 PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1424 SWAP1 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1447 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x145A SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1464 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1483 DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A0 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E3 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x16A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x1532 DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x153C SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1547 SWAP1 PUSH1 0x4B PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1551 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1578 SWAP1 DUP8 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1595 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x15B4 DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D1 SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1614 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x163B DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1645 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1650 SWAP1 PUSH1 0x19 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x165A SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP8 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x14A0 SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x18A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x16ED DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x16F7 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1702 SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x170C SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x1733 SWAP1 DUP8 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x1746 SWAP2 SWAP1 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1750 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x176F DUP6 DUP8 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x178C SWAP3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17CF SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x17F6 DUP4 DUP8 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1800 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x180B SWAP1 PUSH1 0x32 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1815 SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP8 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x185F SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x206C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x187E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18A2 SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0xC DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x18FD SWAP1 DUP5 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x192E SWAP1 DUP5 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1940 PUSH2 0x1C0D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x195F SWAP1 DUP5 SWAP1 PUSH2 0x2024 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH2 0x197C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x1BAD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1987 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SWAP3 SWAP1 SWAP3 SSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x1A2D SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A38 SWAP1 PUSH1 0x18 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A43 SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A4E SWAP1 PUSH1 0x3C PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1A58 SWAP2 SWAP1 PUSH2 0x2024 JUMP JUMPDEST LT ISZERO PUSH2 0x1A7A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x1AA5 SWAP1 TIMESTAMP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x1AAF SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1ADA SWAP1 PUSH1 0x1E PUSH2 0x200D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1AFD SWAP2 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1B24 DUP5 DUP5 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x1B2E SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1B3F PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1BA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH2 0x197C DUP2 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1C07 SWAP1 DUP6 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D0C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D8E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1D89 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1D2A SWAP2 SWAP1 PUSH2 0x2085 JUMP JUMPDEST PUSH2 0x1D89 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D9D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DA5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E22 SWAP2 SWAP1 PUSH2 0x20CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1E75 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1E80 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1EEF JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1EE8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1EE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x479 JUMP JUMPDEST POP DUP2 PUSH2 0x1D9D JUMP JUMPDEST PUSH2 0x1D9D DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1F04 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x479 SWAP2 SWAP1 PUSH2 0x20E7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F50 DUP3 PUSH2 0x1F1E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F76 DUP6 PUSH2 0x1F1E JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1FF7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2067 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20C2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20AA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x20DD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20A7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2106 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x20A7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH13 0xDE3CEA4B3A3FB2488B2808BAE7 SSTORE PUSH16 0x4A405E50F65E1794383BC026131B13C3 0xC5 PUSH22 0xC31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923 0x23 0x4C 0xF 0xE9 ADD 0x4A PUSH2 0xE792 0xE8 0x5D MUL JUMPI EXP DUP1 SWAP3 0xD0 SWAP11 PUSH15 0x3A57665BC3815A2699A4074001BF1C 0xCA 0xBF PUSH7 0xF5A36A2646970 PUSH7 0x7358221220AA98 PUSH3 0xF6D1AE 0xC9 0xEA BALANCE 0x4B 0xAA DUP11 EXP SIGNEXTEND PUSH10 0x52AB1AECBE17BC6BC3C CALLDATACOPY 0xB4 SWAP4 0xE0 SGT 0xE5 ISZERO PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "281:11888:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9556:699;;;;;;:::i;:::-;;:::i;:::-;;10260:262;;;;;;:::i;:::-;;:::i;:::-;;;529:25:10;;;517:2;502:18;10260:262:9;;;;;;;;860:41;;;;;;:::i;:::-;;;;;;;;;;;;;;2114:2514;;;;;;:::i;:::-;;:::i;769:38::-;;;;;;:::i;:::-;;;;;;;;;;;;;;11258:193;;;;;;:::i;:::-;;:::i;960:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;11927:124;;;;;;:::i;:::-;12004:3;:12;;;;12026:7;:18;11927:124;12057:110;12147:3;;12152:7;;12057:110;;;1894:25:10;;;1950:2;1935:18;;1928:34;;;;1867:18;12057:110:9;1720:248:10;411:32:9;;;;;;714:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1831:101:0;;;:::i;907:47:9:-;;;;;;:::i;:::-;;;;;;;;;;;;;;813:41;;;;;;:::i;:::-;;;;;;;;;;;;;;1201:85:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;2137:32:10;;;2119:51;;2107:2;2092:18;1201:85:0;1973:203:10;4824:4537:9;;;;;;:::i;:::-;;:::i;352:27::-;;;;;-1:-1:-1;;;;;352:27:9;;;1586:232;;;;;;:::i;:::-;;:::i;11562:233::-;;;;;;:::i;:::-;;:::i;10528:619::-;;;;;;:::i;:::-;;:::i;667:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:25:10;;;2490:2;2475:18;;2468:34;;;;2518:18;;;2511:34;;;;2576:2;2561:18;;2554:34;2632:14;2625:22;2619:3;2604:19;;2597:51;2421:3;2406:19;667:41:9;2181:473:10;2081:198:0;;;;;;:::i;:::-;;:::i;9556:699:9:-;-1:-1:-1;;;;;9676:11:9;;;;;;:7;:11;;;;;:21;;;;9630:22;;;;;9717:15;;9676:21;9630:27;;9655:2;9630:27;:::i;:::-;:32;;9660:2;9630:32;:::i;:::-;:37;;9665:2;9630:37;:::i;:::-;:42;;9670:2;9630:42;:::i;:::-;9629:68;;;;:::i;:::-;9628:104;9607:208;;;;-1:-1:-1;;;9607:208:9;;3296:2:10;9607:208:9;;;3278:21:10;3335:2;3315:18;;;3308:30;3374:34;3354:18;;;3347:62;3445:27;3425:18;;;3418:55;3490:19;;9607:208:9;;;;;;;;;-1:-1:-1;;;;;9863:11:9;;9825:16;9863:11;;;:7;:11;;;;;:21;;;9889:12;;9845:39;;:15;:39;:::i;:::-;9844:58;;;;:::i;:::-;-1:-1:-1;;;;;9977:11:9;;9912:28;9977:11;;;:7;:11;;;;;:22;;;9825:77;;-1:-1:-1;9912:28:9;9977:27;;10002:2;9977:27;:::i;:::-;-1:-1:-1;;;;;9943:18:9;;;;;;:14;:18;;;;;;:62;;;;:::i;:::-;9912:93;-1:-1:-1;10015:17:9;10035:31;10058:8;9912:93;10035:31;:::i;:::-;10015:51;;10096:1;10084:9;:13;10076:59;;;;-1:-1:-1;;;10076:59:9;;4077:2:10;10076:59:9;;;4059:21:10;4116:2;4096:18;;;4089:30;4155:34;4135:18;;;4128:62;-1:-1:-1;;;4206:18:10;;;4199:31;4247:19;;10076:59:9;3875:397:10;10076:59:9;-1:-1:-1;;;;;10177:16:9;;;;;;:12;:16;;;;;;10165:28;;:9;:28;:::i;:::-;-1:-1:-1;;;;;10145:16:9;;;;;;:12;:16;;;;;:48;;:16;;;:48;;;;;:::i;:::-;;;;-1:-1:-1;;10211:12:9;;10204:44;;-1:-1:-1;;;10204:44:9;;-1:-1:-1;;;;;10211:12:9;;;;10204:29;;:44;;10234:2;;10238:9;;10204:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9597:658;;;9556:699;:::o;10260:262::-;-1:-1:-1;;;;;10347:11:9;;10318:14;10347:11;;;:7;:11;;;;;:26;;;10377:3;10347:33;10344:172;;-1:-1:-1;10402:1:9;;10260:262;-1:-1:-1;10260:262:9:o;10344:172::-;-1:-1:-1;;;;;10473:11:9;;;;;;:7;:11;;;;;:26;;;10502:3;;10469:30;;10502:3;10469:30;:::i;:::-;-1:-1:-1;;;;;10449:18:9;;;;;;:14;:18;;;;;;:51;;;;:::i;:::-;10448:57;;;;:::i;:::-;10441:64;10260:262;-1:-1:-1;;10260:262:9:o;10344:172::-;10260:262;;;:::o;2114:2514::-;2281:12;;-1:-1:-1;;;;;2281:12:9;2297:1;2274:20;;;:6;:20;;;;;;2266:52;;;;-1:-1:-1;;;2266:52:9;;5040:2:10;2266:52:9;;;5022:21:10;5079:2;5059:18;;;5052:30;-1:-1:-1;;;5098:18:10;;;5091:45;5153:18;;2266:52:9;4838:339:10;2266:52:9;2328:15;2346:21;:8;2357:10;2346:21;:::i;:::-;-1:-1:-1;;;;;2381:11:9;;;;;;:7;:11;;;;;:17;;;2328:39;;-1:-1:-1;2381:17:9;;2377:2176;;;-1:-1:-1;;;;;2470:11:9;;;;;;:7;:11;;;;;:21;;;;2424:22;;;;;2494:15;;2470:21;2424:27;;2449:2;2424:27;:::i;:::-;:32;;2454:2;2424:32;:::i;:::-;:37;;2459:2;2424:37;:::i;:::-;:42;;2464:2;2424:42;:::i;:::-;2423:68;;;;:::i;:::-;2422:87;2414:125;;;;-1:-1:-1;;;2414:125:9;;5384:2:10;2414:125:9;;;5366:21:10;5423:2;5403:18;;;5396:30;5462:28;5442:18;;;5435:56;5508:18;;2414:125:9;5182:350:10;2414:125:9;-1:-1:-1;;;;;2578:11:9;;;;;;:7;:11;;;;;:22;;;:36;;2553:117;;;;-1:-1:-1;;;2553:117:9;;5739:2:10;2553:117:9;;;5721:21:10;5778:2;5758:18;;;5751:30;-1:-1:-1;;;5797:18:10;;;5790:52;5859:18;;2553:117:9;5537:346:10;2553:117:9;-1:-1:-1;;;;;2709:11:9;;;;;;:7;:11;;;;;:26;;;:44;;2684:129;;;;-1:-1:-1;;;2684:129:9;;6090:2:10;2684:129:9;;;6072:21:10;6129:2;6109:18;;;6102:30;6168:28;6148:18;;;6141:56;6214:18;;2684:129:9;5888:350:10;2684:129:9;-1:-1:-1;;;;;2855:11:9;;;;;;:7;:11;;;;;:25;:35;;2883:7;;2855:35;:::i;:::-;-1:-1:-1;;;;;2827:11:9;;;;;;:7;:11;;;;;:63;;;-1:-1:-1;;;;;;;;;;;2934:6:9;2908:22;;;;;:32;2904:375;;3000:1;2993:9;;:6;:9;;;;3006:4;;2983:19;;:7;:19;:::i;:::-;2982:28;;;;:::i;:::-;-1:-1:-1;;;;;2960:18:9;;;;;;:14;:18;;;;;:50;;:18;;;:50;;;;;:::i;:::-;;;;-1:-1:-1;2904:375:9;;-1:-1:-1;2904:375:9;;-1:-1:-1;;;;;;;;;;;3061:6:9;-1:-1:-1;;;;;3035:11:9;;3061:6;3035:11;;;:7;3061:6;3035:11;3061:6;3035:11;;3065:1;3035:22;;:32;3031:248;;3127:1;3120:9;;:6;:9;;;;3133:4;;3110:19;;:7;:19;:::i;3031:248::-;-1:-1:-1;;;;;;;;;;;3188:6:9;-1:-1:-1;;;;;3162:11:9;;3188:6;3162:11;;;:7;3188:6;3162:11;3188:6;3162:11;;:22;;;:32;3158:121;;3254:1;3247:9;;:6;:9;;;;3260:4;;3237:19;;:7;:19;:::i;:::-;3236:28;;;;:::i;:::-;-1:-1:-1;;;;;3214:18:9;;;;;;:14;:18;;;;;:50;;:18;;;:50;;;;;:::i;:::-;;;;-1:-1:-1;;3158:121:9;3299:12;;3292:65;;-1:-1:-1;;;;;3299:12:9;3330:2;3342:4;3349:7;3292:37;:65::i;:::-;2377:2176;;;3431:1;3427:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3427:6:9;3413:20;;;:64;;-1:-1:-1;3475:1:9;3471:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3471:6:9;3457:20;;3413:64;:108;;;-1:-1:-1;3519:1:9;3515:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3515:6:9;3501:20;;3413:108;3388:189;;;;-1:-1:-1;;;3388:189:9;;5739:2:10;3388:189:9;;;5721:21:10;5778:2;5758:18;;;5751:30;-1:-1:-1;;;5797:18:10;;;5790:52;5859:18;;3388:189:9;5537:346:10;3388:189:9;3616:14;3634:3;3616:21;:65;;;;3661:14;3679:2;3661:20;3616:65;:109;;;;3705:14;3723:2;3705:20;3616:109;3591:194;;;;-1:-1:-1;;;3591:194:9;;6090:2:10;3591:194:9;;;6072:21:10;6129:2;6109:18;;;6102:30;6168:28;6148:18;;;6141:56;6214:18;;3591:194:9;5888:350:10;3591:194:9;3799:16;3836:4;3829:3;;3819:7;:13;;;;:::i;:::-;3818:22;;;;:::i;:::-;3799:41;;3868:171;;;;;;;;3902:8;3892:7;:18;;;;:::i;:::-;3868:171;;3928:15;3868:171;;;;;;;;;;;;;;;;;;;;;;4021:4;3868:171;;;;;;;-1:-1:-1;;;;;3854:11:9;;-1:-1:-1;3854:11:9;;;:7;:11;;;;;:185;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3854:185:9;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4083:6:9;4057:32;;4053:411;;4161:1;4154:9;;:6;:9;;;;4167:4;;4132:18;4142:8;4132:7;:18;:::i;:::-;4131:32;;;;:::i;:::-;4130:41;;;;:::i;:::-;-1:-1:-1;;;;;4109:18:9;;;;;;:14;:18;;;;;:62;4053:411;;;-1:-1:-1;;;;;;;;;;;4222:6:9;-1:-1:-1;;;;;4196:11:9;;4222:6;4196:11;;;:7;4222:6;4196:11;4222:6;4196:11;;4226:1;4196:22;;:32;4192:272;;4300:1;4293:9;;:6;:9;;;;4306:4;;4271:18;4281:8;4271:7;:18;:::i;4192:272::-;-1:-1:-1;;;;;;;;;;;4361:6:9;-1:-1:-1;;;;;4335:11:9;;4361:6;4335:11;;;:7;4361:6;4335:11;4361:6;4335:11;;:22;;;:32;4331:133;;4439:1;4432:9;;:6;:9;;;;4445:4;;4410:18;4420:8;4410:7;:18;:::i;:::-;4409:32;;;;:::i;:::-;4408:41;;;;:::i;:::-;-1:-1:-1;;;;;4387:18:9;;;;;;:14;:18;;;;;:62;4331:133;4484:12;;4477:65;;-1:-1:-1;;;;;4484:12:9;4515:2;4527:4;4534:7;4477:37;:65::i;:::-;3374:1179;2377:2176;-1:-1:-1;;;;;4562:10:9;;;;;;:6;:10;;;;;:21;;4576:7;;4562:10;:21;;4576:7;;4562:21;:::i;:::-;;;;;;;;4614:7;4593:17;;:28;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;2114:2514:9:o;11258:193::-;1094:13:0;:11;:13::i;:::-;11379:3:9::1;:6;::::0;-1:-1:-1;;;;;;;;;;;11379:15:9;;;;-1:-1:-1;;;;;;;;;;;11404:15:9;11433:1:::1;11379:6;11429::::0;-1:-1:-1;;;;;;;;;;;11429:15:9;11258:193::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;4824:4537:9:-;-1:-1:-1;;;;;4885:11:9;;;;;;:7;:11;;;;;:17;;;;;4877:48;;;;-1:-1:-1;;;4877:48:9;;6445:2:10;4877:48:9;;;6427:21:10;6484:2;6464:18;;;6457:30;-1:-1:-1;;;6503:18:10;;;6496:48;6561:18;;4877:48:9;6243:342:10;4877:48:9;-1:-1:-1;;;;;5054:11:9;;4935:17;5054:11;;;:7;:11;;;;;:21;;;;5008:22;;;;;4935:17;;5079:15;;5008:27;;5033:2;5008:27;:::i;:::-;:32;;5038:2;5008:32;:::i;:::-;:37;;5043:2;5008:37;:::i;:::-;:42;;5048:2;5008:42;:::i;:::-;5007:68;;;;:::i;:::-;5006:88;4989:4158;;;-1:-1:-1;;;;;5114:11:9;;;;;;:7;:11;;;;;:26;;;5144:3;5114:33;5110:1566;;5174:12;;-1:-1:-1;;;;;5316:16:9;;;5174:12;5316:16;;;:12;:16;;;;;;;;;5295:14;:18;;;;;;;5174:12;;;;;5167:29;;5218:2;;5295:37;;;:::i;:::-;-1:-1:-1;;;;;5242:11:9;;;;;;:7;:11;;;;;:25;:91;;;;:::i;:::-;5167:184;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4989:4158;;5110:1566;-1:-1:-1;;;;;5376:11:9;;;;;;:7;:11;;;;;:26;;;5406:2;5376:32;5372:1304;;-1:-1:-1;;;;;5483:16:9;;;;;;:12;:16;;;;;;;;;5462:14;:18;;;;;;;5529:3;;5462:37;;;:::i;:::-;5461:44;;5503:2;5461:44;:::i;:::-;5460:72;;;;:::i;:::-;5557:12;;-1:-1:-1;;;;;5625:11:9;;;5557:12;5625:11;;;:7;:11;;;;;:25;5428:104;;-1:-1:-1;5557:12:9;;5550:29;;5601:2;;5625:37;;5428:104;;5625:37;:::i;:::-;5550:130;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;5753:16:9;;;;;;:12;:16;;;;;;;;;5732:14;:18;;;;;;;5799:3;;5732:37;;;:::i;:::-;5731:44;;5773:2;5731:44;:::i;:::-;5730:72;;;;:::i;:::-;-1:-1:-1;;;;;5820:14:9;;;;;;;:10;:14;;;;;;;:26;;;5871:12;;5864:142;;-1:-1:-1;;;5864:142:9;;5698:104;;-1:-1:-1;5871:12:9;;5864:29;;:142;;5915:42;;5698:104;;5864:142;;;:::i;5372:1304::-;-1:-1:-1;;;;;6031:11:9;;;;;;:7;:11;;;;;:26;;;6061:2;6031:32;6027:649;;-1:-1:-1;;;;;6138:16:9;;;;;;:12;:16;;;;;;;;;6117:14;:18;;;;;;;6184:3;;6117:37;;;:::i;:::-;6116:44;;6158:2;6116:44;:::i;:::-;6115:72;;;;:::i;:::-;6212:12;;-1:-1:-1;;;;;6280:11:9;;;6212:12;6280:11;;;:7;:11;;;;;:25;6083:104;;-1:-1:-1;6212:12:9;;6205:29;;6256:2;;6280:37;;6083:104;;6280:37;:::i;:::-;6205:130;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;6408:16:9;;;;;;:12;:16;;;;;;;;;6387:14;:18;;;;;;;6454:3;;6387:37;;;:::i;:::-;6386:44;;6428:2;6386:44;:::i;6027:649::-;4989:4158;;;-1:-1:-1;;;;;6848:11:9;;6706:28;6848:11;;;:7;:11;;;;;:21;;;6706:28;;;;;;6874:12;;6830:39;;:15;:39;:::i;:::-;6829:58;;;;:::i;:::-;-1:-1:-1;;;;;6978:11:9;;;;;;:7;:11;;;;;:22;;;6810:77;;-1:-1:-1;6978:27:9;;7003:2;6978:27;:::i;:::-;-1:-1:-1;;;;;6940:18:9;;;;;;:14;:18;;;;;;:66;;;;:::i;:::-;-1:-1:-1;;;;;7068:11:9;;;;;;:7;:11;;;;;:26;;;6901:105;;-1:-1:-1;7098:3:9;7068:33;7064:2073;;7134:31;7157:8;7134:20;:31;:::i;:::-;-1:-1:-1;;;;;7273:16:9;;;;;;:12;:16;;;;;;7121:45;;-1:-1:-1;7261:28:9;;7121:45;7261:28;:::i;:::-;-1:-1:-1;;;;;7212:11:9;;;;;;:7;:11;;;;;:25;:78;;;;:::i;:::-;7184:106;;7344:4;7333:7;;7325:5;:15;;;;:::i;:::-;7324:24;;;;:::i;:::-;7373:12;;7308:40;;-1:-1:-1;;;;;;7373:12:9;7366:29;7396:2;7401:21;7308:40;7401:5;:21;:::i;:::-;7366:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7064:2073;;;-1:-1:-1;;;;;7516:11:9;;;;;;:7;:11;;;;;:26;;;7546:2;7516:32;7512:1625;;-1:-1:-1;;;;;7638:16:9;;;;;;:12;:16;;;;;;7708:3;;7603:31;7626:8;7603:20;:31;:::i;:::-;7602:52;;;;:::i;:::-;7601:83;;7682:2;7601:83;:::i;:::-;7600:111;;;;:::i;:::-;-1:-1:-1;;;;;7737:11:9;;;;;;:7;:11;;;;;:25;7568:143;;-1:-1:-1;7737:37:9;;7568:143;;7737:37;:::i;:::-;7729:45;;7828:4;7817:7;;7809:5;:15;;;;:::i;:::-;7808:24;;;;:::i;:::-;7857:12;;7792:40;;-1:-1:-1;;;;;;7857:12:9;7850:29;7880:2;7885:21;7792:40;7885:5;:21;:::i;:::-;7850:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;7996:16:9;;;;;;:12;:16;;;;;;8066:3;;7961:31;7984:8;7961:20;:31;:::i;:::-;7960:52;;;;:::i;:::-;7959:83;;8040:2;7959:83;:::i;:::-;7958:111;;;;:::i;:::-;-1:-1:-1;;;;;8087:14:9;;;;;;;:10;:14;;;;;;;:26;;;8138:12;;8131:142;;-1:-1:-1;;;8131:142:9;;7926:143;;-1:-1:-1;8138:12:9;;8131:29;;:142;;8182:42;;7926:143;;8131:142;;;:::i;7512:1625::-;-1:-1:-1;;;;;8365:11:9;;;;;;:7;:11;;;;;:26;;;8395:2;8365:32;8361:776;;-1:-1:-1;;;;;8487:16:9;;;;;;:12;:16;;;;;;8557:3;;8452:31;8475:8;8452:20;:31;:::i;:::-;8451:52;;;;:::i;:::-;8450:83;;8531:2;8450:83;:::i;:::-;8449:111;;;;:::i;:::-;-1:-1:-1;;;;;8586:11:9;;;;;;:7;:11;;;;;:25;8417:143;;-1:-1:-1;8586:37:9;;8417:143;;8586:37;:::i;:::-;8578:45;;8677:4;8666:7;;8658:5;:15;;;;:::i;:::-;8657:24;;;;:::i;:::-;8706:12;;8641:40;;-1:-1:-1;;;;;;8706:12:9;8699:29;8729:2;8734:21;8641:40;8734:5;:21;:::i;:::-;8699:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;8845:16:9;;;;;;:12;:16;;;;;;8915:3;;8810:31;8833:8;8810:20;:31;:::i;:::-;8809:52;;;;:::i;:::-;8808:83;;8889:2;8808:83;:::i;:::-;8807:111;;;;:::i;:::-;-1:-1:-1;;;;;8936:14:9;;;;;;;:10;:14;;;;;;;:26;;;8987:12;;8980:142;;-1:-1:-1;;;8980:142:9;;8775:143;;-1:-1:-1;8987:12:9;;8980:29;;:142;;9031:42;;8775:143;;8980:142;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8361:776;6692:2455;;;;4989:4158;-1:-1:-1;;;;;9156:11:9;;9176:5;9156:11;;;:7;:11;;;;;;;;:17;;;:25;;-1:-1:-1;;9156:25:9;;;9198:12;:16;;;;;9191:23;;;9231:14;:18;;;;;9224:25;;;9273;9259:6;:10;;;;;:39;;9273:25;;9259:10;;:39;;9273:25;;9259:39;:::i;:::-;;;;-1:-1:-1;;;;;;;9329:11:9;;;;;;:7;:11;;;;;:25;9308:17;:46;;9329:25;;9308:17;;:46;;9329:25;;9308:46;:::i;:::-;;;;-1:-1:-1;;;;;4824:4537:9:o;1586:232::-;1094:13:0;:11;:13::i;:::-;1660:10:9::1;1653:18;::::0;;;:6:::1;:18;::::0;;;;:29;;1675:7;;1653:18;:29:::1;::::0;1675:7;;1653:29:::1;:::i;:::-;::::0;;;-1:-1:-1;;1699:12:9::1;::::0;1692:119:::1;::::0;-1:-1:-1;;;;;1699:12:9::1;1743:10;1775:4;1794:7:::0;1692:37:::1;:119::i;:::-;1586:232:::0;:::o;11562:233::-;1094:13:0;:11;:13::i;:::-;11705:6:9::1;:9;::::0;;:21;;;;11736:9;:21;11774:1:::1;11705:9;11767::::0;;:21;11562:233::o;10528:619::-;-1:-1:-1;;;;;10673:11:9;;10582:14;10673:11;;;:7;:11;;;;;:21;;;;10627:22;;;;;10710:15;;10673:21;10627:27;;10652:2;10627:27;:::i;:::-;:32;;10657:2;10627:32;:::i;:::-;:37;;10662:2;10627:37;:::i;:::-;:42;;10667:2;10627:42;:::i;:::-;10626:68;;;;:::i;:::-;10625:100;10608:533;;;-1:-1:-1;;;;;;10758:18:9;;;;;:14;:18;;;;;;;10528:619::o;10608:533::-;-1:-1:-1;;;;;10846:11:9;;10808:16;10846:11;;;:7;:11;;;;;:21;;;10872:12;;10828:39;;:15;:39;:::i;:::-;10827:58;;;;:::i;:::-;-1:-1:-1;;;;;10968:11:9;;10899:28;10968:11;;;:7;:11;;;;;:22;;;10808:77;;-1:-1:-1;10899:28:9;10968:27;;10993:2;10968:27;:::i;:::-;-1:-1:-1;;;;;10930:18:9;;;;;;:14;:18;;;;;;:66;;;;:::i;:::-;-1:-1:-1;;;;;11082:16:9;;11010:17;11082:16;;;:12;:16;;;;;;10899:97;;-1:-1:-1;11010:17:9;11031:31;11054:8;10899:97;11031:31;:::i;:::-;11030:68;;;;:::i;:::-;11010:88;10528:619;-1:-1:-1;;;;;10528:619:9:o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;6792:2:10;2161:73:0::1;::::0;::::1;6774:21:10::0;6831:2;6811:18;;;6804:30;6870:34;6850:18;;;6843:62;-1:-1:-1;;;6921:18:10;;;6914:36;6967:19;;2161:73:0::1;6590:402:10::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;974:241:3:-:0;1139:68;;;-1:-1:-1;;;;;7255:15:10;;;1139:68:3;;;7237:34:10;7307:15;;7287:18;;;7280:43;7339:18;;;;7332:34;;;1139:68:3;;;;;;;;;;7172:18:10;;;;1139:68:3;;;;;;;;-1:-1:-1;;;;;1139:68:3;-1:-1:-1;;;1139:68:3;;;1112:96;;1132:5;;1112:19;:96::i;:::-;974:241;;;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:7;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;7579:2:10;1414:68:0;;;7561:21:10;;;7598:18;;;7591:30;7657:34;7637:18;;;7630:62;7709:18;;1414:68:0;7377:356:10;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;3747:706:3:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:3;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:3;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:3;;7940:2:10;4351:85:3;;;7922:21:10;7979:2;7959:18;;;7952:30;8018:34;7998:18;;;7991:62;-1:-1:-1;;;8069:18:10;;;8062:40;8119:19;;4351:85:3;7738:406:10;4351:85:3;3817:636;3747:706;;:::o;3873:223:6:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:6:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:6;;8351:2:10;5149:81:6;;;8333:21:10;8390:2;8370:18;;;8363:30;8429:34;8409:18;;;8402:62;-1:-1:-1;;;8480:18:10;;;8473:36;8526:19;;5149:81:6;8149:402:10;5149:81:6;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:6;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:6:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:6;;;7908:60;;;;-1:-1:-1;;;7908:60:6;;9305:2:10;7908:60:6;;;9287:21:10;9344:2;9324:18;;;9317:30;9383:31;9363:18;;;9356:59;9432:18;;7908:60:6;9103:353:10;7908:60:6;-1:-1:-1;8003:10:6;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:6;;;;;;;;:::i;14:173:10:-;82:20;;-1:-1:-1;;;;;131:31:10;;121:42;;111:70;;177:1;174;167:12;192:186;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:10:o;565:391::-;651:6;659;667;675;728:3;716:9;707:7;703:23;699:33;696:53;;;745:1;742;735:12;696:53;768:29;787:9;768:29;:::i;:::-;758:39;844:2;829:18;;816:32;;-1:-1:-1;895:2:10;880:18;;867:32;;946:2;931:18;918:32;;-1:-1:-1;565:391:10;-1:-1:-1;;;565:391:10:o;961:180::-;1020:6;1073:2;1061:9;1052:7;1048:23;1044:32;1041:52;;;1089:1;1086;1079:12;1041:52;-1:-1:-1;1112:23:10;;961:180;-1:-1:-1;961:180:10:o;1146:316::-;1223:6;1231;1239;1292:2;1280:9;1271:7;1267:23;1263:32;1260:52;;;1308:1;1305;1298:12;1260:52;-1:-1:-1;;1331:23:10;;;1401:2;1386:18;;1373:32;;-1:-1:-1;1452:2:10;1437:18;;;1424:32;;1146:316;-1:-1:-1;1146:316:10:o;1467:248::-;1535:6;1543;1596:2;1584:9;1575:7;1571:23;1567:32;1564:52;;;1612:1;1609;1602:12;1564:52;-1:-1:-1;;1635:23:10;;;1705:2;1690:18;;;1677:32;;-1:-1:-1;1467:248:10:o;2659:127::-;2720:10;2715:3;2711:20;2708:1;2701:31;2751:4;2748:1;2741:15;2775:4;2772:1;2765:15;2791:168;2864:9;;;2895;;2912:15;;;2906:22;;2892:37;2882:71;;2933:18;;:::i;2964:125::-;3029:9;;;3050:10;;;3047:36;;;3063:18;;:::i;3520:128::-;3587:9;;;3608:11;;;3605:37;;;3622:18;;:::i;3653:217::-;3693:1;3719;3709:132;;3763:10;3758:3;3754:20;3751:1;3744:31;3798:4;3795:1;3788:15;3826:4;3823:1;3816:15;3709:132;-1:-1:-1;3855:9:10;;3653:217::o;4277:274::-;-1:-1:-1;;;;;4469:32:10;;;;4451:51;;4533:2;4518:18;;4511:34;4439:2;4424:18;;4277:274::o;4556:277::-;4623:6;4676:2;4664:9;4655:7;4651:23;4647:32;4644:52;;;4692:1;4689;4682:12;4644:52;4724:9;4718:16;4777:5;4770:13;4763:21;4756:5;4753:32;4743:60;;4799:1;4796;4789:12;8556:250;8641:1;8651:113;8665:6;8662:1;8659:13;8651:113;;;8741:11;;;8735:18;8722:11;;;8715:39;8687:2;8680:10;8651:113;;;-1:-1:-1;;8798:1:10;8780:16;;8773:27;8556:250::o;8811:287::-;8940:3;8978:6;8972:13;8994:66;9053:6;9048:3;9041:4;9033:6;9029:17;8994:66;:::i;:::-;9076:16;;;;;8811:287;-1:-1:-1;;8811:287:10:o;9461:396::-;9610:2;9599:9;9592:21;9573:4;9642:6;9636:13;9685:6;9680:2;9669:9;9665:18;9658:34;9701:79;9773:6;9768:2;9757:9;9753:18;9748:2;9740:6;9736:15;9701:79;:::i;:::-;9841:2;9820:15;-1:-1:-1;;9816:29:10;9801:45;;;;9848:2;9797:54;;9461:396;-1:-1:-1;;9461:396:10:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1724800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"APY(uint256)": "2539",
								"APYPer(uint256)": "2494",
								"AdminAddToken(uint256)": "infinite",
								"BurnAmount(address)": "2553",
								"ClaimRewards(address)": "infinite",
								"DepositTokens(address,uint256,uint256,uint256)": "infinite",
								"Details(address)": "11185",
								"ERC20Address()": "2359",
								"InterestAmount(address)": "2641",
								"RewardAmount(address)": "2553",
								"SetAPY(uint256,uint256,uint256)": "68889",
								"SetRewardPersentage(uint256,uint256,uint256)": "68833",
								"Tokens(address)": "2576",
								"WithdrawTokens(address)": "infinite",
								"getTaxPenalty()": "4496",
								"owner()": "2409",
								"renounceOwnership()": "infinite",
								"setTexAndPenalty(uint256,uint256)": "44514",
								"totalStakedTokens()": "2395",
								"transferOwnership(address)": "28465",
								"viewBurnRewards(address)": "infinite",
								"viewRewards(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1244,
									"end": 1359,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1244,
									"end": 1359,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1289,
									"end": 1301,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "AND",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1289,
									"end": 1317,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1339,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1342,
									"end": 1352,
									"name": "CALLER",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1352,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 12169,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220aa9862f6d1aec9ea314baa8a0a0b69052ab1aecbe17bc6bc3c37b493e013e51564736f6c63430008130033",
									".code": [
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "A6021ACE"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "A6021ACE"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "C0CD40EE"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "D6F80A25"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "DA40EF80"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "E88CC2BE"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "777B4CD8"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "897B3A68"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "9131A05A"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "21736665"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "21736665"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "22B72666"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "264B4AF6"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "2E886F1F"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "3AE73259"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "662B12C9"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "178BE5F"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "32AD8FB"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "DEEF63A"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "10C404DA"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "186CB65B"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 12169,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 9556,
											"end": 10255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 9556,
											"end": 10255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 10260,
											"end": 10522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 10260,
											"end": 10522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 529,
											"end": 554,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 529,
											"end": 554,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 529,
											"end": 554,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 860,
											"end": 901,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 860,
											"end": 901,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 860,
											"end": 901,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 2114,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2114,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 769,
											"end": 807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 769,
											"end": 807,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 769,
											"end": 807,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 11258,
											"end": 11451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 11258,
											"end": 11451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 960,
											"end": 1005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 960,
											"end": 1005,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 11927,
											"end": 12051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12004,
											"end": 12007,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 12004,
											"end": 12016,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 12004,
											"end": 12016,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 12004,
											"end": 12016,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 12004,
											"end": 12016,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 12026,
											"end": 12033,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 12026,
											"end": 12044,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11927,
											"end": 12051,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12147,
											"end": 12150,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 12147,
											"end": 12150,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 12152,
											"end": 12159,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 12152,
											"end": 12159,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1935,
											"end": 1953,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1935,
											"end": 1953,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12057,
											"end": 12167,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1720,
											"end": 1968,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 411,
											"end": 443,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 411,
											"end": 443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 411,
											"end": 443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 411,
											"end": 443,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 411,
											"end": 443,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 411,
											"end": 443,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 411,
											"end": 443,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 714,
											"end": 763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 714,
											"end": 763,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 714,
											"end": 763,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 907,
											"end": 954,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 907,
											"end": 954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 907,
											"end": 954,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 907,
											"end": 954,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 813,
											"end": 854,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 813,
											"end": 854,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 813,
											"end": 854,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2119,
											"end": 2170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2119,
											"end": 2170,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2107,
											"end": 2109,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2092,
											"end": 2110,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1973,
											"end": 2176,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 4824,
											"end": 9361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4824,
											"end": 9361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 352,
											"end": 379,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 352,
											"end": 379,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 352,
											"end": 379,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 352,
											"end": 379,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 352,
											"end": 379,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 1586,
											"end": 1818,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 1586,
											"end": 1818,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 11562,
											"end": 11795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 11562,
											"end": 11795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 10528,
											"end": 11147,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 10528,
											"end": 11147,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 667,
											"end": 708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "tag",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 708,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 667,
											"end": 708,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2492,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2475,
											"end": 2493,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2475,
											"end": 2493,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2576,
											"end": 2578,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2554,
											"end": 2588,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 2646,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2625,
											"end": 2647,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2619,
											"end": 2622,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2604,
											"end": 2623,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2604,
											"end": 2623,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2648,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2421,
											"end": 2424,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 2406,
											"end": 2425,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 2181,
											"end": 2654,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9683,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9687,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9697,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 9676,
											"end": 9697,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9697,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9697,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9652,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 9630,
											"end": 9652,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9652,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9652,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9652,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9717,
											"end": 9732,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 9717,
											"end": 9732,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9676,
											"end": 9697,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9657,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 9630,
											"end": 9657,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9655,
											"end": 9657,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 9630,
											"end": 9657,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9630,
											"end": 9657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9657,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 9630,
											"end": 9657,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 9630,
											"end": 9662,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9660,
											"end": 9662,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 9630,
											"end": 9662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9630,
											"end": 9662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9662,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 9630,
											"end": 9662,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 9630,
											"end": 9667,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9665,
											"end": 9667,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 9630,
											"end": 9667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9630,
											"end": 9667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9667,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 9630,
											"end": 9667,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 9630,
											"end": 9672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9670,
											"end": 9672,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 9630,
											"end": 9672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9630,
											"end": 9672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9630,
											"end": 9672,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 9630,
											"end": 9672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 9629,
											"end": 9697,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 9629,
											"end": 9697,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9628,
											"end": 9732,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3296,
											"end": 3298,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3278,
											"end": 3299,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3335,
											"end": 3337,
											"name": "PUSH",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3308,
											"end": 3338,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3374,
											"end": 3408,
											"name": "PUSH",
											"source": 10,
											"value": "596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365"
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3347,
											"end": 3409,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3445,
											"end": 3472,
											"name": "PUSH",
											"source": 10,
											"value": "2043616C6C2057697468647261772046756E6374696F6E202100000000000000"
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3418,
											"end": 3473,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3490,
											"end": 3509,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 3490,
											"end": 3509,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 9607,
											"end": 9815,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9825,
											"end": 9841,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9870,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9874,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9884,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 9863,
											"end": 9884,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9863,
											"end": 9884,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9889,
											"end": 9901,
											"name": "PUSH",
											"source": 9,
											"value": "15180"
										},
										{
											"begin": 9889,
											"end": 9901,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9845,
											"end": 9884,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 9845,
											"end": 9884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9845,
											"end": 9860,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 9845,
											"end": 9884,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 9845,
											"end": 9884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9845,
											"end": 9884,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 9845,
											"end": 9884,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 9844,
											"end": 9902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 9844,
											"end": 9902,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9912,
											"end": 9940,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9984,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9988,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9999,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 9977,
											"end": 9999,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 9999,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9825,
											"end": 9902,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9825,
											"end": 9902,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9912,
											"end": 9940,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 10004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 9977,
											"end": 10004,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10002,
											"end": 10004,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 9977,
											"end": 10004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9977,
											"end": 10004,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9977,
											"end": 10004,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 9977,
											"end": 10004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9957,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 9961,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 9943,
											"end": 10005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 9943,
											"end": 10005,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9912,
											"end": 10005,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10015,
											"end": 10032,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10035,
											"end": 10066,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 10058,
											"end": 10066,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9912,
											"end": 10005,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10035,
											"end": 10066,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10035,
											"end": 10066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10035,
											"end": 10066,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 10035,
											"end": 10066,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10015,
											"end": 10066,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10015,
											"end": 10066,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10096,
											"end": 10097,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10084,
											"end": 10093,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10084,
											"end": 10097,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4079,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4059,
											"end": 4080,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4116,
											"end": 4118,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4089,
											"end": 4119,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4155,
											"end": 4189,
											"name": "PUSH",
											"source": 10,
											"value": "526577617264206D7573742062652067726561746572207468616E207A65726F"
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4128,
											"end": 4190,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4199,
											"end": 4230,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4247,
											"end": 4266,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4247,
											"end": 4266,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3875,
											"end": 4272,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 10076,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10189,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10177,
											"end": 10193,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10165,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 10165,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10165,
											"end": 10174,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10165,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 10165,
											"end": 10193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10165,
											"end": 10193,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 10165,
											"end": 10193,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10157,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10161,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 10145,
											"end": 10193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10145,
											"end": 10193,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10211,
											"end": 10223,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10233,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 10204,
											"end": 10233,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10234,
											"end": 10236,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 10234,
											"end": 10236,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10238,
											"end": 10247,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 10238,
											"end": 10247,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 10204,
											"end": 10248,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 10204,
											"end": 10248,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10204,
											"end": 10248,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9597,
											"end": 10255,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9597,
											"end": 10255,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9597,
											"end": 10255,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9556,
											"end": 10255,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10318,
											"end": 10332,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10354,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10358,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10373,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 10347,
											"end": 10373,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10347,
											"end": 10373,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10377,
											"end": 10380,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10347,
											"end": 10380,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10402,
											"end": 10403,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10402,
											"end": 10403,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10260,
											"end": 10522,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10480,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10484,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10499,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 10473,
											"end": 10499,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10473,
											"end": 10499,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10502,
											"end": 10505,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10502,
											"end": 10505,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10469,
											"end": 10499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 10469,
											"end": 10499,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10502,
											"end": 10505,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10469,
											"end": 10499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 10469,
											"end": 10499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10469,
											"end": 10499,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 10469,
											"end": 10499,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10463,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10449,
											"end": 10500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 10449,
											"end": 10500,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 10448,
											"end": 10505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 10448,
											"end": 10505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10441,
											"end": 10505,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10260,
											"end": 10522,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 10344,
											"end": 10516,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10522,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2114,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2281,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2281,
											"end": 2293,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2293,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2280,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2274,
											"end": 2294,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5040,
											"end": 5042,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5022,
											"end": 5043,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5079,
											"end": 5081,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5052,
											"end": 5082,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365205761697420212121"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5091,
											"end": 5136,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5153,
											"end": 5171,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5153,
											"end": 5171,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 4838,
											"end": 5177,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2266,
											"end": 2318,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2328,
											"end": 2343,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2346,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 2346,
											"end": 2354,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2357,
											"end": 2367,
											"name": "PUSH",
											"source": 9,
											"value": "3B9ACA00"
										},
										{
											"begin": 2346,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2346,
											"end": 2367,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2346,
											"end": 2367,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 2346,
											"end": 2367,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2388,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2392,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2328,
											"end": 2367,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2328,
											"end": 2367,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2477,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2481,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2470,
											"end": 2491,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2491,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2491,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2446,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2424,
											"end": 2446,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2446,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2446,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2446,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2494,
											"end": 2509,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2494,
											"end": 2509,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2491,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 2424,
											"end": 2451,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2449,
											"end": 2451,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 2424,
											"end": 2451,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2424,
											"end": 2451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2451,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 2424,
											"end": 2451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2424,
											"end": 2456,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2454,
											"end": 2456,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 2424,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2424,
											"end": 2456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2456,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2424,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 2424,
											"end": 2461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2459,
											"end": 2461,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 2424,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2424,
											"end": 2461,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2461,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 2424,
											"end": 2461,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2466,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2424,
											"end": 2466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2466,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 2424,
											"end": 2466,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2424,
											"end": 2466,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2424,
											"end": 2466,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2424,
											"end": 2466,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 2423,
											"end": 2491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2423,
											"end": 2491,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2422,
											"end": 2509,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5384,
											"end": 5386,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5423,
											"end": 5425,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5396,
											"end": 5426,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5462,
											"end": 5490,
											"name": "PUSH",
											"source": 10,
											"value": "596F75722054696D6520506572696F6420436F6D706C6574652E000000000000"
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5435,
											"end": 5491,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5508,
											"end": 5526,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5508,
											"end": 5526,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 5182,
											"end": 5532,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "tag",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 2414,
											"end": 2539,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2585,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2589,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2600,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2578,
											"end": 2600,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2600,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2614,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2614,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5739,
											"end": 5741,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 5742,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "PUSH",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5751,
											"end": 5781,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5790,
											"end": 5842,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 5537,
											"end": 5883,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2716,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2720,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2735,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2709,
											"end": 2735,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2735,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2753,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2709,
											"end": 2753,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6090,
											"end": 6092,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6072,
											"end": 6093,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6129,
											"end": 6131,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6102,
											"end": 6132,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6196,
											"name": "PUSH",
											"source": 10,
											"value": "456E746572205269676874204561726E50657273656E74616765000000000000"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6141,
											"end": 6197,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 5888,
											"end": 6238,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2684,
											"end": 2813,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2862,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2866,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2880,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2855,
											"end": 2890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2883,
											"end": 2890,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2883,
											"end": 2890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 2855,
											"end": 2890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2855,
											"end": 2890,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2855,
											"end": 2890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2834,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2838,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2890,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2890,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2934,
											"end": 2940,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2908,
											"end": 2930,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2908,
											"end": 2930,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2908,
											"end": 2930,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2908,
											"end": 2930,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2908,
											"end": 2930,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2908,
											"end": 2940,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3000,
											"end": 3001,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2993,
											"end": 2999,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "PUSH",
											"source": 9,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3006,
											"end": 3010,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3006,
											"end": 3010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2983,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 2983,
											"end": 3002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2983,
											"end": 2990,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2983,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2983,
											"end": 3002,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2983,
											"end": 3002,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 2983,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 2982,
											"end": 3010,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 2982,
											"end": 3010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2974,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 2960,
											"end": 3010,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "tag",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2960,
											"end": 3010,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2904,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3061,
											"end": 3067,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3067,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3042,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3061,
											"end": 3067,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3067,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3046,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3065,
											"end": 3066,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3035,
											"end": 3057,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3057,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3067,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 3031,
											"end": 3279,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3127,
											"end": 3128,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3120,
											"end": 3126,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "PUSH",
											"source": 9,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3137,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3133,
											"end": 3137,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3110,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 3110,
											"end": 3129,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3110,
											"end": 3117,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3110,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3110,
											"end": 3129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3279,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 3031,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3188,
											"end": 3194,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3188,
											"end": 3194,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3169,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3188,
											"end": 3194,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3188,
											"end": 3194,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3173,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3184,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3162,
											"end": 3184,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3184,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3162,
											"end": 3194,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3158,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 3158,
											"end": 3279,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3247,
											"end": 3253,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "PUSH",
											"source": 9,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 3247,
											"end": 3256,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3260,
											"end": 3264,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3260,
											"end": 3264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3237,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 3237,
											"end": 3256,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3237,
											"end": 3244,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3237,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3237,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3237,
											"end": 3256,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 3237,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3236,
											"end": 3264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 3236,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3228,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 3214,
											"end": 3264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "tag",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3214,
											"end": 3264,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3158,
											"end": 3279,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 3158,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3299,
											"end": 3311,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3299,
											"end": 3311,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3292,
											"end": 3357,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 3292,
											"end": 3357,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3299,
											"end": 3311,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3330,
											"end": 3332,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3342,
											"end": 3346,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3349,
											"end": 3356,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3292,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 3292,
											"end": 3357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3292,
											"end": 3357,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 3292,
											"end": 3357,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3431,
											"end": 3432,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3427,
											"end": 3433,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3427,
											"end": 3433,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3427,
											"end": 3430,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 3427,
											"end": 3433,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3427,
											"end": 3433,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3427,
											"end": 3433,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3433,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3433,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3433,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 3413,
											"end": 3477,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3475,
											"end": 3476,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3471,
											"end": 3474,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3457,
											"end": 3477,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3457,
											"end": 3477,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3477,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 3413,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3521,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 3413,
											"end": 3521,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3519,
											"end": 3520,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3515,
											"end": 3521,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3515,
											"end": 3521,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3515,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 3515,
											"end": 3521,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3515,
											"end": 3521,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3515,
											"end": 3521,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3501,
											"end": 3521,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3501,
											"end": 3521,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3413,
											"end": 3521,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 3413,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5739,
											"end": 5741,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 5742,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "PUSH",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5751,
											"end": 5781,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5790,
											"end": 5842,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 5537,
											"end": 5883,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "tag",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 3388,
											"end": 3577,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3634,
											"end": 3637,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3616,
											"end": 3637,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3661,
											"end": 3675,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3681,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 3661,
											"end": 3681,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "tag",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 3616,
											"end": 3681,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3719,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3723,
											"end": 3725,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 3705,
											"end": 3725,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 3616,
											"end": 3725,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6090,
											"end": 6092,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6072,
											"end": 6093,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6129,
											"end": 6131,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6102,
											"end": 6132,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6196,
											"name": "PUSH",
											"source": 10,
											"value": "456E746572205269676874204561726E50657273656E74616765000000000000"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6141,
											"end": 6197,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 5888,
											"end": 6238,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "tag",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 3591,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3799,
											"end": 3815,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3836,
											"end": 3840,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3829,
											"end": 3832,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3829,
											"end": 3832,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3819,
											"end": 3832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "tag",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 3819,
											"end": 3832,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3818,
											"end": 3840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 3818,
											"end": 3840,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3799,
											"end": 3840,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3799,
											"end": 3840,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3910,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3892,
											"end": 3899,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 3892,
											"end": 3910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "tag",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 3892,
											"end": 3910,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3928,
											"end": 3943,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4021,
											"end": 4025,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3868,
											"end": 4039,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3861,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 3865,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3854,
											"end": 4039,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4083,
											"end": 4089,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4057,
											"end": 4089,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4057,
											"end": 4089,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4161,
											"end": 4162,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4154,
											"end": 4160,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "PUSH",
											"source": 9,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 4154,
											"end": 4163,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4171,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 4167,
											"end": 4171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4132,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 4142,
											"end": 4150,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4132,
											"end": 4139,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4132,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 4132,
											"end": 4150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4132,
											"end": 4150,
											"name": "tag",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 4132,
											"end": 4150,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 4131,
											"end": 4163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "tag",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 4131,
											"end": 4163,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "198"
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 4130,
											"end": 4171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "tag",
											"source": 9,
											"value": "198"
										},
										{
											"begin": 4130,
											"end": 4171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4123,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4109,
											"end": 4171,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 4053,
											"end": 4464,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4222,
											"end": 4228,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4222,
											"end": 4228,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4203,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 4222,
											"end": 4228,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4222,
											"end": 4228,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4207,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4226,
											"end": 4227,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 4196,
											"end": 4218,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4218,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4196,
											"end": 4228,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4192,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 4192,
											"end": 4464,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4300,
											"end": 4301,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4293,
											"end": 4299,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "PUSH",
											"source": 9,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 4293,
											"end": 4302,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4306,
											"end": 4310,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 4306,
											"end": 4310,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4271,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 4281,
											"end": 4289,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4271,
											"end": 4278,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4271,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 4271,
											"end": 4289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4192,
											"end": 4464,
											"name": "tag",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 4192,
											"end": 4464,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4361,
											"end": 4367,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4361,
											"end": 4367,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4342,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 4361,
											"end": 4367,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4361,
											"end": 4367,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4346,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4357,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 4335,
											"end": 4357,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4357,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4335,
											"end": 4367,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4331,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 4331,
											"end": 4464,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4440,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4432,
											"end": 4438,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "PUSH",
											"source": 9,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 4432,
											"end": 4441,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4445,
											"end": 4449,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 4445,
											"end": 4449,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4410,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4410,
											"end": 4417,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4410,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 4410,
											"end": 4428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4410,
											"end": 4428,
											"name": "tag",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 4410,
											"end": 4428,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 4409,
											"end": 4441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 4409,
											"end": 4441,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 4408,
											"end": 4449,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "tag",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 4408,
											"end": 4449,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4401,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4405,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4387,
											"end": 4449,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4331,
											"end": 4464,
											"name": "tag",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 4331,
											"end": 4464,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4484,
											"end": 4496,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4484,
											"end": 4496,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4542,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 4477,
											"end": 4542,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4484,
											"end": 4496,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4515,
											"end": 4517,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4527,
											"end": 4531,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4541,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4514,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 4477,
											"end": 4542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4542,
											"name": "tag",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 4477,
											"end": 4542,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3374,
											"end": 4553,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 2377,
											"end": 4553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4568,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4576,
											"end": 4583,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4576,
											"end": 4583,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4576,
											"end": 4583,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4576,
											"end": 4583,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4562,
											"end": 4583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4562,
											"end": 4583,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4614,
											"end": 4621,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4610,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4593,
											"end": 4610,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4593,
											"end": 4621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "tag",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4621,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2114,
											"end": 4628,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 11258,
											"end": 11451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11379,
											"end": 11382,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 11379,
											"end": 11385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11379,
											"end": 11385,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11379,
											"end": 11394,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 11379,
											"end": 11394,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11379,
											"end": 11394,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 11379,
											"end": 11394,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11404,
											"end": 11419,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11433,
											"end": 11434,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 11379,
											"end": 11385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11429,
											"end": 11435,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11429,
											"end": 11444,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11258,
											"end": 11451,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1922,
											"end": 1923,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 1895,
											"end": 1925,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4824,
											"end": 9361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4892,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4896,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4902,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4885,
											"end": 4902,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4902,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4885,
											"end": 4902,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 4885,
											"end": 4902,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6445,
											"end": 6447,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6427,
											"end": 6448,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6484,
											"end": 6486,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6457,
											"end": 6487,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4669727374205374616B6520546F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6496,
											"end": 6544,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6561,
											"end": 6579,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6561,
											"end": 6579,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 6243,
											"end": 6585,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 4877,
											"end": 4925,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4935,
											"end": 4952,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5061,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5065,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5075,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5054,
											"end": 5075,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5075,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5054,
											"end": 5075,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4935,
											"end": 4952,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4935,
											"end": 4952,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5079,
											"end": 5094,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 5079,
											"end": 5094,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 5008,
											"end": 5035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5033,
											"end": 5035,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 5008,
											"end": 5035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5008,
											"end": 5035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5035,
											"name": "tag",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 5008,
											"end": 5035,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5040,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 5008,
											"end": 5040,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5038,
											"end": 5040,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 5008,
											"end": 5040,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5008,
											"end": 5040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5040,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 5008,
											"end": 5040,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5045,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 5008,
											"end": 5045,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5043,
											"end": 5045,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 5008,
											"end": 5045,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5008,
											"end": 5045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5045,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 5008,
											"end": 5045,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5050,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 5008,
											"end": 5050,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5048,
											"end": 5050,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 5008,
											"end": 5050,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5008,
											"end": 5050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5008,
											"end": 5050,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 5008,
											"end": 5050,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 5007,
											"end": 5075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "tag",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 5007,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5006,
											"end": 5094,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5121,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5125,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5140,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 5114,
											"end": 5140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5140,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5144,
											"end": 5147,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5114,
											"end": 5147,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5110,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 5110,
											"end": 6676,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5328,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5316,
											"end": 5332,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5309,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5174,
											"end": 5186,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5196,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 5167,
											"end": 5196,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5218,
											"end": 5220,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5218,
											"end": 5220,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5332,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 5295,
											"end": 5332,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5332,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 5295,
											"end": 5332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5295,
											"end": 5332,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 5295,
											"end": 5332,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5249,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5253,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5267,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 5242,
											"end": 5333,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "tag",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 5242,
											"end": 5333,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 5167,
											"end": 5351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 5167,
											"end": 5351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "tag",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "275"
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5110,
											"end": 6676,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 5110,
											"end": 6676,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5383,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5387,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5402,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 5376,
											"end": 5402,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5376,
											"end": 5402,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5406,
											"end": 5408,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 5376,
											"end": 5408,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5372,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 5372,
											"end": 6676,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5495,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5483,
											"end": 5499,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5476,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5480,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5529,
											"end": 5532,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5529,
											"end": 5532,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 5462,
											"end": 5499,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 5462,
											"end": 5499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5462,
											"end": 5499,
											"name": "tag",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 5462,
											"end": 5499,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5461,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 5461,
											"end": 5505,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5503,
											"end": 5505,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 5461,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5461,
											"end": 5505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5461,
											"end": 5505,
											"name": "tag",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 5461,
											"end": 5505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 5460,
											"end": 5532,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 5460,
											"end": 5532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5632,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5636,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5650,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5428,
											"end": 5532,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5428,
											"end": 5532,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 5550,
											"end": 5579,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5601,
											"end": 5603,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5601,
											"end": 5603,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 5625,
											"end": 5662,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5428,
											"end": 5532,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5428,
											"end": 5532,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 5625,
											"end": 5662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5625,
											"end": 5662,
											"name": "tag",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 5625,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 5550,
											"end": 5680,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "tag",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 5550,
											"end": 5680,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "tag",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 5550,
											"end": 5680,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5765,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5753,
											"end": 5769,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5746,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5802,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5799,
											"end": 5802,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 5732,
											"end": 5769,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 5732,
											"end": 5769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5769,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 5732,
											"end": 5769,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5731,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 5731,
											"end": 5775,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5773,
											"end": 5775,
											"name": "PUSH",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 5731,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5731,
											"end": 5775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5731,
											"end": 5775,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 5731,
											"end": 5775,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 5730,
											"end": 5802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "tag",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 5730,
											"end": 5802,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5830,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5834,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5846,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5846,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5820,
											"end": 5846,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 5871,
											"end": 5883,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5871,
											"end": 5883,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5698,
											"end": 5802,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5698,
											"end": 5802,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5871,
											"end": 5883,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5871,
											"end": 5883,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 5893,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 5864,
											"end": 5893,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5915,
											"end": 5957,
											"name": "PUSH",
											"source": 9,
											"value": "DEAD"
										},
										{
											"begin": 5915,
											"end": 5957,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5698,
											"end": 5802,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5698,
											"end": 5802,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5864,
											"end": 6006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 5864,
											"end": 6006,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5372,
											"end": 6676,
											"name": "tag",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 5372,
											"end": 6676,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6038,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6042,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6057,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 6031,
											"end": 6057,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6031,
											"end": 6057,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6061,
											"end": 6063,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 6031,
											"end": 6063,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6027,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 6027,
											"end": 6676,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6150,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6138,
											"end": 6154,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6131,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6135,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6184,
											"end": 6187,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 6184,
											"end": 6187,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6154,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 6117,
											"end": 6154,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6154,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 6117,
											"end": 6154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6117,
											"end": 6154,
											"name": "tag",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 6117,
											"end": 6154,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6158,
											"end": 6160,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 6116,
											"end": 6160,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "tag",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 6115,
											"end": 6187,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "tag",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 6115,
											"end": 6187,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6212,
											"end": 6224,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6212,
											"end": 6224,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6212,
											"end": 6224,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6287,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6291,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6305,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6083,
											"end": 6187,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6083,
											"end": 6187,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6212,
											"end": 6224,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6212,
											"end": 6224,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6234,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 6205,
											"end": 6234,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6256,
											"end": 6258,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6256,
											"end": 6258,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6317,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 6280,
											"end": 6317,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6083,
											"end": 6187,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 6083,
											"end": 6187,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6317,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6280,
											"end": 6317,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6280,
											"end": 6317,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 6280,
											"end": 6317,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 6205,
											"end": 6335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 6205,
											"end": 6335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "tag",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 6205,
											"end": 6335,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6420,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6408,
											"end": 6424,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6401,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6405,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6454,
											"end": 6457,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 6454,
											"end": 6457,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 6387,
											"end": 6424,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 6387,
											"end": 6424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6387,
											"end": 6424,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 6387,
											"end": 6424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6386,
											"end": 6430,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 6386,
											"end": 6430,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6428,
											"end": 6430,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 6386,
											"end": 6430,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 6386,
											"end": 6430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6027,
											"end": 6676,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 6027,
											"end": 6676,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "275"
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6855,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6859,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6869,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6848,
											"end": 6869,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6848,
											"end": 6869,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6706,
											"end": 6734,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6874,
											"end": 6886,
											"name": "PUSH",
											"source": 9,
											"value": "15180"
										},
										{
											"begin": 6874,
											"end": 6886,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6830,
											"end": 6869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 6830,
											"end": 6869,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6830,
											"end": 6845,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 6830,
											"end": 6869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 6830,
											"end": 6869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6830,
											"end": 6869,
											"name": "tag",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 6830,
											"end": 6869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 6829,
											"end": 6887,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "tag",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 6829,
											"end": 6887,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6985,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 7000,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 6978,
											"end": 7000,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 7000,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6810,
											"end": 6887,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6810,
											"end": 6887,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6978,
											"end": 7005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 6978,
											"end": 7005,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7003,
											"end": 7005,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 6978,
											"end": 7005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 6978,
											"end": 7005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 7005,
											"name": "tag",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 6978,
											"end": 7005,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6954,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 6940,
											"end": 7006,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "tag",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 6940,
											"end": 7006,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7075,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7079,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7094,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 7068,
											"end": 7094,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7094,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6901,
											"end": 7006,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6901,
											"end": 7006,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7098,
											"end": 7101,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7068,
											"end": 7101,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7134,
											"end": 7165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "281"
										},
										{
											"begin": 7157,
											"end": 7165,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7134,
											"end": 7154,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7134,
											"end": 7165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7134,
											"end": 7165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7134,
											"end": 7165,
											"name": "tag",
											"source": 9,
											"value": "281"
										},
										{
											"begin": 7134,
											"end": 7165,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7285,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7273,
											"end": 7289,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7166,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7166,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7261,
											"end": 7289,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "282"
										},
										{
											"begin": 7261,
											"end": 7289,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7166,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7261,
											"end": 7289,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7261,
											"end": 7289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7261,
											"end": 7289,
											"name": "tag",
											"source": 9,
											"value": "282"
										},
										{
											"begin": 7261,
											"end": 7289,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7219,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7223,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7237,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "283"
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 7212,
											"end": 7290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "tag",
											"source": 9,
											"value": "283"
										},
										{
											"begin": 7212,
											"end": 7290,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7184,
											"end": 7290,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7184,
											"end": 7290,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7344,
											"end": 7348,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 7333,
											"end": 7340,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 7333,
											"end": 7340,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7325,
											"end": 7330,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7325,
											"end": 7340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "tag",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 7325,
											"end": 7340,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 7324,
											"end": 7348,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "tag",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 7324,
											"end": 7348,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7373,
											"end": 7385,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 7373,
											"end": 7385,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7308,
											"end": 7348,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7308,
											"end": 7348,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7373,
											"end": 7385,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 7396,
											"end": 7398,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7401,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 7308,
											"end": 7348,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7401,
											"end": 7406,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7401,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7401,
											"end": 7422,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7401,
											"end": 7422,
											"name": "tag",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 7401,
											"end": 7422,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 7366,
											"end": 7424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "tag",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "289"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "tag",
											"source": 9,
											"value": "289"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "290"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 7366,
											"end": 7424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "tag",
											"source": 9,
											"value": "290"
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7366,
											"end": 7424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "tag",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 7064,
											"end": 9137,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7523,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7527,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7542,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 7516,
											"end": 7542,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7516,
											"end": 7542,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7546,
											"end": 7548,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 7516,
											"end": 7548,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7512,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "292"
										},
										{
											"begin": 7512,
											"end": 9137,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7650,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7654,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7708,
											"end": 7711,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7708,
											"end": 7711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7634,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "293"
										},
										{
											"begin": 7626,
											"end": 7634,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7623,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7634,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7603,
											"end": 7634,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7634,
											"name": "tag",
											"source": 9,
											"value": "293"
										},
										{
											"begin": 7603,
											"end": 7634,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "294"
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7602,
											"end": 7654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "tag",
											"source": 9,
											"value": "294"
										},
										{
											"begin": 7602,
											"end": 7654,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7601,
											"end": 7684,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "295"
										},
										{
											"begin": 7601,
											"end": 7684,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7682,
											"end": 7684,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 7601,
											"end": 7684,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7601,
											"end": 7684,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7601,
											"end": 7684,
											"name": "tag",
											"source": 9,
											"value": "295"
										},
										{
											"begin": 7601,
											"end": 7684,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "296"
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 7600,
											"end": 7711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "tag",
											"source": 9,
											"value": "296"
										},
										{
											"begin": 7600,
											"end": 7711,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7744,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7748,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7762,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7568,
											"end": 7711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7568,
											"end": 7711,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7737,
											"end": 7774,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "297"
										},
										{
											"begin": 7737,
											"end": 7774,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7568,
											"end": 7711,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7568,
											"end": 7711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7774,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 7737,
											"end": 7774,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7774,
											"name": "tag",
											"source": 9,
											"value": "297"
										},
										{
											"begin": 7737,
											"end": 7774,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7729,
											"end": 7774,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7729,
											"end": 7774,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7828,
											"end": 7832,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 7817,
											"end": 7824,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 7817,
											"end": 7824,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7809,
											"end": 7814,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "298"
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7809,
											"end": 7824,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "tag",
											"source": 9,
											"value": "298"
										},
										{
											"begin": 7809,
											"end": 7824,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 7808,
											"end": 7832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "tag",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 7808,
											"end": 7832,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7857,
											"end": 7869,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 7857,
											"end": 7869,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7792,
											"end": 7832,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7792,
											"end": 7832,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7857,
											"end": 7869,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7879,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 7880,
											"end": 7882,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7885,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 7792,
											"end": 7832,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7885,
											"end": 7890,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7885,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7885,
											"end": 7906,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7885,
											"end": 7906,
											"name": "tag",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 7885,
											"end": 7906,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "301"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 7850,
											"end": 7908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "tag",
											"source": 9,
											"value": "301"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "tag",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 7850,
											"end": 7908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "tag",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 7850,
											"end": 7908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8008,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8012,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8066,
											"end": 8069,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8066,
											"end": 8069,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7961,
											"end": 7992,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "305"
										},
										{
											"begin": 7984,
											"end": 7992,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7961,
											"end": 7981,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7961,
											"end": 7992,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7961,
											"end": 7992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7961,
											"end": 7992,
											"name": "tag",
											"source": 9,
											"value": "305"
										},
										{
											"begin": 7961,
											"end": 7992,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7960,
											"end": 8012,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "tag",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 7960,
											"end": 8012,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 7959,
											"end": 8042,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8040,
											"end": 8042,
											"name": "PUSH",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 7959,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7959,
											"end": 8042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8042,
											"name": "tag",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 7959,
											"end": 8042,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 7958,
											"end": 8069,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 7958,
											"end": 8069,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8097,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8113,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8113,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8087,
											"end": 8113,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8150,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 8138,
											"end": 8150,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7926,
											"end": 8069,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7926,
											"end": 8069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8138,
											"end": 8150,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8150,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8160,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 8131,
											"end": 8160,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8182,
											"end": 8224,
											"name": "PUSH",
											"source": 9,
											"value": "DEAD"
										},
										{
											"begin": 8182,
											"end": 8224,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7926,
											"end": 8069,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 7926,
											"end": 8069,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8131,
											"end": 8273,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 8131,
											"end": 8273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7512,
											"end": 9137,
											"name": "tag",
											"source": 9,
											"value": "292"
										},
										{
											"begin": 7512,
											"end": 9137,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8372,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8376,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8391,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 8365,
											"end": 8391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8365,
											"end": 8391,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8395,
											"end": 8397,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8365,
											"end": 8397,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 8361,
											"end": 9137,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8499,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8503,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8557,
											"end": 8560,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8557,
											"end": 8560,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8452,
											"end": 8483,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 8475,
											"end": 8483,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8452,
											"end": 8472,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8452,
											"end": 8483,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 8452,
											"end": 8483,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8452,
											"end": 8483,
											"name": "tag",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 8452,
											"end": 8483,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 8451,
											"end": 8503,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "tag",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 8451,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8450,
											"end": 8533,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 8450,
											"end": 8533,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8531,
											"end": 8533,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8450,
											"end": 8533,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 8450,
											"end": 8533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8450,
											"end": 8533,
											"name": "tag",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 8450,
											"end": 8533,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 8449,
											"end": 8560,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "tag",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 8449,
											"end": 8560,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8593,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8597,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8611,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8417,
											"end": 8560,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8417,
											"end": 8560,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8586,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 8586,
											"end": 8623,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8417,
											"end": 8560,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8417,
											"end": 8560,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 8586,
											"end": 8623,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8623,
											"name": "tag",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 8586,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8578,
											"end": 8623,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8578,
											"end": 8623,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8677,
											"end": 8681,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 8666,
											"end": 8673,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 8666,
											"end": 8673,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8658,
											"end": 8663,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 8658,
											"end": 8673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "tag",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 8658,
											"end": 8673,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "321"
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 8657,
											"end": 8681,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "tag",
											"source": 9,
											"value": "321"
										},
										{
											"begin": 8657,
											"end": 8681,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8706,
											"end": 8718,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 8706,
											"end": 8718,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8641,
											"end": 8681,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8641,
											"end": 8681,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8706,
											"end": 8718,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8728,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 8729,
											"end": 8731,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 8734,
											"end": 8755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "322"
										},
										{
											"begin": 8641,
											"end": 8681,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 8734,
											"end": 8739,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8734,
											"end": 8755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 8734,
											"end": 8755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8734,
											"end": 8755,
											"name": "tag",
											"source": 9,
											"value": "322"
										},
										{
											"begin": 8734,
											"end": 8755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "323"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 8699,
											"end": 8757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "tag",
											"source": 9,
											"value": "323"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "tag",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 8699,
											"end": 8757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "tag",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 8699,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8857,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8845,
											"end": 8861,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8915,
											"end": 8918,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8915,
											"end": 8918,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8810,
											"end": 8841,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "327"
										},
										{
											"begin": 8833,
											"end": 8841,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8810,
											"end": 8830,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8810,
											"end": 8841,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 8810,
											"end": 8841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8810,
											"end": 8841,
											"name": "tag",
											"source": 9,
											"value": "327"
										},
										{
											"begin": 8810,
											"end": 8841,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "328"
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 8809,
											"end": 8861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "tag",
											"source": 9,
											"value": "328"
										},
										{
											"begin": 8809,
											"end": 8861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8808,
											"end": 8891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 8808,
											"end": 8891,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8889,
											"end": 8891,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8808,
											"end": 8891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 8808,
											"end": 8891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8808,
											"end": 8891,
											"name": "tag",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 8808,
											"end": 8891,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 8807,
											"end": 8918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "tag",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 8807,
											"end": 8918,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8946,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8950,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8962,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8936,
											"end": 8962,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8987,
											"end": 8999,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 8987,
											"end": 8999,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8775,
											"end": 8918,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8775,
											"end": 8918,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8987,
											"end": 8999,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8987,
											"end": 8999,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9009,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 8980,
											"end": 9009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9031,
											"end": 9073,
											"name": "PUSH",
											"source": 9,
											"value": "DEAD"
										},
										{
											"begin": 9031,
											"end": 9073,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8775,
											"end": 8918,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 8775,
											"end": 8918,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 8980,
											"end": 9122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "tag",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "333"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "tag",
											"source": 9,
											"value": "333"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 8980,
											"end": 9122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "tag",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8980,
											"end": 9122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 9137,
											"name": "tag",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 8361,
											"end": 9137,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6692,
											"end": 9147,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6692,
											"end": 9147,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6692,
											"end": 9147,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6692,
											"end": 9147,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "tag",
											"source": 9,
											"value": "275"
										},
										{
											"begin": 4989,
											"end": 9147,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9176,
											"end": 9181,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9163,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9167,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9173,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9156,
											"end": 9173,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9173,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9181,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9181,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9156,
											"end": 9181,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9181,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9181,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9210,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 9198,
											"end": 9214,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9214,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9214,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9214,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9198,
											"end": 9214,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9191,
											"end": 9214,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9191,
											"end": 9214,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9191,
											"end": 9214,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 9231,
											"end": 9245,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 9231,
											"end": 9249,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9231,
											"end": 9249,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9231,
											"end": 9249,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9231,
											"end": 9249,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9231,
											"end": 9249,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9224,
											"end": 9249,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9224,
											"end": 9249,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9224,
											"end": 9249,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 9273,
											"end": 9298,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9265,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9273,
											"end": 9298,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9273,
											"end": 9298,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9269,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "335"
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9273,
											"end": 9298,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9273,
											"end": 9298,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 9259,
											"end": 9298,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "tag",
											"source": 9,
											"value": "335"
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9259,
											"end": 9298,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9336,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9340,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9354,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9325,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9354,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9354,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9325,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9325,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "336"
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9354,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9329,
											"end": 9354,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 9308,
											"end": 9354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "tag",
											"source": 9,
											"value": "336"
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9308,
											"end": 9354,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4824,
											"end": 9361,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "338"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "338"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1660,
											"end": 1670,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1659,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 1653,
											"end": 1671,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1675,
											"end": 1682,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1675,
											"end": 1682,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1671,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "340"
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1675,
											"end": 1682,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1675,
											"end": 1682,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1653,
											"end": 1682,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "340"
										},
										{
											"begin": 1653,
											"end": 1682,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1682,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1699,
											"end": 1711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1699,
											"end": 1711,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1692,
											"end": 1811,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "341"
										},
										{
											"begin": 1692,
											"end": 1811,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1699,
											"end": 1711,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1743,
											"end": 1753,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1775,
											"end": 1779,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1801,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1692,
											"end": 1729,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 1692,
											"end": 1811,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1692,
											"end": 1811,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "341"
										},
										{
											"begin": 1692,
											"end": 1811,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1818,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 11562,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11705,
											"end": 11711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 11705,
											"end": 11714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11705,
											"end": 11714,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11705,
											"end": 11714,
											"name": "PUSH",
											"source": 9,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 11705,
											"end": 11726,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 11705,
											"end": 11726,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11705,
											"end": 11726,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 11705,
											"end": 11726,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11736,
											"end": 11745,
											"name": "PUSH",
											"source": 9,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 11736,
											"end": 11757,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11774,
											"end": 11775,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 11705,
											"end": 11714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11767,
											"end": 11776,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11767,
											"end": 11776,
											"name": "PUSH",
											"source": 9,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 11767,
											"end": 11788,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11562,
											"end": 11795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10582,
											"end": 10596,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10680,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10684,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10694,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10673,
											"end": 10694,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10694,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10694,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10649,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 10627,
											"end": 10649,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10649,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10649,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10649,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10710,
											"end": 10725,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 10710,
											"end": 10725,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10673,
											"end": 10694,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 10627,
											"end": 10654,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10652,
											"end": 10654,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 10627,
											"end": 10654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10627,
											"end": 10654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10654,
											"name": "tag",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 10627,
											"end": 10654,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10659,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 10627,
											"end": 10659,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10657,
											"end": 10659,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 10627,
											"end": 10659,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10627,
											"end": 10659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10659,
											"name": "tag",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 10627,
											"end": 10659,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10664,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "348"
										},
										{
											"begin": 10627,
											"end": 10664,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10662,
											"end": 10664,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 10627,
											"end": 10664,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10627,
											"end": 10664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10664,
											"name": "tag",
											"source": 9,
											"value": "348"
										},
										{
											"begin": 10627,
											"end": 10664,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 10627,
											"end": 10669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10667,
											"end": 10669,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 10627,
											"end": 10669,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10627,
											"end": 10669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10669,
											"name": "tag",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 10627,
											"end": 10669,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "350"
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 10626,
											"end": 10694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "tag",
											"source": 9,
											"value": "350"
										},
										{
											"begin": 10626,
											"end": 10694,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10625,
											"end": 10725,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10608,
											"end": 11141,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10608,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "351"
										},
										{
											"begin": 10608,
											"end": 11141,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10772,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10608,
											"end": 11141,
											"name": "tag",
											"source": 9,
											"value": "351"
										},
										{
											"begin": 10608,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10808,
											"end": 10824,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10853,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10857,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10867,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10846,
											"end": 10867,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 10867,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10872,
											"end": 10884,
											"name": "PUSH",
											"source": 9,
											"value": "15180"
										},
										{
											"begin": 10872,
											"end": 10884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10828,
											"end": 10867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 10828,
											"end": 10867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10828,
											"end": 10843,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 10828,
											"end": 10867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 10828,
											"end": 10867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10828,
											"end": 10867,
											"name": "tag",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 10828,
											"end": 10867,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "354"
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 10827,
											"end": 10885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "tag",
											"source": 9,
											"value": "354"
										},
										{
											"begin": 10827,
											"end": 10885,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10899,
											"end": 10927,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10975,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10979,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10990,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 10968,
											"end": 10990,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10990,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10808,
											"end": 10885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10808,
											"end": 10885,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10899,
											"end": 10927,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10995,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "355"
										},
										{
											"begin": 10968,
											"end": 10995,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10993,
											"end": 10995,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 10968,
											"end": 10995,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 10968,
											"end": 10995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10968,
											"end": 10995,
											"name": "tag",
											"source": 9,
											"value": "355"
										},
										{
											"begin": 10968,
											"end": 10995,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10944,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10948,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "356"
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 10930,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "tag",
											"source": 9,
											"value": "356"
										},
										{
											"begin": 10930,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11010,
											"end": 11027,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11094,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11082,
											"end": 11098,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10899,
											"end": 10996,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10899,
											"end": 10996,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11010,
											"end": 11027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11031,
											"end": 11062,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 11054,
											"end": 11062,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10899,
											"end": 10996,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11031,
											"end": 11062,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 11031,
											"end": 11062,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11031,
											"end": 11062,
											"name": "tag",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 11031,
											"end": 11062,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 11030,
											"end": 11098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "tag",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 11030,
											"end": 11098,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11010,
											"end": 11098,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 11147,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10528,
											"end": 11147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "360"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "360"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "362"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6792,
											"end": 6794,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6774,
											"end": 6795,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6831,
											"end": 6833,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6804,
											"end": 6834,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6870,
											"end": 6904,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6843,
											"end": 6905,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6914,
											"end": 6950,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6967,
											"end": 6986,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 6967,
											"end": 6986,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 6590,
											"end": 6992,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "362"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "341"
										},
										{
											"begin": 2263,
											"end": 2271,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 2244,
											"end": 2272,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7237,
											"end": 7271,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7322,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7322,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7280,
											"end": 7323,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "367"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "370"
										},
										{
											"begin": 1112,
											"end": 1208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "367"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7579,
											"end": 7581,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7591,
											"end": 7621,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7691,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7630,
											"end": 7692,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7727,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7709,
											"end": 7727,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 7377,
											"end": 7733,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "370"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "380"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "381"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "380"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "384"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "383"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 4359,
											"end": 4389,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "383"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "384"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7940,
											"end": 7942,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7922,
											"end": 7943,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7979,
											"end": 7981,
											"name": "PUSH",
											"source": 10,
											"value": "2A"
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7952,
											"end": 7982,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8052,
											"name": "PUSH",
											"source": 10,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8053,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8102,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8119,
											"end": 8138,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8119,
											"end": 8138,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 7738,
											"end": 8144,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 3,
											"value": "384"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3817,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 6,
											"value": "381"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "390"
										},
										{
											"begin": 4037,
											"end": 4089,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3873,
											"end": 4096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 6,
											"value": "390"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "392"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8351,
											"end": 8353,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8333,
											"end": 8354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8390,
											"end": 8392,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8363,
											"end": 8393,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8429,
											"end": 8463,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8402,
											"end": 8464,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8473,
											"end": 8509,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8526,
											"end": 8545,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8526,
											"end": 8545,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 8149,
											"end": 8551,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 6,
											"value": "392"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "396"
										},
										{
											"begin": 5282,
											"end": 5313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "399"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "399"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "400"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 5330,
											"end": 5399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 6,
											"value": "400"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "403"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "407"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "407"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9305,
											"end": 9307,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9287,
											"end": 9308,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9346,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9317,
											"end": 9347,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9383,
											"end": 9414,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9356,
											"end": 9415,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9432,
											"end": 9450,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 9432,
											"end": 9450,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 9103,
											"end": 9456,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 6,
											"value": "407"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 6,
											"value": "403"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "415"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 6,
											"value": "415"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "418"
										},
										{
											"begin": 9119,
											"end": 9139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 192,
											"end": 378,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 565,
											"end": 956,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 565,
											"end": 956,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 651,
											"end": 657,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 659,
											"end": 665,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 673,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 675,
											"end": 681,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 716,
											"end": 725,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 707,
											"end": 714,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 703,
											"end": 726,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 699,
											"end": 732,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 696,
											"end": 749,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 696,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 696,
											"end": 749,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 745,
											"end": 746,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 742,
											"end": 743,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 735,
											"end": 747,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 696,
											"end": 749,
											"name": "tag",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 696,
											"end": 749,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 768,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "431"
										},
										{
											"begin": 787,
											"end": 796,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 768,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 768,
											"end": 797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 768,
											"end": 797,
											"name": "tag",
											"source": 10,
											"value": "431"
										},
										{
											"begin": 768,
											"end": 797,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 758,
											"end": 797,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 844,
											"end": 846,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 829,
											"end": 847,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 829,
											"end": 847,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 816,
											"end": 848,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 816,
											"end": 848,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 895,
											"end": 897,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 880,
											"end": 898,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 880,
											"end": 898,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 867,
											"end": 899,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 867,
											"end": 899,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 946,
											"end": 948,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 931,
											"end": 949,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 918,
											"end": 950,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 918,
											"end": 950,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 565,
											"end": 956,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 565,
											"end": 956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1020,
											"end": 1026,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1073,
											"end": 1075,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1059,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1048,
											"end": 1071,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1044,
											"end": 1076,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1089,
											"end": 1090,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1086,
											"end": 1087,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1079,
											"end": 1091,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "tag",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1112,
											"end": 1135,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1112,
											"end": 1135,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 961,
											"end": 1141,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1223,
											"end": 1229,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1231,
											"end": 1237,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1239,
											"end": 1245,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1294,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1280,
											"end": 1289,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1271,
											"end": 1278,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1267,
											"end": 1290,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1263,
											"end": 1295,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "435"
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1308,
											"end": 1309,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1305,
											"end": 1306,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "tag",
											"source": 10,
											"value": "435"
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1401,
											"end": 1403,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1404,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1386,
											"end": 1404,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1373,
											"end": 1405,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1373,
											"end": 1405,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1452,
											"end": 1454,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1146,
											"end": 1462,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1467,
											"end": 1715,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1467,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1535,
											"end": 1541,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1543,
											"end": 1549,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1596,
											"end": 1598,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1584,
											"end": 1593,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1575,
											"end": 1582,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1571,
											"end": 1594,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1567,
											"end": 1599,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "437"
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1612,
											"end": 1613,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1609,
											"end": 1610,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1614,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "tag",
											"source": 10,
											"value": "437"
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1705,
											"end": 1707,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1677,
											"end": 1709,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1677,
											"end": 1709,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1467,
											"end": 1715,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2659,
											"end": 2786,
											"name": "tag",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 2659,
											"end": 2786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2720,
											"end": 2730,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 2715,
											"end": 2718,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 2711,
											"end": 2731,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2708,
											"end": 2709,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2701,
											"end": 2732,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2751,
											"end": 2755,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 2748,
											"end": 2749,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2741,
											"end": 2756,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2775,
											"end": 2779,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2772,
											"end": 2773,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2765,
											"end": 2780,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2791,
											"end": 2959,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 2791,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 2906,
											"end": 2928,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2906,
											"end": 2928,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 2892,
											"end": 2929,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 2882,
											"end": 2953,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 2882,
											"end": 2953,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 2933,
											"end": 2951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2964,
											"end": 3089,
											"name": "tag",
											"source": 10,
											"value": "118"
										},
										{
											"begin": 2964,
											"end": 3089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 3063,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 3063,
											"end": 3081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3520,
											"end": 3648,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 3520,
											"end": 3648,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3622,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 3622,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 3622,
											"end": 3640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3653,
											"end": 3870,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3653,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3693,
											"end": 3694,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3719,
											"end": 3720,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "453"
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3763,
											"end": 3773,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 3758,
											"end": 3761,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3754,
											"end": 3774,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 3751,
											"end": 3752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3744,
											"end": 3775,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 3795,
											"end": 3796,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3788,
											"end": 3803,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3826,
											"end": 3830,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3823,
											"end": 3824,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3816,
											"end": 3831,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "tag",
											"source": 10,
											"value": "453"
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3855,
											"end": 3864,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3855,
											"end": 3864,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3653,
											"end": 3870,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4277,
											"end": 4551,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 4277,
											"end": 4551,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4451,
											"end": 4502,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4451,
											"end": 4502,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4533,
											"end": 4535,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4518,
											"end": 4536,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4518,
											"end": 4536,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4511,
											"end": 4545,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4439,
											"end": 4441,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4424,
											"end": 4442,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4424,
											"end": 4442,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4277,
											"end": 4551,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4556,
											"end": 4833,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 4556,
											"end": 4833,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4623,
											"end": 4629,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4676,
											"end": 4678,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4664,
											"end": 4673,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4655,
											"end": 4662,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4651,
											"end": 4674,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4647,
											"end": 4679,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4692,
											"end": 4693,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4689,
											"end": 4690,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4682,
											"end": 4694,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "tag",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4724,
											"end": 4733,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4734,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4777,
											"end": 4782,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4770,
											"end": 4783,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4763,
											"end": 4784,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4756,
											"end": 4761,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4785,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4743,
											"end": 4803,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 4743,
											"end": 4803,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4799,
											"end": 4800,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4797,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4789,
											"end": 4801,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8556,
											"end": 8806,
											"name": "tag",
											"source": 10,
											"value": "421"
										},
										{
											"begin": 8556,
											"end": 8806,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8641,
											"end": 8642,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "tag",
											"source": 10,
											"value": "470"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8665,
											"end": 8671,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8662,
											"end": 8663,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8659,
											"end": 8672,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "472"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8735,
											"end": 8753,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8715,
											"end": 8754,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8687,
											"end": 8689,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8680,
											"end": 8690,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "470"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "tag",
											"source": 10,
											"value": "472"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8798,
											"end": 8799,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8780,
											"end": 8796,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8780,
											"end": 8796,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8773,
											"end": 8800,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8556,
											"end": 8806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "tag",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8940,
											"end": 8943,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8978,
											"end": 8984,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8972,
											"end": 8985,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "474"
										},
										{
											"begin": 9053,
											"end": 9059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9048,
											"end": 9051,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9041,
											"end": 9045,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9033,
											"end": 9039,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9029,
											"end": 9046,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "421"
										},
										{
											"begin": 8994,
											"end": 9060,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "tag",
											"source": 10,
											"value": "474"
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8811,
											"end": 9098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "tag",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9610,
											"end": 9612,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9599,
											"end": 9608,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9573,
											"end": 9577,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9642,
											"end": 9648,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9636,
											"end": 9649,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9685,
											"end": 9691,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9680,
											"end": 9682,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9669,
											"end": 9678,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9665,
											"end": 9683,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9658,
											"end": 9692,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 9773,
											"end": 9779,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9768,
											"end": 9770,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9757,
											"end": 9766,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9753,
											"end": 9771,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9748,
											"end": 9750,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9740,
											"end": 9746,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9736,
											"end": 9751,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "421"
										},
										{
											"begin": 9701,
											"end": 9780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "tag",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9841,
											"end": 9843,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 9820,
											"end": 9835,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9816,
											"end": 9845,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9848,
											"end": 9850,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9797,
											"end": 9851,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9797,
											"end": 9851,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9857,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									],
									".data": {
										"0ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B": "6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3",
										"0C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4": "c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7",
										"F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E": "92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"APY(uint256)": "186cb65b",
							"APYPer(uint256)": "897b3a68",
							"AdminAddToken(uint256)": "c0cd40ee",
							"BurnAmount(address)": "22b72666",
							"ClaimRewards(address)": "0178be5f",
							"DepositTokens(address,uint256,uint256,uint256)": "10c404da",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"InterestAmount(address)": "662b12c9",
							"RewardAmount(address)": "777b4cd8",
							"SetAPY(uint256,uint256,uint256)": "21736665",
							"SetRewardPersentage(uint256,uint256,uint256)": "d6f80a25",
							"Tokens(address)": "0deef63a",
							"WithdrawTokens(address)": "9131a05a",
							"getTaxPenalty()": "2e886f1f",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setTexAndPenalty(uint256,uint256)": "264b4af6",
							"totalStakedTokens()": "3ae73259",
							"transferOwnership(address)": "f2fde38b",
							"viewBurnRewards(address)": "032ad8fb",
							"viewRewards(address)": "da40ef80"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"APYPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Month1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month3\",\"type\":\"uint256\"}],\"name\":\"SetAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Month1Per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month2Per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month3Per\",\"type\":\"uint256\"}],\"name\":\"SetRewardPersentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"setTexAndPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"viewBurnRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"viewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingFinal.sol\":\"TokenStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/Staking/StakingFinal.sol\":{\"keccak256\":\"0x3a82b59b67d932cf4935f7400e7e496e64b70e81966797e981f673dd0d20777b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28b8f7c6b5c5d33bc9b2f529c9b3ed8eb3876a5db3245628c4bbbb041f4dbae2\",\"dweb:/ipfs/QmZypPKDtkpxHe4ENLGoqPYRdsUnPNwD8iELTtWZoMZ65o\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1031,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1033,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "ownerAddress",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1035,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "totalStakedTokens",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 1037,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Check",
								"offset": 0,
								"slot": "4",
								"type": "t_bool"
							},
							{
								"astId": 1039,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Tax",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1041,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "penalty",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 1057,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Details",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Staker)1052_storage)"
							},
							{
								"astId": 1061,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "InterestAmount",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1065,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "APY",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 1069,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "APYPer",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 1073,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Tokens",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1077,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "RewardAmount",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1081,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "BurnAmount",
								"offset": 0,
								"slot": "13",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)1052_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct TokenStaking.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1052_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)1052_storage": {
								"encoding": "inplace",
								"label": "struct TokenStaking.Staker",
								"members": [
									{
										"astId": 1043,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "depositTokens",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1045,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "stakeTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1047,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "StakeMonth",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 1049,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "EarnPersentage",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 1051,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "check",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1006
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1007,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1006,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1006
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 996,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1875:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2141:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 985,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nameLocations": [
											"737:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 984,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "931:8:3",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "940:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "906:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nameLocations": [
															"794:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1168:12:3",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1181:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1143:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nameLocations": [
															"1009:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1852:9:3",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2037:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2045:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2012:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nameLocations": [
															"1505:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2239:9:3",
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2346:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2354:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2321:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nameLocations": [
															"2124:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2579:9:3",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2828:7:3",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2836:8:3",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2803:18:3",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nameLocations": [
															"2440:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3145:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3174:6:3",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3259:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nameLocations": [
															"2921:12:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4207:12:3",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4286:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4363:6:3",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nameLocations": [
															"3776:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						]
					},
					"id": 624,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 624,
							"sourceUnit": 1019,
							"src": "133:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 512,
										"name": "IERC165",
										"nameLocations": [
											"271:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1018,
										"src": "271:7:4"
									},
									"id": 513,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 623,
							"linearizedBaseContracts": [
								623,
								1018
							],
							"name": "IERC721",
							"nameLocation": "260:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 522,
									"name": "Transfer",
									"nameLocation": "384:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "393:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "415:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "435:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:4"
									},
									"src": "378:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 531,
									"name": "Approval",
									"nameLocation": "571:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "580:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "603:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "629:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:4"
									},
									"src": "565:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 540,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "803:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "826:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "852:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:4"
									},
									"src": "782:85:4"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "973:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:4"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "1011:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:4"
									},
									"scope": 623,
									"src": "954:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1227:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:4"
									},
									"scope": 623,
									"src": "1170:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1844:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1866:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1886:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1911:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:4"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:4"
									},
									"scope": 623,
									"src": "1809:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2701:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2721:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:4"
									},
									"scope": 623,
									"src": "2644:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3526:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3548:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3568:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:4"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:4"
									},
									"scope": 623,
									"src": "3495:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4079:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4091:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:4"
									},
									"scope": 623,
									"src": "4062:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4464:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:4"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:4"
									},
									"scope": 623,
									"src": "4437:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4678:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4718:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:4"
									},
									"scope": 623,
									"src": "4657:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4911:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4926:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:4"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4967:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:4"
									},
									"scope": 623,
									"src": "4885:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 624,
							"src": "250:4725:4",
							"usedErrors": []
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						]
					},
					"id": 655,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 625,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 655,
							"sourceUnit": 624,
							"src": "154:24:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 628,
										"name": "IERC721",
										"nameLocations": [
											"348:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 623,
										"src": "348:7:5"
									},
									"id": 629,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:5"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 654,
							"linearizedBaseContracts": [
								654,
								623,
								1018
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 630,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 635,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:5"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "495:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:5"
									},
									"scope": 654,
									"src": "449:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "715:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "730:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:5"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "768:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:5"
									},
									"scope": 654,
									"src": "686:91:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 646,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "974:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:5"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1012:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:5"
									},
									"scope": 654,
									"src": "952:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 655,
							"src": "317:706:5",
							"usedErrors": []
						}
					],
					"src": "129:895:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							984
						]
					},
					"id": 985,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 656,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 657,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 984,
							"linearizedBaseContracts": [
								984
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1241:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 665,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "1465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1473:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1478:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 664,
												"id": 670,
												"nodeType": "Return",
												"src": "1458:30:6"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1195:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:6"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1235:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:6"
									},
									"scope": 984,
									"src": "1175:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "2483:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 683,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 681,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2515:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 686,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2526:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 680,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 690,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:6"
											},
											{
												"assignments": [
													692,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 692,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 705,
														"src": "2578:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 691,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 699,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 693,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 675,
																"src": "2596:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2606:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 695,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2618:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 701,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "2647:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:6"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2431:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2458:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:6"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:6"
									},
									"scope": 984,
									"src": "2412:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "3555:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 717,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "3594:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "3602:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 716,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "3572:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 715,
												"id": 722,
												"nodeType": "Return",
												"src": "3565:79:6"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3504:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:6"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:6"
									},
									"scope": 984,
									"src": "3466:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "4020:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 737,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "4059:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 738,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "4067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 740,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "4076:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 736,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4037:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 735,
												"id": 742,
												"nodeType": "Return",
												"src": "4030:59:6"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3904:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3928:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3955:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 730,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:6"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "4006:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:6"
									},
									"scope": 984,
									"src": "3873:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 763,
										"nodeType": "Block",
										"src": "4601:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 757,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 758,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4648:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 759,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "4654:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 756,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4618:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 755,
												"id": 762,
												"nodeType": "Return",
												"src": "4611:94:6"
											}
										]
									},
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4498:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4522:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 748,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4549:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:6"
									},
									"returnParameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4587:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 753,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:6"
									},
									"scope": 984,
									"src": "4458:254:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "5139:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 781,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 779,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 782,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 783,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5171:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 784,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5182:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 778,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:6"
											},
											{
												"assignments": [
													790,
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 790,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5241:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 789,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5255:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 791,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 799,
												"initialValue": {
													"arguments": [
														{
															"id": 797,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "5308:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 793,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "5282:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5289:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 795,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5301:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 801,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "5357:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 802,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 790,
															"src": "5365:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 803,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "5374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 804,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "5386:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 800,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "5330:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 777,
												"id": 806,
												"nodeType": "Return",
												"src": "5323:76:6"
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5024:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5051:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5074:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 772,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:6"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5125:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 775,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:6"
									},
									"scope": 984,
									"src": "4960:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "5683:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 819,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 811,
															"src": "5719:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 820,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "5727:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 818,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															825,
															854
														],
														"referencedDeclaration": 854,
														"src": "5700:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 817,
												"id": 823,
												"nodeType": "Return",
												"src": "5693:80:6"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5611:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 812,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:6"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5669:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 815,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:6"
									},
									"scope": 984,
									"src": "5583:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 853,
										"nodeType": "Block",
										"src": "6122:168:6",
										"statements": [
											{
												"assignments": [
													838,
													840
												],
												"declarations": [
													{
														"constant": false,
														"id": 838,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6133:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 837,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 840,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6147:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 839,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 845,
												"initialValue": {
													"arguments": [
														{
															"id": 843,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "6192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 841,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6174:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6181:10:6",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 847,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 848,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "6249:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 849,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "6258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 850,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "6270:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 846,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "6214:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 836,
												"id": 852,
												"nodeType": "Return",
												"src": "6207:76:6"
											}
										]
									},
									"documentation": {
										"id": 826,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 854,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6001:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6025:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 829,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6052:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 831,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:6"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6108:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 834,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:6"
									},
									"scope": 984,
									"src": "5964:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 870,
										"nodeType": "Block",
										"src": "6566:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 865,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "6604:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "6612:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 864,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															871,
															900
														],
														"referencedDeclaration": 900,
														"src": "6583:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 863,
												"id": 869,
												"nodeType": "Return",
												"src": "6576:84:6"
											}
										]
									},
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6499:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6515:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 858,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:6"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6552:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:6"
									},
									"scope": 984,
									"src": "6469:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 899,
										"nodeType": "Block",
										"src": "7008:170:6",
										"statements": [
											{
												"assignments": [
													884,
													886
												],
												"declarations": [
													{
														"constant": false,
														"id": 884,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7019:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 883,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 886,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7033:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 885,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 891,
												"initialValue": {
													"arguments": [
														{
															"id": 889,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 876,
															"src": "7080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 887,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7060:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7067:12:6",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7129:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 894,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "7137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 895,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 886,
															"src": "7146:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 896,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "7158:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 892,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "7102:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 882,
												"id": 898,
												"nodeType": "Return",
												"src": "7095:76:6"
											}
										]
									},
									"documentation": {
										"id": 872,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 900,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6892:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6916:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 875,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6943:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 877,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:6"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6994:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 880,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:6"
									},
									"scope": 984,
									"src": "6853:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 938,
										"nodeType": "Block",
										"src": "7660:434:6",
										"statements": [
											{
												"condition": {
													"id": 914,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 905,
													"src": "7674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 936,
													"nodeType": "Block",
													"src": "8030:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 932,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "8052:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 933,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 909,
																		"src": "8064:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 931,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8044:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 935,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:6"
														}
													]
												},
												"id": 937,
												"nodeType": "IfStatement",
												"src": "7670:418:6",
												"trueBody": {
													"id": 930,
													"nodeType": "Block",
													"src": "7683:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 915,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "7701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7712:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 927,
															"nodeType": "IfStatement",
															"src": "7697:286:6",
															"trueBody": {
																"id": 926,
																"nodeType": "Block",
																"src": "7725:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 921,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 903,
																							"src": "7927:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 920,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 672,
																						"src": "7916:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 922,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 923,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 919,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 925,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 928,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 907,
																"src": "8003:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 913,
															"id": 929,
															"nodeType": "Return",
															"src": "7996:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 901,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7511:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7535:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 904,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7557:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 906,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7590:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 908,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:6"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7646:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 911,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:6"
									},
									"scope": 984,
									"src": "7466:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "8475:135:6",
										"statements": [
											{
												"condition": {
													"id": 951,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 942,
													"src": "8489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 960,
													"nodeType": "Block",
													"src": "8546:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "8568:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 957,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 946,
																		"src": "8580:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 955,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8560:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 959,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:6"
														}
													]
												},
												"id": 961,
												"nodeType": "IfStatement",
												"src": "8485:119:6",
												"trueBody": {
													"id": 954,
													"nodeType": "Block",
													"src": "8498:42:6",
													"statements": [
														{
															"expression": {
																"id": 952,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "8519:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 950,
															"id": 953,
															"nodeType": "Return",
															"src": "8512:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 963,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8350:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 941,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8372:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8405:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 945,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:6"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8461:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 948,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:6"
									},
									"scope": 984,
									"src": "8315:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "8699:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 970,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 965,
															"src": "8775:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8786:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 972,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 980,
													"nodeType": "Block",
													"src": "9105:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 977,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 967,
																		"src": "9126:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 976,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 979,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:6"
														}
													]
												},
												"id": 981,
												"nodeType": "IfStatement",
												"src": "8771:379:6",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "8798:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:6",
																	"valueSize": 1
																}
															],
															"id": 974,
															"nodeType": "InlineAssembly",
															"src": "8947:142:6"
														}
													]
												}
											}
										]
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8633:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 964,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8658:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 966,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:6"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:6"
									},
									"scope": 984,
									"src": "8616:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 985,
							"src": "194:8964:6",
							"usedErrors": []
						}
					],
					"src": "101:9058:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1006
						]
					},
					"id": 1007,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 986,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 987,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1006,
							"linearizedBaseContracts": [
								1006
							],
							"name": "Context",
							"nameLocation": "626:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 995,
										"nodeType": "Block",
										"src": "702:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 992,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 991,
												"id": 994,
												"nodeType": "Return",
												"src": "712:17:7"
											}
										]
									},
									"id": 996,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:7"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "693:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:7"
									},
									"scope": 1006,
									"src": "640:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1004,
										"nodeType": "Block",
										"src": "809:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1001,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1000,
												"id": 1003,
												"nodeType": "Return",
												"src": "819:15:7"
											}
										]
									},
									"id": 1005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:7"
									},
									"returnParameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "793:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 998,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:7"
									},
									"scope": 1006,
									"src": "742:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1007,
							"src": "608:235:7",
							"usedErrors": []
						}
					],
					"src": "86:758:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						]
					},
					"id": 1019,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1008,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1009,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1018,
							"linearizedBaseContracts": [
								1018
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1017,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1011,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1014,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1018,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1019,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"contracts/Staking/StakingFinal.sol": {
				"ast": {
					"absolutePath": "contracts/Staking/StakingFinal.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"Context": [
							1006
						],
						"IERC165": [
							1018
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						],
						"TokenStaking": [
							2259
						]
					},
					"id": 2260,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1020,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1021,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2260,
							"sourceUnit": 113,
							"src": "81:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1022,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2260,
							"sourceUnit": 508,
							"src": "134:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1023,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2260,
							"sourceUnit": 655,
							"src": "200:79:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1024,
										"name": "Ownable",
										"nameLocations": [
											"306:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "306:7:9"
									},
									"id": 1025,
									"nodeType": "InheritanceSpecifier",
									"src": "306:7:9"
								}
							],
							"canonicalName": "TokenStaking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2259,
							"linearizedBaseContracts": [
								2259,
								112,
								1006
							],
							"name": "TokenStaking",
							"nameLocation": "290:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1029,
									"libraryName": {
										"id": 1026,
										"name": "SafeERC20",
										"nameLocations": [
											"326:9:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "326:9:9"
									},
									"nodeType": "UsingForDirective",
									"src": "320:27:9",
									"typeName": {
										"id": 1028,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1027,
											"name": "IERC20",
											"nameLocations": [
												"340:6:9"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "340:6:9"
										},
										"referencedDeclaration": 190,
										"src": "340:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 1031,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "367:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "352:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1030,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "352:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1033,
									"mutability": "mutable",
									"name": "ownerAddress",
									"nameLocation": "393:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "385:20:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1032,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "385:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "3ae73259",
									"id": 1035,
									"mutability": "mutable",
									"name": "totalStakedTokens",
									"nameLocation": "426:17:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "411:32:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1034,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "411:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1037,
									"mutability": "mutable",
									"name": "Check",
									"nameLocation": "454:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "449:10:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1036,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "449:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1039,
									"mutability": "mutable",
									"name": "Tax",
									"nameLocation": "473:3:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "465:11:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1038,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "465:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1041,
									"mutability": "mutable",
									"name": "penalty",
									"nameLocation": "490:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "482:15:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1040,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "482:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "TokenStaking.Staker",
									"id": 1052,
									"members": [
										{
											"constant": false,
											"id": 1043,
											"mutability": "mutable",
											"name": "depositTokens",
											"nameLocation": "535:13:9",
											"nodeType": "VariableDeclaration",
											"scope": 1052,
											"src": "527:21:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1042,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "527:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1045,
											"mutability": "mutable",
											"name": "stakeTime",
											"nameLocation": "566:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1052,
											"src": "558:17:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1044,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1047,
											"mutability": "mutable",
											"name": "StakeMonth",
											"nameLocation": "593:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1052,
											"src": "585:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1046,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "585:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1049,
											"mutability": "mutable",
											"name": "EarnPersentage",
											"nameLocation": "621:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 1052,
											"src": "613:22:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1048,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "613:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1051,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "650:5:9",
											"nodeType": "VariableDeclaration",
											"scope": 1052,
											"src": "645:10:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1050,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "645:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "510:6:9",
									"nodeType": "StructDefinition",
									"scope": 2259,
									"src": "503:159:9",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 1057,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "701:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "667:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
										"typeString": "mapping(address => struct TokenStaking.Staker)"
									},
									"typeName": {
										"id": 1056,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1053,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "675:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "667:26:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
											"typeString": "mapping(address => struct TokenStaking.Staker)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1055,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1054,
												"name": "Staker",
												"nameLocations": [
													"686:6:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1052,
												"src": "686:6:9"
											},
											"referencedDeclaration": 1052,
											"src": "686:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1052_storage_ptr",
												"typeString": "struct TokenStaking.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "662b12c9",
									"id": 1061,
									"mutability": "mutable",
									"name": "InterestAmount",
									"nameLocation": "749:14:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "714:49:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1060,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1058,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "722:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "714:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1059,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "733:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "186cb65b",
									"id": 1065,
									"mutability": "mutable",
									"name": "APY",
									"nameLocation": "804:3:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "769:38:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1064,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1062,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "777:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "769:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1063,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "788:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "897b3a68",
									"id": 1069,
									"mutability": "mutable",
									"name": "APYPer",
									"nameLocation": "848:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "813:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1068,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1066,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "821:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "813:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1067,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "832:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0deef63a",
									"id": 1073,
									"mutability": "mutable",
									"name": "Tokens",
									"nameLocation": "895:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "860:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1072,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1070,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "868:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "860:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1071,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "879:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "777b4cd8",
									"id": 1077,
									"mutability": "mutable",
									"name": "RewardAmount",
									"nameLocation": "942:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "907:47:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1076,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1074,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "915:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "907:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1075,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "926:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "22b72666",
									"id": 1081,
									"mutability": "mutable",
									"name": "BurnAmount",
									"nameLocation": "995:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 2259,
									"src": "960:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1080,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1078,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "968:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "960:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1079,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "979:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "1279:80:9",
										"statements": [
											{
												"expression": {
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1086,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "1289:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1087,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "1304:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1289:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1089,
												"nodeType": "ExpressionStatement",
												"src": "1289:28:9"
											},
											{
												"expression": {
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1090,
														"name": "ownerAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "1327:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1091,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1342:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1346:6:9",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1342:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1327:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1094,
												"nodeType": "ExpressionStatement",
												"src": "1327:25:9"
											}
										]
									},
									"id": 1096,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "1264:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "1256:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1082,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:23:9"
									},
									"returnParameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1279:0:9"
									},
									"scope": 2259,
									"src": "1244:115:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1123,
										"nodeType": "Block",
										"src": "1643:175:9",
										"statements": [
											{
												"expression": {
													"id": 1108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1103,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "1653:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1106,
														"indexExpression": {
															"expression": {
																"id": 1104,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1660:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1664:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1660:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1653:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1107,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "1675:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1653:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1109,
												"nodeType": "ExpressionStatement",
												"src": "1653:29:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1114,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1743:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1747:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1743:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1118,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1775:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TokenStaking_$2259",
																		"typeString": "contract TokenStaking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TokenStaking_$2259",
																		"typeString": "contract TokenStaking"
																	}
																],
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1767:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1116,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1767:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1767:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1120,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1098,
															"src": "1794:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1111,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "1699:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1110,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1692:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1692:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1713:16:9",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "1692:37:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1692:119:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1122,
												"nodeType": "ExpressionStatement",
												"src": "1692:119:9"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 1124,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1101,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1100,
												"name": "onlyOwner",
												"nameLocations": [
													"1633:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1633:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1633:9:9"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1595:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1617:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1124,
												"src": "1609:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1097,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:17:9"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1643:0:9"
									},
									"scope": 2259,
									"src": "1586:232:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1456,
										"nodeType": "Block",
										"src": "2256:2372:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1136,
																	"name": "Tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1073,
																	"src": "2274:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1138,
																"indexExpression": {
																	"id": 1137,
																	"name": "ownerAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "2281:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2274:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1139,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2297:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2274:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365205761697420212121",
															"id": 1141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2300:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad",
																"typeString": "literal_string \"Please Wait !!!\""
															},
															"value": "Please Wait !!!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad",
																"typeString": "literal_string \"Please Wait !!!\""
															}
														],
														"id": 1135,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2266:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2266:52:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1143,
												"nodeType": "ExpressionStatement",
												"src": "2266:52:9"
											},
											{
												"assignments": [
													1145
												],
												"declarations": [
													{
														"constant": false,
														"id": 1145,
														"mutability": "mutable",
														"name": "_amount",
														"nameLocation": "2336:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1456,
														"src": "2328:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1144,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2328:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1149,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1146,
														"name": "_payment",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1128,
														"src": "2346:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "31303030303030303030",
														"id": 1147,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2357:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000_by_1",
															"typeString": "int_const 1000000000"
														},
														"value": "1000000000"
													},
													"src": "2346:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2328:39:9"
											},
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1150,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "2381:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
															}
														},
														"id": 1152,
														"indexExpression": {
															"id": 1151,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "2389:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2381:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1052_storage",
															"typeString": "struct TokenStaking.Staker storage ref"
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2393:5:9",
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1051,
													"src": "2381:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1444,
													"nodeType": "Block",
													"src": "3374:1179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1305,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1299,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1295,
																					"name": "StakeMonth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1130,
																					"src": "3413:10:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"baseExpression": {
																						"id": 1296,
																						"name": "APY",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1065,
																						"src": "3427:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																							"typeString": "mapping(uint256 => uint256)"
																						}
																					},
																					"id": 1298,
																					"indexExpression": {
																						"hexValue": "31",
																						"id": 1297,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3431:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3427:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3413:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1304,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1300,
																					"name": "StakeMonth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1130,
																					"src": "3457:10:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"baseExpression": {
																						"id": 1301,
																						"name": "APY",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1065,
																						"src": "3471:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																							"typeString": "mapping(uint256 => uint256)"
																						}
																					},
																					"id": 1303,
																					"indexExpression": {
																						"hexValue": "32",
																						"id": 1302,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3475:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_2_by_1",
																							"typeString": "int_const 2"
																						},
																						"value": "2"
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3471:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3457:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3413:64:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1310,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1306,
																				"name": "StakeMonth",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1130,
																				"src": "3501:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"baseExpression": {
																					"id": 1307,
																					"name": "APY",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1065,
																					"src": "3515:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																						"typeString": "mapping(uint256 => uint256)"
																					}
																				},
																				"id": 1309,
																				"indexExpression": {
																					"hexValue": "33",
																					"id": 1308,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3519:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_3_by_1",
																						"typeString": "int_const 3"
																					},
																					"value": "3"
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3515:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3501:20:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3413:108:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"id": 1312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3539:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		},
																		"value": "Enter Right StakeMonth"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		}
																	],
																	"id": 1294,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3388:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3388:189:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1314,
															"nodeType": "ExpressionStatement",
															"src": "3388:189:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1326,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1322,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1318,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1316,
																					"name": "EarnPersentage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1132,
																					"src": "3616:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "313030",
																					"id": 1317,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3634:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_100_by_1",
																						"typeString": "int_const 100"
																					},
																					"value": "100"
																				},
																				"src": "3616:21:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1319,
																					"name": "EarnPersentage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1132,
																					"src": "3661:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "3735",
																					"id": 1320,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3679:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_75_by_1",
																						"typeString": "int_const 75"
																					},
																					"value": "75"
																				},
																				"src": "3661:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3616:65:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1323,
																				"name": "EarnPersentage",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1132,
																				"src": "3705:14:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "3530",
																				"id": 1324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3723:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_50_by_1",
																					"typeString": "int_const 50"
																				},
																				"value": "50"
																			},
																			"src": "3705:20:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3616:109:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"id": 1327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3743:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		},
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		}
																	],
																	"id": 1315,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3591:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1328,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3591:194:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1329,
															"nodeType": "ExpressionStatement",
															"src": "3591:194:9"
														},
														{
															"assignments": [
																1331
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1331,
																	"mutability": "mutable",
																	"name": "AdminFee",
																	"nameLocation": "3807:8:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1444,
																	"src": "3799:16:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1330,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3799:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1338,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1332,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1145,
																				"src": "3819:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1333,
																				"name": "Tax",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1039,
																				"src": "3829:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3819:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1335,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3818:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3836:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "3818:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3799:41:9"
														},
														{
															"expression": {
																"id": 1352,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1339,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1057,
																		"src": "3854:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																			"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																		}
																	},
																	"id": 1341,
																	"indexExpression": {
																		"id": 1340,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1126,
																		"src": "3862:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3854:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1052_storage",
																		"typeString": "struct TokenStaking.Staker storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1343,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1145,
																				"src": "3892:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1344,
																				"name": "AdminFee",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1331,
																				"src": "3902:8:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3892:18:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"id": 1346,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "3928:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3934:9:9",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "3928:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1348,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1130,
																			"src": "3961:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1349,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1132,
																			"src": "3989:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "74727565",
																			"id": 1350,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4021:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1342,
																		"name": "Staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1052,
																		"src": "3868:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Staker_$1052_storage_ptr_$",
																			"typeString": "type(struct TokenStaking.Staker storage pointer)"
																		}
																	},
																	"id": 1351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3868:171:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1052_memory_ptr",
																		"typeString": "struct TokenStaking.Staker memory"
																	}
																},
																"src": "3854:185:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1052_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1353,
															"nodeType": "ExpressionStatement",
															"src": "3854:185:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1361,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1354,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "4057:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1356,
																		"indexExpression": {
																			"id": 1355,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1126,
																			"src": "4065:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4057:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1357,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4069:10:9",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1047,
																	"src": "4057:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1358,
																		"name": "APY",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1065,
																		"src": "4083:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1360,
																	"indexExpression": {
																		"hexValue": "31",
																		"id": 1359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4087:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4083:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4057:32:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1379,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1057,
																				"src": "4196:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1381,
																			"indexExpression": {
																				"id": 1380,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1126,
																				"src": "4204:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4196:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1052_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1382,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4208:10:9",
																		"memberName": "StakeMonth",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1047,
																		"src": "4196:22:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1383,
																			"name": "APY",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1065,
																			"src": "4222:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																				"typeString": "mapping(uint256 => uint256)"
																			}
																		},
																		"id": 1385,
																		"indexExpression": {
																			"hexValue": "32",
																			"id": 1384,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4226:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4222:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4196:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1404,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "4335:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1406,
																				"indexExpression": {
																					"id": 1405,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "4343:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4335:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1407,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4347:10:9",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1047,
																			"src": "4335:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1408,
																				"name": "APY",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1065,
																				"src": "4361:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																					"typeString": "mapping(uint256 => uint256)"
																				}
																			},
																			"id": 1410,
																			"indexExpression": {
																				"hexValue": "33",
																				"id": 1409,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4365:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_3_by_1",
																					"typeString": "int_const 3"
																				},
																				"value": "3"
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4361:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4335:32:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1429,
																	"nodeType": "IfStatement",
																	"src": "4331:133:9",
																	"trueBody": {
																		"id": 1428,
																		"nodeType": "Block",
																		"src": "4369:95:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 1426,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1412,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1061,
																							"src": "4387:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1414,
																						"indexExpression": {
																							"id": 1413,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1126,
																							"src": "4402:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "4387:18:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1425,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1422,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1417,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"id": 1415,
																													"name": "_amount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1145,
																													"src": "4410:7:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"id": 1416,
																													"name": "AdminFee",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1331,
																													"src": "4420:8:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "4410:18:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1418,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "4409:20:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"baseExpression": {
																											"id": 1419,
																											"name": "APYPer",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1069,
																											"src": "4432:6:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																												"typeString": "mapping(uint256 => uint256)"
																											}
																										},
																										"id": 1421,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1420,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "4439:1:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "4432:9:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "4409:32:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1423,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4408:34:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1424,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4445:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "4408:41:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "4387:62:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1427,
																				"nodeType": "ExpressionStatement",
																				"src": "4387:62:9"
																			}
																		]
																	}
																},
																"id": 1430,
																"nodeType": "IfStatement",
																"src": "4192:272:9",
																"trueBody": {
																	"id": 1403,
																	"nodeType": "Block",
																	"src": "4230:95:9",
																	"statements": [
																		{
																			"expression": {
																				"id": 1401,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1387,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1061,
																						"src": "4248:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1389,
																					"indexExpression": {
																						"id": 1388,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1126,
																						"src": "4263:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "4248:18:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1400,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1397,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1392,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"id": 1390,
																												"name": "_amount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1145,
																												"src": "4271:7:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"id": 1391,
																												"name": "AdminFee",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1331,
																												"src": "4281:8:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "4271:18:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1393,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "4270:20:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1394,
																										"name": "APYPer",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1069,
																										"src": "4293:6:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																											"typeString": "mapping(uint256 => uint256)"
																										}
																									},
																									"id": 1396,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1395,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4300:1:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "4293:9:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "4270:32:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1398,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "4269:34:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1399,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4306:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "4269:41:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "4248:62:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1402,
																			"nodeType": "ExpressionStatement",
																			"src": "4248:62:9"
																		}
																	]
																}
															},
															"id": 1431,
															"nodeType": "IfStatement",
															"src": "4053:411:9",
															"trueBody": {
																"id": 1378,
																"nodeType": "Block",
																"src": "4091:95:9",
																"statements": [
																	{
																		"expression": {
																			"id": 1376,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1362,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1061,
																					"src": "4109:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1364,
																				"indexExpression": {
																					"id": 1363,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "4124:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "4109:18:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1375,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1372,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1367,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"id": 1365,
																											"name": "_amount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1145,
																											"src": "4132:7:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "-",
																										"rightExpression": {
																											"id": 1366,
																											"name": "AdminFee",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1331,
																											"src": "4142:8:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "4132:18:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1368,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "4131:20:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1369,
																									"name": "APYPer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1069,
																									"src": "4154:6:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																										"typeString": "mapping(uint256 => uint256)"
																									}
																								},
																								"id": 1371,
																								"indexExpression": {
																									"hexValue": "31",
																									"id": 1370,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4161:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4154:9:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "4131:32:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1373,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "4130:34:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1374,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4167:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "4130:41:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4109:62:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1377,
																		"nodeType": "ExpressionStatement",
																		"src": "4109:62:9"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1436,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1126,
																		"src": "4515:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1439,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "4527:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$2259",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$2259",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1438,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4519:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1437,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4519:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4519:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1441,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "4534:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1433,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1031,
																				"src": "4484:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1432,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4477:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1434,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4477:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4498:16:9",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "4477:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4477:65:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1443,
															"nodeType": "ExpressionStatement",
															"src": "4477:65:9"
														}
													]
												},
												"id": 1445,
												"nodeType": "IfStatement",
												"src": "2377:2176:9",
												"trueBody": {
													"id": 1293,
													"nodeType": "Block",
													"src": "2400:968:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1172,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1166,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1164,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1162,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1160,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1155,
																														"name": "Details",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1057,
																														"src": "2424:7:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																															"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																														}
																													},
																													"id": 1157,
																													"indexExpression": {
																														"id": 1156,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1126,
																														"src": "2432:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "2424:11:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Staker_$1052_storage",
																														"typeString": "struct TokenStaking.Staker storage ref"
																													}
																												},
																												"id": 1158,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "2436:10:9",
																												"memberName": "StakeMonth",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1047,
																												"src": "2424:22:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "*",
																											"rightExpression": {
																												"hexValue": "3330",
																												"id": 1159,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "2449:2:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_30_by_1",
																													"typeString": "int_const 30"
																												},
																												"value": "30"
																											},
																											"src": "2424:27:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "*",
																										"rightExpression": {
																											"hexValue": "3234",
																											"id": 1161,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "2454:2:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_24_by_1",
																												"typeString": "int_const 24"
																											},
																											"value": "24"
																										},
																										"src": "2424:32:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3630",
																										"id": 1163,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "2459:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_60_by_1",
																											"typeString": "int_const 60"
																										},
																										"value": "60"
																									},
																									"src": "2424:37:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3630",
																									"id": 1165,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "2464:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_60_by_1",
																										"typeString": "int_const 60"
																									},
																									"value": "60"
																								},
																								"src": "2424:42:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1167,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2423:44:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1168,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1057,
																								"src": "2470:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1170,
																							"indexExpression": {
																								"id": 1169,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1126,
																								"src": "2478:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "2470:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1052_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1171,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "2482:9:9",
																						"memberName": "stakeTime",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1045,
																						"src": "2470:21:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2423:68:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1173,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2422:70:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"expression": {
																				"id": 1174,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "2494:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2500:9:9",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "2494:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2422:87:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"id": 1177,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2510:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		},
																		"value": "Your Time Period Complete."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		}
																	],
																	"id": 1154,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2414:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2414:125:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1179,
															"nodeType": "ExpressionStatement",
															"src": "2414:125:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1181,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "2578:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1183,
																				"indexExpression": {
																					"id": 1182,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "2586:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2578:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1184,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2590:10:9",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1047,
																			"src": "2578:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1185,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1130,
																			"src": "2604:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2578:36:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"id": 1187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2632:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		},
																		"value": "Enter Right StakeMonth"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		}
																	],
																	"id": 1180,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2553:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2553:117:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1189,
															"nodeType": "ExpressionStatement",
															"src": "2553:117:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1191,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "2709:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1193,
																				"indexExpression": {
																					"id": 1192,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "2717:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2709:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1194,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2721:14:9",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1049,
																			"src": "2709:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1195,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1132,
																			"src": "2739:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2709:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"id": 1197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2771:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		},
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		}
																	],
																	"id": 1190,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2684:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2684:129:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1199,
															"nodeType": "ExpressionStatement",
															"src": "2684:129:9"
														},
														{
															"expression": {
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1200,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "2827:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1202,
																		"indexExpression": {
																			"id": 1201,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1126,
																			"src": "2835:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2827:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "2839:13:9",
																	"memberName": "depositTokens",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1043,
																	"src": "2827:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1209,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1204,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1057,
																				"src": "2855:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1206,
																			"indexExpression": {
																				"id": 1205,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1126,
																				"src": "2863:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2855:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1052_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1207,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2867:13:9",
																		"memberName": "depositTokens",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1043,
																		"src": "2855:25:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1208,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "2883:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2855:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2827:63:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1211,
															"nodeType": "ExpressionStatement",
															"src": "2827:63:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1219,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1212,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "2908:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1214,
																		"indexExpression": {
																			"id": 1213,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1126,
																			"src": "2916:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2908:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1215,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2920:10:9",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1047,
																	"src": "2908:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1216,
																		"name": "APY",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1065,
																		"src": "2934:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1218,
																	"indexExpression": {
																		"hexValue": "31",
																		"id": 1217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2938:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2934:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2908:32:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1241,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1234,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1057,
																				"src": "3035:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1236,
																			"indexExpression": {
																				"id": 1235,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1126,
																				"src": "3043:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3035:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1052_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1237,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3047:10:9",
																		"memberName": "StakeMonth",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1047,
																		"src": "3035:22:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1238,
																			"name": "APY",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1065,
																			"src": "3061:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																				"typeString": "mapping(uint256 => uint256)"
																			}
																		},
																		"id": 1240,
																		"indexExpression": {
																			"hexValue": "32",
																			"id": 1239,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3065:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3061:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3035:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1263,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1256,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "3162:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1258,
																				"indexExpression": {
																					"id": 1257,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "3170:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3162:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1259,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3174:10:9",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1047,
																			"src": "3162:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1260,
																				"name": "APY",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1065,
																				"src": "3188:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																					"typeString": "mapping(uint256 => uint256)"
																				}
																			},
																			"id": 1262,
																			"indexExpression": {
																				"hexValue": "33",
																				"id": 1261,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3192:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_3_by_1",
																					"typeString": "int_const 3"
																				},
																				"value": "3"
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3188:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3162:32:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1278,
																	"nodeType": "IfStatement",
																	"src": "3158:121:9",
																	"trueBody": {
																		"id": 1277,
																		"nodeType": "Block",
																		"src": "3196:83:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 1275,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1264,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1061,
																							"src": "3214:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1266,
																						"indexExpression": {
																							"id": 1265,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1126,
																							"src": "3229:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "3214:18:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "+=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1274,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1271,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1267,
																										"name": "_amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1145,
																										"src": "3237:7:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"baseExpression": {
																											"id": 1268,
																											"name": "APYPer",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1069,
																											"src": "3247:6:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																												"typeString": "mapping(uint256 => uint256)"
																											}
																										},
																										"id": 1270,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1269,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3254:1:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3247:9:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "3237:19:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1272,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3236:21:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1273,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3260:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "3236:28:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3214:50:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1276,
																				"nodeType": "ExpressionStatement",
																				"src": "3214:50:9"
																			}
																		]
																	}
																},
																"id": 1279,
																"nodeType": "IfStatement",
																"src": "3031:248:9",
																"trueBody": {
																	"id": 1255,
																	"nodeType": "Block",
																	"src": "3069:83:9",
																	"statements": [
																		{
																			"expression": {
																				"id": 1253,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1242,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1061,
																						"src": "3087:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1244,
																					"indexExpression": {
																						"id": 1243,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1126,
																						"src": "3102:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "3087:18:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "+=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1252,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1249,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1245,
																									"name": "_amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1145,
																									"src": "3110:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1246,
																										"name": "APYPer",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1069,
																										"src": "3120:6:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																											"typeString": "mapping(uint256 => uint256)"
																										}
																									},
																									"id": 1248,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1247,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3127:1:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3120:9:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3110:19:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1250,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3109:21:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1251,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3133:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "3109:28:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3087:50:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1254,
																			"nodeType": "ExpressionStatement",
																			"src": "3087:50:9"
																		}
																	]
																}
															},
															"id": 1280,
															"nodeType": "IfStatement",
															"src": "2904:375:9",
															"trueBody": {
																"id": 1233,
																"nodeType": "Block",
																"src": "2942:83:9",
																"statements": [
																	{
																		"expression": {
																			"id": 1231,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1220,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1061,
																					"src": "2960:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1222,
																				"indexExpression": {
																					"id": 1221,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1126,
																					"src": "2975:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "2960:18:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1230,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1227,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1223,
																								"name": "_amount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1145,
																								"src": "2983:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1224,
																									"name": "APYPer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1069,
																									"src": "2993:6:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																										"typeString": "mapping(uint256 => uint256)"
																									}
																								},
																								"id": 1226,
																								"indexExpression": {
																									"hexValue": "31",
																									"id": 1225,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3000:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "2993:9:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "2983:19:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1228,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2982:21:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1229,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3006:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "2982:28:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2960:50:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1232,
																		"nodeType": "ExpressionStatement",
																		"src": "2960:50:9"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1285,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1126,
																		"src": "3330:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1288,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3342:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$2259",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$2259",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3334:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1286,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3334:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3334:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1290,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "3349:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1282,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1031,
																				"src": "3299:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1281,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3292:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3292:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3313:16:9",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "3292:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1291,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3292:65:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1292,
															"nodeType": "ExpressionStatement",
															"src": "3292:65:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1446,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "4562:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1448,
														"indexExpression": {
															"id": 1447,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "4569:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4562:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1449,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "4576:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4562:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1451,
												"nodeType": "ExpressionStatement",
												"src": "4562:21:9"
											},
											{
												"expression": {
													"id": 1454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1452,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "4593:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1453,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "4614:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4593:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1455,
												"nodeType": "ExpressionStatement",
												"src": "4593:28:9"
											}
										]
									},
									"functionSelector": "10c404da",
									"id": 1457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DepositTokens",
									"nameLocation": "2123:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2154:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "2146:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "_payment",
												"nameLocation": "2174:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "2166:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2166:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "StakeMonth",
												"nameLocation": "2200:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "2192:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2192:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "EarnPersentage",
												"nameLocation": "2228:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "2220:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2220:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:112:9"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2256:0:9"
									},
									"scope": 2259,
									"src": "2114:2514:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1956,
										"nodeType": "Block",
										"src": "4867:4494:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1463,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1057,
																	"src": "4885:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																		"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																	}
																},
																"id": 1465,
																"indexExpression": {
																	"id": 1464,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1459,
																	"src": "4893:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4885:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1052_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1466,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4897:5:9",
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1051,
															"src": "4885:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4669727374205374616b6520546f6b656e73",
															"id": 1467,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4904:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															},
															"value": "First Stake Tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															}
														],
														"id": 1462,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4877:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4877:48:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1469,
												"nodeType": "ExpressionStatement",
												"src": "4877:48:9"
											},
											{
												"assignments": [
													1471
												],
												"declarations": [
													{
														"constant": false,
														"id": 1471,
														"mutability": "mutable",
														"name": "EarnToken",
														"nameLocation": "4943:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1956,
														"src": "4935:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1470,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4935:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1472,
												"nodeType": "VariableDeclarationStatement",
												"src": "4935:17:9"
											},
											{
												"assignments": [
													1474
												],
												"declarations": [
													{
														"constant": false,
														"id": 1474,
														"mutability": "mutable",
														"name": "BurnToken",
														"nameLocation": "4970:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1956,
														"src": "4962:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1473,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4962:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1475,
												"nodeType": "VariableDeclarationStatement",
												"src": "4962:17:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1485,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1483,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1481,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1476,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1057,
																									"src": "5008:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1478,
																								"indexExpression": {
																									"id": 1477,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1459,
																									"src": "5016:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5008:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1052_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1479,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "5020:10:9",
																							"memberName": "StakeMonth",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1047,
																							"src": "5008:22:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3330",
																							"id": 1480,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "5033:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_30_by_1",
																								"typeString": "int_const 30"
																							},
																							"value": "30"
																						},
																						"src": "5008:27:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3234",
																						"id": 1482,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5038:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_24_by_1",
																							"typeString": "int_const 24"
																						},
																						"value": "24"
																					},
																					"src": "5008:32:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3630",
																					"id": 1484,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5043:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_60_by_1",
																						"typeString": "int_const 60"
																					},
																					"value": "60"
																				},
																				"src": "5008:37:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1486,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5048:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "5008:42:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1488,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5007:44:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1489,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "5054:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1491,
																		"indexExpression": {
																			"id": 1490,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1459,
																			"src": "5062:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5054:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1492,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5066:9:9",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1045,
																	"src": "5054:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5007:68:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1494,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5006:70:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1495,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "5079:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5085:9:9",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "5079:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5006:88:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1921,
													"nodeType": "Block",
													"src": "6692:2455:9",
													"statements": [
														{
															"assignments": [
																1662
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1662,
																	"mutability": "mutable",
																	"name": "InterestAmountperday",
																	"nameLocation": "6714:20:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1921,
																	"src": "6706:28:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1661,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6706:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1663,
															"nodeType": "VariableDeclarationStatement",
															"src": "6706:28:9"
														},
														{
															"assignments": [
																1665
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1665,
																	"mutability": "mutable",
																	"name": "Total",
																	"nameLocation": "6756:5:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1921,
																	"src": "6748:13:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1664,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6748:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1666,
															"nodeType": "VariableDeclarationStatement",
															"src": "6748:13:9"
														},
														{
															"assignments": [
																1668
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1668,
																	"mutability": "mutable",
																	"name": "PenaltyResult",
																	"nameLocation": "6783:13:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1921,
																	"src": "6775:21:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1667,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6775:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1669,
															"nodeType": "VariableDeclarationStatement",
															"src": "6775:21:9"
														},
														{
															"assignments": [
																1671
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1671,
																	"mutability": "mutable",
																	"name": "Stakdays",
																	"nameLocation": "6818:8:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1921,
																	"src": "6810:16:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1670,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6810:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1687,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1678,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1672,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6830:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1673,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "6836:9:9",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6830:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1674,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1057,
																						"src": "6848:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 1676,
																					"indexExpression": {
																						"id": 1675,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1459,
																						"src": "6856:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6848:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1052_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 1677,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "6860:9:9",
																				"memberName": "stakeTime",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1045,
																				"src": "6848:21:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6830:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1679,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6829:41:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			},
																			"id": 1684,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_rational_1440_by_1",
																					"typeString": "int_const 1440"
																				},
																				"id": 1682,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3234",
																					"id": 1680,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6874:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_24_by_1",
																						"typeString": "int_const 24"
																					},
																					"value": "24"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3630",
																					"id": 1681,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6879:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_60_by_1",
																						"typeString": "int_const 60"
																					},
																					"value": "60"
																				},
																				"src": "6874:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1440_by_1",
																					"typeString": "int_const 1440"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1683,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6884:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "6874:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			}
																		}
																	],
																	"id": 1685,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6873:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_86400_by_1",
																		"typeString": "int_const 86400"
																	}
																},
																"src": "6829:58:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6810:77:9"
														},
														{
															"expression": {
																"id": 1700,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1688,
																	"name": "InterestAmountperday",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1662,
																	"src": "6901:20:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1699,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"baseExpression": {
																			"id": 1689,
																			"name": "InterestAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1061,
																			"src": "6940:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 1691,
																		"indexExpression": {
																			"id": 1690,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1459,
																			"src": "6955:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6940:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1697,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1692,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1057,
																							"src": "6978:7:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1694,
																						"indexExpression": {
																							"id": 1693,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "6986:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "6978:11:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$1052_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1695,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6990:10:9",
																					"memberName": "StakeMonth",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1047,
																					"src": "6978:22:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3330",
																					"id": 1696,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7003:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_30_by_1",
																						"typeString": "int_const 30"
																					},
																					"value": "30"
																				},
																				"src": "6978:27:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1698,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6977:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6940:66:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6901:105:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1701,
															"nodeType": "ExpressionStatement",
															"src": "6901:105:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1707,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1702,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "7068:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1704,
																		"indexExpression": {
																			"id": 1703,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1459,
																			"src": "7076:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7068:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1705,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7080:14:9",
																	"memberName": "EarnPersentage",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1049,
																	"src": "7068:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1706,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7098:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "7068:33:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1750,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1057,
																				"src": "7516:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1752,
																			"indexExpression": {
																				"id": 1751,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1459,
																				"src": "7524:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7516:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1052_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1753,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7528:14:9",
																		"memberName": "EarnPersentage",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1049,
																		"src": "7516:26:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3735",
																		"id": 1754,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7546:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_75_by_1",
																			"typeString": "int_const 75"
																		},
																		"value": "75"
																	},
																	"src": "7516:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1834,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "8365:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1836,
																				"indexExpression": {
																					"id": 1835,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1459,
																					"src": "8373:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8365:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1837,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8377:14:9",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1049,
																			"src": "8365:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "3530",
																			"id": 1838,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8395:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_50_by_1",
																				"typeString": "int_const 50"
																			},
																			"value": "50"
																		},
																		"src": "8365:32:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1918,
																	"nodeType": "IfStatement",
																	"src": "8361:776:9",
																	"trueBody": {
																		"id": 1917,
																		"nodeType": "Block",
																		"src": "8399:738:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 1855,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1840,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "8417:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1854,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1851,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1848,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"components": [
																														{
																															"commonType": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															},
																															"id": 1843,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"leftExpression": {
																																"id": 1841,
																																"name": "InterestAmountperday",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1662,
																																"src": "8452:20:9",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"nodeType": "BinaryOperation",
																															"operator": "*",
																															"rightExpression": {
																																"id": 1842,
																																"name": "Stakdays",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1671,
																																"src": "8475:8:9",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"src": "8452:31:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														}
																													],
																													"id": 1844,
																													"isConstant": false,
																													"isInlineArray": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "TupleExpression",
																													"src": "8451:33:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1845,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1077,
																														"src": "8487:12:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1847,
																													"indexExpression": {
																														"id": 1846,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "8500:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "8487:16:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "8451:52:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1849,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "8450:54:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1850,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "8531:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "8450:83:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1852,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8449:85:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1853,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8557:3:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "8449:111:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8417:143:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1856,
																				"nodeType": "ExpressionStatement",
																				"src": "8417:143:9"
																			},
																			{
																				"expression": {
																					"id": 1864,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1857,
																						"name": "Total",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1665,
																						"src": "8578:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1863,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1858,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1057,
																									"src": "8586:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1860,
																								"indexExpression": {
																									"id": 1859,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1459,
																									"src": "8594:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "8586:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1052_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1861,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "8598:13:9",
																							"memberName": "depositTokens",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1043,
																							"src": "8586:25:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"id": 1862,
																							"name": "EarnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1471,
																							"src": "8614:9:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "8586:37:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8578:45:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1865,
																				"nodeType": "ExpressionStatement",
																				"src": "8578:45:9"
																			},
																			{
																				"expression": {
																					"id": 1873,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1866,
																						"name": "PenaltyResult",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1668,
																						"src": "8641:13:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1872,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1869,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1867,
																										"name": "Total",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1665,
																										"src": "8658:5:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"id": 1868,
																										"name": "penalty",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1041,
																										"src": "8666:7:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "8658:15:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1870,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8657:17:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1871,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8677:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "8657:24:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8641:40:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1874,
																				"nodeType": "ExpressionStatement",
																				"src": "8641:40:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"id": 1879,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "8729:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1882,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1880,
																										"name": "Total",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1665,
																										"src": "8734:5:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "-",
																									"rightExpression": {
																										"id": 1881,
																										"name": "PenaltyResult",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1668,
																										"src": "8742:13:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "8734:21:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1883,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8733:23:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1876,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1031,
																									"src": "8706:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1875,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "8699:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1877,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "8699:20:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1878,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "8720:8:9",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "8699:29:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1884,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8699:58:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1885,
																				"nodeType": "ExpressionStatement",
																				"src": "8699:58:9"
																			},
																			{
																				"expression": {
																					"id": 1901,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1886,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "8775:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1900,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1897,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1894,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"components": [
																														{
																															"commonType": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															},
																															"id": 1889,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"leftExpression": {
																																"id": 1887,
																																"name": "InterestAmountperday",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1662,
																																"src": "8810:20:9",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"nodeType": "BinaryOperation",
																															"operator": "*",
																															"rightExpression": {
																																"id": 1888,
																																"name": "Stakdays",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1671,
																																"src": "8833:8:9",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"src": "8810:31:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														}
																													],
																													"id": 1890,
																													"isConstant": false,
																													"isInlineArray": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "TupleExpression",
																													"src": "8809:33:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1891,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1077,
																														"src": "8845:12:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1893,
																													"indexExpression": {
																														"id": 1892,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "8858:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "8845:16:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "8809:52:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1895,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "8808:54:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1896,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "8889:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "8808:83:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1898,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8807:85:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1899,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8915:3:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "8807:111:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8775:143:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1902,
																				"nodeType": "ExpressionStatement",
																				"src": "8775:143:9"
																			},
																			{
																				"expression": {
																					"id": 1907,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1903,
																							"name": "BurnAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1081,
																							"src": "8936:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1905,
																						"indexExpression": {
																							"id": 1904,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "8947:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "8936:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 1906,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "8953:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8936:26:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1908,
																				"nodeType": "ExpressionStatement",
																				"src": "8936:26:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																							"id": 1913,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "9031:42:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							"value": "0x000000000000000000000000000000000000dEaD"
																						},
																						{
																							"id": 1914,
																							"name": "BurnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1474,
																							"src": "9095:9:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1910,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1031,
																									"src": "8987:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1909,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "8980:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1911,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "8980:20:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1912,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "9001:8:9",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "8980:29:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1915,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8980:142:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1916,
																				"nodeType": "ExpressionStatement",
																				"src": "8980:142:9"
																			}
																		]
																	}
																},
																"id": 1919,
																"nodeType": "IfStatement",
																"src": "7512:1625:9",
																"trueBody": {
																	"id": 1833,
																	"nodeType": "Block",
																	"src": "7550:738:9",
																	"statements": [
																		{
																			"expression": {
																				"id": 1771,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1756,
																					"name": "EarnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1471,
																					"src": "7568:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1770,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1767,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1764,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"components": [
																													{
																														"commonType": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														},
																														"id": 1759,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"leftExpression": {
																															"id": 1757,
																															"name": "InterestAmountperday",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1662,
																															"src": "7603:20:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"nodeType": "BinaryOperation",
																														"operator": "*",
																														"rightExpression": {
																															"id": 1758,
																															"name": "Stakdays",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1671,
																															"src": "7626:8:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"src": "7603:31:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														}
																													}
																												],
																												"id": 1760,
																												"isConstant": false,
																												"isInlineArray": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "TupleExpression",
																												"src": "7602:33:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1761,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1077,
																													"src": "7638:12:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1763,
																												"indexExpression": {
																													"id": 1762,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "7651:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "7638:16:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "7602:52:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1765,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "7601:54:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3735",
																									"id": 1766,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "7682:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_75_by_1",
																										"typeString": "int_const 75"
																									},
																									"value": "75"
																								},
																								"src": "7601:83:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1768,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7600:85:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1769,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7708:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "7600:111:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7568:143:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1772,
																			"nodeType": "ExpressionStatement",
																			"src": "7568:143:9"
																		},
																		{
																			"expression": {
																				"id": 1780,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1773,
																					"name": "Total",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1665,
																					"src": "7729:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1779,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1774,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1057,
																								"src": "7737:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1776,
																							"indexExpression": {
																								"id": 1775,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1459,
																								"src": "7745:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "7737:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1052_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1777,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "7749:13:9",
																						"memberName": "depositTokens",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1043,
																						"src": "7737:25:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"id": 1778,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "7765:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7737:37:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7729:45:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1781,
																			"nodeType": "ExpressionStatement",
																			"src": "7729:45:9"
																		},
																		{
																			"expression": {
																				"id": 1789,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1782,
																					"name": "PenaltyResult",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1668,
																					"src": "7792:13:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1788,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1785,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1783,
																									"name": "Total",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1665,
																									"src": "7809:5:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"id": 1784,
																									"name": "penalty",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1041,
																									"src": "7817:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "7809:15:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1786,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7808:17:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1787,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7828:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "7808:24:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7792:40:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1790,
																			"nodeType": "ExpressionStatement",
																			"src": "7792:40:9"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1795,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1459,
																						"src": "7880:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1798,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1796,
																									"name": "Total",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1665,
																									"src": "7885:5:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 1797,
																									"name": "PenaltyResult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1668,
																									"src": "7893:13:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "7885:21:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1799,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7884:23:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1792,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1031,
																								"src": "7857:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1791,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "7850:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1793,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "7850:20:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1794,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7871:8:9",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "7850:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1800,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7850:58:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1801,
																			"nodeType": "ExpressionStatement",
																			"src": "7850:58:9"
																		},
																		{
																			"expression": {
																				"id": 1817,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1802,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1474,
																					"src": "7926:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1816,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1813,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1810,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"components": [
																													{
																														"commonType": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														},
																														"id": 1805,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"leftExpression": {
																															"id": 1803,
																															"name": "InterestAmountperday",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1662,
																															"src": "7961:20:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"nodeType": "BinaryOperation",
																														"operator": "*",
																														"rightExpression": {
																															"id": 1804,
																															"name": "Stakdays",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1671,
																															"src": "7984:8:9",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"src": "7961:31:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														}
																													}
																												],
																												"id": 1806,
																												"isConstant": false,
																												"isInlineArray": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "TupleExpression",
																												"src": "7960:33:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1807,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1077,
																													"src": "7996:12:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1809,
																												"indexExpression": {
																													"id": 1808,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "8009:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "7996:16:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "7960:52:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1811,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "7959:54:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3235",
																									"id": 1812,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "8040:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_25_by_1",
																										"typeString": "int_const 25"
																									},
																									"value": "25"
																								},
																								"src": "7959:83:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1814,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7958:85:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1815,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "8066:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "7958:111:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7926:143:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1818,
																			"nodeType": "ExpressionStatement",
																			"src": "7926:143:9"
																		},
																		{
																			"expression": {
																				"id": 1823,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1819,
																						"name": "BurnAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1081,
																						"src": "8087:10:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1821,
																					"indexExpression": {
																						"id": 1820,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1459,
																						"src": "8098:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "8087:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"id": 1822,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1474,
																					"src": "8104:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8087:26:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1824,
																			"nodeType": "ExpressionStatement",
																			"src": "8087:26:9"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																						"id": 1829,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "8182:42:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"value": "0x000000000000000000000000000000000000dEaD"
																					},
																					{
																						"id": 1830,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "8246:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1826,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1031,
																								"src": "8138:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1825,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "8131:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1827,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "8131:20:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1828,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "8152:8:9",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "8131:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1831,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "8131:142:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1832,
																			"nodeType": "ExpressionStatement",
																			"src": "8131:142:9"
																		}
																	]
																}
															},
															"id": 1920,
															"nodeType": "IfStatement",
															"src": "7064:2073:9",
															"trueBody": {
																"id": 1749,
																"nodeType": "Block",
																"src": "7103:336:9",
																"statements": [
																	{
																		"expression": {
																			"id": 1713,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1708,
																				"name": "EarnToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1471,
																				"src": "7121:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1711,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1709,
																							"name": "InterestAmountperday",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1662,
																							"src": "7134:20:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1710,
																							"name": "Stakdays",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1671,
																							"src": "7157:8:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "7134:31:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1712,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "7133:33:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7121:45:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1714,
																		"nodeType": "ExpressionStatement",
																		"src": "7121:45:9"
																	},
																	{
																		"expression": {
																			"id": 1727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1715,
																				"name": "Total",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1665,
																				"src": "7184:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1716,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1057,
																							"src": "7212:7:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1718,
																						"indexExpression": {
																							"id": 1717,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "7220:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "7212:11:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$1052_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1719,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7224:13:9",
																					"memberName": "depositTokens",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1043,
																					"src": "7212:25:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1724,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1720,
																								"name": "EarnToken",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1471,
																								"src": "7261:9:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1721,
																									"name": "RewardAmount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1077,
																									"src": "7273:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																										"typeString": "mapping(address => uint256)"
																									}
																								},
																								"id": 1723,
																								"indexExpression": {
																									"id": 1722,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1459,
																									"src": "7286:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "7273:16:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7261:28:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1725,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7260:30:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7212:78:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7184:106:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1728,
																		"nodeType": "ExpressionStatement",
																		"src": "7184:106:9"
																	},
																	{
																		"expression": {
																			"id": 1736,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1729,
																				"name": "PenaltyResult",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1668,
																				"src": "7308:13:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1735,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1732,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1730,
																								"name": "Total",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1665,
																								"src": "7325:5:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1731,
																								"name": "penalty",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1041,
																								"src": "7333:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7325:15:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1733,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7324:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1734,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7344:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7324:24:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7308:40:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1737,
																		"nodeType": "ExpressionStatement",
																		"src": "7308:40:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1742,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1459,
																					"src": "7396:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1745,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1743,
																								"name": "Total",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1665,
																								"src": "7401:5:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"id": 1744,
																								"name": "PenaltyResult",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1668,
																								"src": "7409:13:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7401:21:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1746,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7400:23:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1739,
																							"name": "ERC20Address",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1031,
																							"src": "7373:12:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1738,
																						"name": "IERC20",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 190,
																						"src": "7366:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																							"typeString": "type(contract IERC20)"
																						}
																					},
																					"id": 1740,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7366:20:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1741,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "7387:8:9",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 157,
																				"src": "7366:29:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7366:58:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1748,
																		"nodeType": "ExpressionStatement",
																		"src": "7366:58:9"
																	}
																]
															}
														}
													]
												},
												"id": 1922,
												"nodeType": "IfStatement",
												"src": "4989:4158:9",
												"trueBody": {
													"id": 1660,
													"nodeType": "Block",
													"src": "5096:1590:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1498,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "5114:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1500,
																		"indexExpression": {
																			"id": 1499,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1459,
																			"src": "5122:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5114:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1501,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5126:14:9",
																	"memberName": "EarnPersentage",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1049,
																	"src": "5114:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5144:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5114:33:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1530,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1525,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1057,
																				"src": "5376:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1527,
																			"indexExpression": {
																				"id": 1526,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1459,
																				"src": "5384:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5376:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1052_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1528,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5388:14:9",
																		"memberName": "EarnPersentage",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1049,
																		"src": "5376:26:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3735",
																		"id": 1529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5406:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_75_by_1",
																			"typeString": "int_const 75"
																		},
																		"value": "75"
																	},
																	"src": "5376:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1591,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "6031:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1593,
																				"indexExpression": {
																					"id": 1592,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1459,
																					"src": "6039:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6031:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1594,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6043:14:9",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1049,
																			"src": "6031:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "3530",
																			"id": 1595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6061:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_50_by_1",
																				"typeString": "int_const 50"
																			},
																			"value": "50"
																		},
																		"src": "6031:32:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1657,
																	"nodeType": "IfStatement",
																	"src": "6027:649:9",
																	"trueBody": {
																		"id": 1656,
																		"nodeType": "Block",
																		"src": "6065:611:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 1611,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1597,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "6083:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1610,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1607,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1604,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"baseExpression": {
																														"id": 1598,
																														"name": "InterestAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1061,
																														"src": "6117:14:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1600,
																													"indexExpression": {
																														"id": 1599,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "6132:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6117:18:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1601,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1077,
																														"src": "6138:12:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1603,
																													"indexExpression": {
																														"id": 1602,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "6151:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6138:16:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "6117:37:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1605,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "6116:39:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1606,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6158:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "6116:44:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1608,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "6115:46:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1609,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6184:3:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "6115:72:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6083:104:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1612,
																				"nodeType": "ExpressionStatement",
																				"src": "6083:104:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"id": 1617,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "6256:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1623,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1618,
																										"name": "Details",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1057,
																										"src": "6280:7:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																											"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																										}
																									},
																									"id": 1620,
																									"indexExpression": {
																										"id": 1619,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1459,
																										"src": "6288:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "6280:11:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Staker_$1052_storage",
																										"typeString": "struct TokenStaking.Staker storage ref"
																									}
																								},
																								"id": 1621,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "6292:13:9",
																								"memberName": "depositTokens",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1043,
																								"src": "6280:25:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"id": 1622,
																								"name": "EarnToken",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1471,
																								"src": "6308:9:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "6280:37:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1614,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1031,
																									"src": "6212:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1613,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "6205:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1615,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6205:20:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1616,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "6226:8:9",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "6205:29:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1624,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6205:130:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1625,
																				"nodeType": "ExpressionStatement",
																				"src": "6205:130:9"
																			},
																			{
																				"expression": {
																					"id": 1640,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1626,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "6353:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1639,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1636,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1633,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"baseExpression": {
																														"id": 1627,
																														"name": "InterestAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1061,
																														"src": "6387:14:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1629,
																													"indexExpression": {
																														"id": 1628,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "6402:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6387:18:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1630,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1077,
																														"src": "6408:12:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1632,
																													"indexExpression": {
																														"id": 1631,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1459,
																														"src": "6421:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6408:16:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "6387:37:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1634,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "6386:39:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1635,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6428:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "6386:44:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1637,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "6385:46:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1638,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6454:3:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "6385:72:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6353:104:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1641,
																				"nodeType": "ExpressionStatement",
																				"src": "6353:104:9"
																			},
																			{
																				"expression": {
																					"id": 1646,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1642,
																							"name": "BurnAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1081,
																							"src": "6475:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1644,
																						"indexExpression": {
																							"id": 1643,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "6486:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "6475:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 1645,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "6492:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6475:26:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1647,
																				"nodeType": "ExpressionStatement",
																				"src": "6475:26:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																							"id": 1652,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6570:42:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							"value": "0x000000000000000000000000000000000000dEaD"
																						},
																						{
																							"id": 1653,
																							"name": "BurnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1474,
																							"src": "6634:9:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1649,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1031,
																									"src": "6526:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1648,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "6519:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1650,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6519:20:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1651,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "6540:8:9",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "6519:29:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1654,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6519:142:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1655,
																				"nodeType": "ExpressionStatement",
																				"src": "6519:142:9"
																			}
																		]
																	}
																},
																"id": 1658,
																"nodeType": "IfStatement",
																"src": "5372:1304:9",
																"trueBody": {
																	"id": 1590,
																	"nodeType": "Block",
																	"src": "5410:611:9",
																	"statements": [
																		{
																			"expression": {
																				"id": 1545,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1531,
																					"name": "EarnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1471,
																					"src": "5428:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1544,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1541,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1538,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"baseExpression": {
																													"id": 1532,
																													"name": "InterestAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1061,
																													"src": "5462:14:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1534,
																												"indexExpression": {
																													"id": 1533,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "5477:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5462:18:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1535,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1077,
																													"src": "5483:12:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1537,
																												"indexExpression": {
																													"id": 1536,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "5496:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5483:16:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5462:37:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1539,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5461:39:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3735",
																									"id": 1540,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "5503:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_75_by_1",
																										"typeString": "int_const 75"
																									},
																									"value": "75"
																								},
																								"src": "5461:44:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1542,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5460:46:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1543,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5529:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "5460:72:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5428:104:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1546,
																			"nodeType": "ExpressionStatement",
																			"src": "5428:104:9"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1551,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1459,
																						"src": "5601:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1557,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1552,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1057,
																									"src": "5625:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1554,
																								"indexExpression": {
																									"id": 1553,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1459,
																									"src": "5633:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5625:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1052_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1555,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "5637:13:9",
																							"memberName": "depositTokens",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1043,
																							"src": "5625:25:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"id": 1556,
																							"name": "EarnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1471,
																							"src": "5653:9:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5625:37:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1548,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1031,
																								"src": "5557:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1547,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "5550:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1549,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5550:20:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1550,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5571:8:9",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "5550:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1558,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5550:130:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1559,
																			"nodeType": "ExpressionStatement",
																			"src": "5550:130:9"
																		},
																		{
																			"expression": {
																				"id": 1574,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1560,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1474,
																					"src": "5698:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1573,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1570,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1567,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"baseExpression": {
																													"id": 1561,
																													"name": "InterestAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1061,
																													"src": "5732:14:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1563,
																												"indexExpression": {
																													"id": 1562,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "5747:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5732:18:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1564,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1077,
																													"src": "5753:12:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1566,
																												"indexExpression": {
																													"id": 1565,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1459,
																													"src": "5766:2:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5753:16:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5732:37:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1568,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5731:39:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3235",
																									"id": 1569,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "5773:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_25_by_1",
																										"typeString": "int_const 25"
																									},
																									"value": "25"
																								},
																								"src": "5731:44:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1571,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5730:46:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1572,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5799:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "5730:72:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5698:104:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1575,
																			"nodeType": "ExpressionStatement",
																			"src": "5698:104:9"
																		},
																		{
																			"expression": {
																				"id": 1580,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1576,
																						"name": "BurnAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1081,
																						"src": "5820:10:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1578,
																					"indexExpression": {
																						"id": 1577,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1459,
																						"src": "5831:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "5820:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"id": 1579,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1474,
																					"src": "5837:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5820:26:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1581,
																			"nodeType": "ExpressionStatement",
																			"src": "5820:26:9"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																						"id": 1586,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5915:42:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"value": "0x000000000000000000000000000000000000dEaD"
																					},
																					{
																						"id": 1587,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1474,
																						"src": "5979:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1583,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1031,
																								"src": "5871:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1582,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "5864:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1584,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5864:20:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1585,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5885:8:9",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "5864:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1588,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5864:142:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1589,
																			"nodeType": "ExpressionStatement",
																			"src": "5864:142:9"
																		}
																	]
																}
															},
															"id": 1659,
															"nodeType": "IfStatement",
															"src": "5110:1566:9",
															"trueBody": {
																"id": 1524,
																"nodeType": "Block",
																"src": "5149:217:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1508,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1459,
																					"src": "5218:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1521,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1509,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1057,
																								"src": "5242:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1511,
																							"indexExpression": {
																								"id": 1510,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1459,
																								"src": "5250:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "5242:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1052_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1512,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "5254:13:9",
																						"memberName": "depositTokens",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1043,
																						"src": "5242:25:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1519,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"baseExpression": {
																										"id": 1513,
																										"name": "InterestAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1061,
																										"src": "5295:14:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																											"typeString": "mapping(address => uint256)"
																										}
																									},
																									"id": 1515,
																									"indexExpression": {
																										"id": 1514,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1459,
																										"src": "5310:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5295:18:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1516,
																										"name": "RewardAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1077,
																										"src": "5316:12:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																											"typeString": "mapping(address => uint256)"
																										}
																									},
																									"id": 1518,
																									"indexExpression": {
																										"id": 1517,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1459,
																										"src": "5329:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5316:16:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "5295:37:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1520,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5294:39:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5242:91:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1505,
																							"name": "ERC20Address",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1031,
																							"src": "5174:12:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1504,
																						"name": "IERC20",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 190,
																						"src": "5167:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																							"typeString": "type(contract IERC20)"
																						}
																					},
																					"id": 1506,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "5167:20:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1507,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5188:8:9",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 157,
																				"src": "5167:29:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5167:184:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1523,
																		"nodeType": "ExpressionStatement",
																		"src": "5167:184:9"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"id": 1928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1923,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1057,
																"src": "9156:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1925,
															"indexExpression": {
																"id": 1924,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1459,
																"src": "9164:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9156:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1052_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1926,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9168:5:9",
														"memberName": "check",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1051,
														"src": "9156:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1927,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9176:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "9156:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1929,
												"nodeType": "ExpressionStatement",
												"src": "9156:25:9"
											},
											{
												"expression": {
													"id": 1933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "9191:23:9",
													"subExpression": {
														"baseExpression": {
															"id": 1930,
															"name": "RewardAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1077,
															"src": "9198:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1932,
														"indexExpression": {
															"id": 1931,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "9211:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9198:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1934,
												"nodeType": "ExpressionStatement",
												"src": "9191:23:9"
											},
											{
												"expression": {
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "9224:25:9",
													"subExpression": {
														"baseExpression": {
															"id": 1935,
															"name": "InterestAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "9231:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1937,
														"indexExpression": {
															"id": 1936,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "9246:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9231:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1939,
												"nodeType": "ExpressionStatement",
												"src": "9224:25:9"
											},
											{
												"expression": {
													"id": 1947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1940,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "9259:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1942,
														"indexExpression": {
															"id": 1941,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "9266:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9259:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1943,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1057,
																"src": "9273:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1945,
															"indexExpression": {
																"id": 1944,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1459,
																"src": "9281:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9273:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1052_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1946,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9285:13:9",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1043,
														"src": "9273:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9259:39:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1948,
												"nodeType": "ExpressionStatement",
												"src": "9259:39:9"
											},
											{
												"expression": {
													"id": 1954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1949,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "9308:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1950,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1057,
																"src": "9329:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1952,
															"indexExpression": {
																"id": 1951,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1459,
																"src": "9337:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9329:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1052_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1953,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9341:13:9",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1043,
														"src": "9329:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9308:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1955,
												"nodeType": "ExpressionStatement",
												"src": "9308:46:9"
											}
										]
									},
									"functionSelector": "9131a05a",
									"id": 1957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "WithdrawTokens",
									"nameLocation": "4833:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4856:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "4848:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4848:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:12:9"
									},
									"returnParameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4867:0:9"
									},
									"scope": 2259,
									"src": "4824:4537:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2051,
										"nodeType": "Block",
										"src": "9597:658:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1984,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1974,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1972,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1970,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1968,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1963,
																											"name": "Details",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1057,
																											"src": "9630:7:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																												"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																											}
																										},
																										"id": 1965,
																										"indexExpression": {
																											"id": 1964,
																											"name": "to",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1959,
																											"src": "9638:2:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_address",
																												"typeString": "address"
																											}
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "9630:11:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Staker_$1052_storage",
																											"typeString": "struct TokenStaking.Staker storage ref"
																										}
																									},
																									"id": 1966,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "9642:10:9",
																									"memberName": "StakeMonth",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1047,
																									"src": "9630:22:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3330",
																									"id": 1967,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "9655:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_30_by_1",
																										"typeString": "int_const 30"
																									},
																									"value": "30"
																								},
																								"src": "9630:27:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"hexValue": "3234",
																								"id": 1969,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "9660:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_24_by_1",
																									"typeString": "int_const 24"
																								},
																								"value": "24"
																							},
																							"src": "9630:32:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3630",
																							"id": 1971,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "9665:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_60_by_1",
																								"typeString": "int_const 60"
																							},
																							"value": "60"
																						},
																						"src": "9630:37:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3630",
																						"id": 1973,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9670:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_60_by_1",
																							"typeString": "int_const 60"
																						},
																						"value": "60"
																					},
																					"src": "9630:42:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1975,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "9629:44:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1976,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1057,
																					"src": "9676:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1978,
																				"indexExpression": {
																					"id": 1977,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1959,
																					"src": "9684:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "9676:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1052_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1979,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "9688:9:9",
																			"memberName": "stakeTime",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1045,
																			"src": "9676:21:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "9629:68:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1981,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9628:70:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"id": 1982,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "9717:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1983,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9723:9:9",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "9717:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9628:104:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7572205374616b652054696d6520436f6d706c6574652c20506c656173652043616c6c2057697468647261772046756e6374696f6e2021",
															"id": 1985,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9746:59:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b",
																"typeString": "literal_string \"Your Stake Time Complete, Please Call Withdraw Function !\""
															},
															"value": "Your Stake Time Complete, Please Call Withdraw Function !"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b",
																"typeString": "literal_string \"Your Stake Time Complete, Please Call Withdraw Function !\""
															}
														],
														"id": 1962,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9607:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9607:208:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1987,
												"nodeType": "ExpressionStatement",
												"src": "9607:208:9"
											},
											{
												"assignments": [
													1989
												],
												"declarations": [
													{
														"constant": false,
														"id": 1989,
														"mutability": "mutable",
														"name": "Stakdays",
														"nameLocation": "9833:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 2051,
														"src": "9825:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1988,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9825:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2005,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1996,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1990,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9845:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9851:9:9",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9845:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1992,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "9863:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1994,
																		"indexExpression": {
																			"id": 1993,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1959,
																			"src": "9871:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9863:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1995,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9875:9:9",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1045,
																	"src": "9863:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9845:39:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1997,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9844:41:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"id": 2002,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_rational_1440_by_1",
																		"typeString": "int_const 1440"
																	},
																	"id": 2000,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3234",
																		"id": 1998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9889:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_24_by_1",
																			"typeString": "int_const 24"
																		},
																		"value": "24"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"hexValue": "3630",
																		"id": 1999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9894:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_60_by_1",
																			"typeString": "int_const 60"
																		},
																		"value": "60"
																	},
																	"src": "9889:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1440_by_1",
																		"typeString": "int_const 1440"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3630",
																	"id": 2001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9899:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_60_by_1",
																		"typeString": "int_const 60"
																	},
																	"value": "60"
																},
																"src": "9889:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																}
															}
														],
														"id": 2003,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9888:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_86400_by_1",
															"typeString": "int_const 86400"
														}
													},
													"src": "9844:58:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9825:77:9"
											},
											{
												"assignments": [
													2007
												],
												"declarations": [
													{
														"constant": false,
														"id": 2007,
														"mutability": "mutable",
														"name": "InterestAmountperday",
														"nameLocation": "9920:20:9",
														"nodeType": "VariableDeclaration",
														"scope": 2051,
														"src": "9912:28:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2006,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9912:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2019,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 2008,
															"name": "InterestAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "9943:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2010,
														"indexExpression": {
															"id": 2009,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1959,
															"src": "9958:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9943:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2016,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2011,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "9977:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 2013,
																		"indexExpression": {
																			"id": 2012,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1959,
																			"src": "9985:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9977:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 2014,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9989:10:9",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1047,
																	"src": "9977:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3330",
																	"id": 2015,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10002:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_30_by_1",
																		"typeString": "int_const 30"
																	},
																	"value": "30"
																},
																"src": "9977:27:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2017,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9976:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9943:62:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9912:93:9"
											},
											{
												"assignments": [
													2021
												],
												"declarations": [
													{
														"constant": false,
														"id": 2021,
														"mutability": "mutable",
														"name": "EarnToken",
														"nameLocation": "10023:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 2051,
														"src": "10015:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2020,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10015:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2025,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2022,
														"name": "InterestAmountperday",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2007,
														"src": "10035:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2023,
														"name": "Stakdays",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1989,
														"src": "10058:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10035:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10015:51:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2027,
																"name": "EarnToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "10084:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2028,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10096:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10084:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526577617264206d7573742062652067726561746572207468616e207a65726f2e",
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10099:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7",
																"typeString": "literal_string \"Reward must be greater than zero.\""
															},
															"value": "Reward must be greater than zero."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7",
																"typeString": "literal_string \"Reward must be greater than zero.\""
															}
														],
														"id": 2026,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10076:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10076:59:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2032,
												"nodeType": "ExpressionStatement",
												"src": "10076:59:9"
											},
											{
												"expression": {
													"id": 2041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2033,
															"name": "RewardAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1077,
															"src": "10145:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2035,
														"indexExpression": {
															"id": 2034,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1959,
															"src": "10158:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10145:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2036,
															"name": "EarnToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "10165:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"baseExpression": {
																"id": 2037,
																"name": "RewardAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1077,
																"src": "10177:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 2039,
															"indexExpression": {
																"id": 2038,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1959,
																"src": "10190:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10177:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "10165:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10145:48:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2042,
												"nodeType": "ExpressionStatement",
												"src": "10145:48:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2047,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1959,
															"src": "10234:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2048,
															"name": "EarnToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "10238:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2044,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "10211:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2043,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "10204:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10204:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 2046,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10225:8:9",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 157,
														"src": "10204:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 2049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10204:44:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2050,
												"nodeType": "ExpressionStatement",
												"src": "10204:44:9"
											}
										]
									},
									"functionSelector": "0178be5f",
									"id": 2052,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ClaimRewards",
									"nameLocation": "9565:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1959,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9586:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "9578:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1958,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9578:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9577:12:9"
									},
									"returnParameters": {
										"id": 1961,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9597:0:9"
									},
									"scope": 2259,
									"src": "9556:699:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2085,
										"nodeType": "Block",
										"src": "10334:188:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 2059,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1057,
																"src": "10347:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 2061,
															"indexExpression": {
																"id": 2060,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2054,
																"src": "10355:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10347:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1052_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 2062,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10359:14:9",
														"memberName": "EarnPersentage",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1049,
														"src": "10347:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "313030",
														"id": 2063,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10377:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "10347:33:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2083,
													"nodeType": "Block",
													"src": "10427:89:9",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2081,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2078,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"baseExpression": {
																					"id": 2068,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1061,
																					"src": "10449:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 2070,
																				"indexExpression": {
																					"id": 2069,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2054,
																					"src": "10464:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10449:18:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2076,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"hexValue": "313030",
																							"id": 2071,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "10469:3:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 2072,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1057,
																									"src": "10473:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 2074,
																								"indexExpression": {
																									"id": 2073,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2054,
																									"src": "10481:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "10473:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1052_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 2075,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "10485:14:9",
																							"memberName": "EarnPersentage",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1049,
																							"src": "10473:26:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "10469:30:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 2077,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "10468:32:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10449:51:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2079,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10448:53:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 2080,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10502:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "10448:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2058,
															"id": 2082,
															"nodeType": "Return",
															"src": "10441:64:9"
														}
													]
												},
												"id": 2084,
												"nodeType": "IfStatement",
												"src": "10344:172:9",
												"trueBody": {
													"id": 2067,
													"nodeType": "Block",
													"src": "10381:33:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2065,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10402:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2058,
															"id": 2066,
															"nodeType": "Return",
															"src": "10395:8:9"
														}
													]
												}
											}
										]
									},
									"functionSelector": "032ad8fb",
									"id": 2086,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewBurnRewards",
									"nameLocation": "10269:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10293:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2086,
												"src": "10285:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10285:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10284:12:9"
									},
									"returnParameters": {
										"id": 2058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "10326:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2086,
												"src": "10318:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10318:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10317:16:9"
									},
									"scope": 2259,
									"src": "10260:262:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2169,
										"nodeType": "Block",
										"src": "10598:549:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2102,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2100,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2098,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 2093,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1057,
																									"src": "10627:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 2095,
																								"indexExpression": {
																									"id": 2094,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2088,
																									"src": "10635:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "10627:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1052_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 2096,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "10639:10:9",
																							"memberName": "StakeMonth",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1047,
																							"src": "10627:22:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3330",
																							"id": 2097,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "10652:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_30_by_1",
																								"typeString": "int_const 30"
																							},
																							"value": "30"
																						},
																						"src": "10627:27:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3234",
																						"id": 2099,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "10657:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_24_by_1",
																							"typeString": "int_const 24"
																						},
																						"value": "24"
																					},
																					"src": "10627:32:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3630",
																					"id": 2101,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "10662:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_60_by_1",
																						"typeString": "int_const 60"
																					},
																					"value": "60"
																				},
																				"src": "10627:37:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 2103,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10667:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "10627:42:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2105,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10626:44:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2106,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1057,
																			"src": "10673:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 2108,
																		"indexExpression": {
																			"id": 2107,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2088,
																			"src": "10681:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10673:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1052_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 2109,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10685:9:9",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1045,
																	"src": "10673:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10626:68:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2111,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10625:70:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 2112,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "10710:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10716:9:9",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "10710:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10625:100:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2167,
													"nodeType": "Block",
													"src": "10794:347:9",
													"statements": [
														{
															"assignments": [
																2122
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2122,
																	"mutability": "mutable",
																	"name": "Stakdays",
																	"nameLocation": "10816:8:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2167,
																	"src": "10808:16:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2121,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10808:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2138,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2129,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2123,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "10828:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 2124,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10834:9:9",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "10828:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 2125,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1057,
																						"src": "10846:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 2127,
																					"indexExpression": {
																						"id": 2126,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2088,
																						"src": "10854:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "10846:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1052_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 2128,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10858:9:9",
																				"memberName": "stakeTime",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1045,
																				"src": "10846:21:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10828:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2130,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10827:41:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			},
																			"id": 2135,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_rational_1440_by_1",
																					"typeString": "int_const 1440"
																				},
																				"id": 2133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3234",
																					"id": 2131,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "10872:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_24_by_1",
																						"typeString": "int_const 24"
																					},
																					"value": "24"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3630",
																					"id": 2132,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "10877:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_60_by_1",
																						"typeString": "int_const 60"
																					},
																					"value": "60"
																				},
																				"src": "10872:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1440_by_1",
																					"typeString": "int_const 1440"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 2134,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10882:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "10872:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			}
																		}
																	],
																	"id": 2136,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10871:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_86400_by_1",
																		"typeString": "int_const 86400"
																	}
																},
																"src": "10827:58:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10808:77:9"
														},
														{
															"assignments": [
																2140
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2140,
																	"mutability": "mutable",
																	"name": "InterestAmountperday",
																	"nameLocation": "10907:20:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2167,
																	"src": "10899:28:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2139,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10899:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2152,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 2141,
																		"name": "InterestAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1061,
																		"src": "10930:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 2143,
																	"indexExpression": {
																		"id": 2142,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2088,
																		"src": "10945:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10930:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 2144,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1057,
																						"src": "10968:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1052_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 2146,
																					"indexExpression": {
																						"id": 2145,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2088,
																						"src": "10976:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "10968:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1052_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 2147,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10980:10:9",
																				"memberName": "StakeMonth",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1047,
																				"src": "10968:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3330",
																				"id": 2148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10993:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_30_by_1",
																					"typeString": "int_const 30"
																				},
																				"value": "30"
																			},
																			"src": "10968:27:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2150,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10967:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10930:66:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10899:97:9"
														},
														{
															"assignments": [
																2154
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2154,
																	"mutability": "mutable",
																	"name": "EarnToken",
																	"nameLocation": "11018:9:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2167,
																	"src": "11010:17:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2153,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11010:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2163,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2157,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2155,
																				"name": "InterestAmountperday",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2140,
																				"src": "11031:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 2156,
																				"name": "Stakdays",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2122,
																				"src": "11054:8:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11031:31:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2158,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "11030:33:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"baseExpression": {
																		"id": 2159,
																		"name": "RewardAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "11082:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 2161,
																	"indexExpression": {
																		"id": 2160,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2088,
																		"src": "11095:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11082:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11030:68:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "11010:88:9"
														},
														{
															"expression": {
																"components": [
																	{
																		"id": 2164,
																		"name": "EarnToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2154,
																		"src": "11120:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2165,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11119:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2092,
															"id": 2166,
															"nodeType": "Return",
															"src": "11112:18:9"
														}
													]
												},
												"id": 2168,
												"nodeType": "IfStatement",
												"src": "10608:533:9",
												"trueBody": {
													"id": 2120,
													"nodeType": "Block",
													"src": "10736:52:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"baseExpression": {
																			"id": 2115,
																			"name": "InterestAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1061,
																			"src": "10758:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 2117,
																		"indexExpression": {
																			"id": 2116,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2088,
																			"src": "10773:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10758:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2118,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10757:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2092,
															"id": 2119,
															"nodeType": "Return",
															"src": "10750:27:9"
														}
													]
												}
											}
										]
									},
									"functionSelector": "da40ef80",
									"id": 2170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewRewards",
									"nameLocation": "10537:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10557:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "10549:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10549:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10548:12:9"
									},
									"returnParameters": {
										"id": 2092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "10590:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "10582:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10582:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10581:16:9"
									},
									"scope": 2259,
									"src": "10528:619:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2199,
										"nodeType": "Block",
										"src": "11369:82:9",
										"statements": [
											{
												"expression": {
													"id": 2185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2181,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "11379:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2183,
														"indexExpression": {
															"hexValue": "31",
															"id": 2182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11383:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11379:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2184,
														"name": "Month1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2172,
														"src": "11388:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11379:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2186,
												"nodeType": "ExpressionStatement",
												"src": "11379:15:9"
											},
											{
												"expression": {
													"id": 2191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2187,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "11404:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2189,
														"indexExpression": {
															"hexValue": "32",
															"id": 2188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11408:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11404:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2190,
														"name": "Month2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2174,
														"src": "11413:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11404:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2192,
												"nodeType": "ExpressionStatement",
												"src": "11404:15:9"
											},
											{
												"expression": {
													"id": 2197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2193,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "11429:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2195,
														"indexExpression": {
															"hexValue": "33",
															"id": 2194,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11433:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11429:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2196,
														"name": "Month3",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2176,
														"src": "11438:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11429:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2198,
												"nodeType": "ExpressionStatement",
												"src": "11429:15:9"
											}
										]
									},
									"functionSelector": "21736665",
									"id": 2200,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2179,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2178,
												"name": "onlyOwner",
												"nameLocations": [
													"11359:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11359:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "11359:9:9"
										}
									],
									"name": "SetAPY",
									"nameLocation": "11267:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2172,
												"mutability": "mutable",
												"name": "Month1",
												"nameLocation": "11291:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "11283:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11283:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2174,
												"mutability": "mutable",
												"name": "Month2",
												"nameLocation": "11315:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "11307:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11307:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "Month3",
												"nameLocation": "11339:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "11331:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11331:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11273:78:9"
									},
									"returnParameters": {
										"id": 2180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11369:0:9"
									},
									"scope": 2259,
									"src": "11258:193:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2229,
										"nodeType": "Block",
										"src": "11695:100:9",
										"statements": [
											{
												"expression": {
													"id": 2215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2211,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "11705:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2213,
														"indexExpression": {
															"hexValue": "31",
															"id": 2212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11712:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11705:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2214,
														"name": "Month1Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "11717:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11705:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2216,
												"nodeType": "ExpressionStatement",
												"src": "11705:21:9"
											},
											{
												"expression": {
													"id": 2221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2217,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "11736:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2219,
														"indexExpression": {
															"hexValue": "32",
															"id": 2218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11743:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11736:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2220,
														"name": "Month2Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2204,
														"src": "11748:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11736:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2222,
												"nodeType": "ExpressionStatement",
												"src": "11736:21:9"
											},
											{
												"expression": {
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2223,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "11767:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2225,
														"indexExpression": {
															"hexValue": "33",
															"id": 2224,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11774:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11767:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2226,
														"name": "Month3Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2206,
														"src": "11779:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11767:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2228,
												"nodeType": "ExpressionStatement",
												"src": "11767:21:9"
											}
										]
									},
									"functionSelector": "d6f80a25",
									"id": 2230,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2209,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2208,
												"name": "onlyOwner",
												"nameLocations": [
													"11685:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11685:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "11685:9:9"
										}
									],
									"name": "SetRewardPersentage",
									"nameLocation": "11571:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2202,
												"mutability": "mutable",
												"name": "Month1Per",
												"nameLocation": "11608:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "11600:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11600:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "Month2Per",
												"nameLocation": "11635:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "11627:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11627:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2206,
												"mutability": "mutable",
												"name": "Month3Per",
												"nameLocation": "11662:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "11654:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11654:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11590:87:9"
									},
									"returnParameters": {
										"id": 2210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11695:0:9"
									},
									"scope": 2259,
									"src": "11562:233:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2245,
										"nodeType": "Block",
										"src": "11994:57:9",
										"statements": [
											{
												"expression": {
													"id": 2239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2237,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1039,
														"src": "12004:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2238,
														"name": "taxFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2232,
														"src": "12010:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12004:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2240,
												"nodeType": "ExpressionStatement",
												"src": "12004:12:9"
											},
											{
												"expression": {
													"id": 2243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2241,
														"name": "penalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "12026:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2242,
														"name": "_penalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2234,
														"src": "12036:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12026:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2244,
												"nodeType": "ExpressionStatement",
												"src": "12026:18:9"
											}
										]
									},
									"functionSelector": "264b4af6",
									"id": 2246,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setTexAndPenalty",
									"nameLocation": "11936:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2232,
												"mutability": "mutable",
												"name": "taxFee",
												"nameLocation": "11961:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "11953:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11953:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "_penalty",
												"nameLocation": "11977:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "11969:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11969:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11952:34:9"
									},
									"returnParameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11994:0:9"
									},
									"scope": 2259,
									"src": "11927:124:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2257,
										"nodeType": "Block",
										"src": "12129:38:9",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"id": 2253,
															"name": "Tax",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1039,
															"src": "12147:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2254,
															"name": "penalty",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1041,
															"src": "12152:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2255,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "12146:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 2252,
												"id": 2256,
												"nodeType": "Return",
												"src": "12139:21:9"
											}
										]
									},
									"functionSelector": "2e886f1f",
									"id": 2258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTaxPenalty",
									"nameLocation": "12066:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12079:2:9"
									},
									"returnParameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2249,
												"mutability": "mutable",
												"name": "tax",
												"nameLocation": "12111:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 2258,
												"src": "12103:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12103:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2251,
												"mutability": "mutable",
												"name": "pen",
												"nameLocation": "12124:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 2258,
												"src": "12116:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12116:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12102:26:9"
									},
									"scope": 2259,
									"src": "12057:110:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2260,
							"src": "281:11888:9",
							"usedErrors": []
						}
					],
					"src": "56:12113:9"
				},
				"id": 9
			}
		}
	}
}
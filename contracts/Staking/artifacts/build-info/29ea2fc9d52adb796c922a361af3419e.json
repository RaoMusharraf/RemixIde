{
	"id": "29ea2fc9d52adb796c922a361af3419e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Staking/staking.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract TokenStaking is Ownable {\n    using SafeERC20 for IERC20;\n    address public ERC20Address;\n    address ownerAddress;\n    uint256 public totalStakedTokens;\n    bool Check;\n    uint256 Tax;\n    uint256 penalty;\n    struct Staker {\n        uint256 depositTokens;\n        uint256 stakeTime;\n        uint256 StakeMonth;\n        uint256 EarnPersentage;\n        bool check;\n    }\n    mapping(address => Staker) public Details;\n    mapping(address => uint256) public InterestAmount;\n    mapping(uint256 => uint256) public APY;\n    mapping(uint256 => uint256) public APYPer;\n    mapping(address => uint256) public Tokens;\n    mapping(address => uint256) public RewardAmount;\n    mapping(address => uint256) public BurnAmount;\n\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n    1. This function is called when contract is first deployed.\n    2. It takes three parameters:\n        a. ERC20 Token Address (Address of ERC20 Token Contract)\n    */\n    constructor(address _ERC20Address) {\n        ERC20Address = _ERC20Address;\n        ownerAddress = msg.sender;\n    }\n\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint256 _amount) public onlyOwner {\n        Tokens[msg.sender] += _amount;\n        IERC20(ERC20Address).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n    }\n\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has some parameters.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function DepositTokens(\n        address to,\n        uint256 _payment,\n        uint256 StakeMonth,\n        uint256 EarnPersentage\n    ) public {\n        require(Tokens[ownerAddress] > 0, \"Please Wait !!!\");\n        uint256 _amount = _payment * 1000000000;\n        if (Details[to].check) {\n            require(((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\");\n            require(\n                Details[to].StakeMonth == StakeMonth,\n                \"Enter Right StakeMonth\"\n            );\n            require(\n                Details[to].EarnPersentage == EarnPersentage,\n                \"Enter Right EarnPersentage\"\n            );\n            Details[to].depositTokens = Details[to].depositTokens + _amount;\n            if (Details[to].StakeMonth == APY[1]) {\n                InterestAmount[to] += (_amount * APYPer[1]) / 1000;\n            } else if (Details[to].StakeMonth == APY[2]) {\n                InterestAmount[to] += (_amount * APYPer[2]) / 1000;\n            } else if (Details[to].StakeMonth == APY[3]) {\n                InterestAmount[to] += (_amount * APYPer[3]) / 1000;\n            }\n            IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount);\n        } else {\n            require(\n                StakeMonth == APY[1] ||\n                    StakeMonth == APY[2] ||\n                    StakeMonth == APY[3],\n                \"Enter Right StakeMonth\"\n            );\n            require(\n                EarnPersentage == 100 ||\n                    EarnPersentage == 75 ||\n                    EarnPersentage == 50,\n                \"Enter Right EarnPersentage\"\n            );\n            uint256 AdminFee = (_amount * Tax) / 1000;\n            Details[to] = Staker(\n                _amount - AdminFee,\n                block.timestamp,\n                StakeMonth,\n                EarnPersentage,\n                true\n            );\n            if (Details[to].StakeMonth == APY[1]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[1]) / 1000;\n            } else if (Details[to].StakeMonth == APY[2]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[2]) / 1000;\n            } else if (Details[to].StakeMonth == APY[3]) {\n                InterestAmount[to] = ((_amount - AdminFee) * APYPer[3]) / 1000;\n            }\n            IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount);\n        }\n        Tokens[to] += _amount;\n        totalStakedTokens += _amount;\n    }\n\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function WithdrawTokens(address to) public {\n        require(Details[to].check, \"First Stake Tokens\");\n        uint256 EarnToken;\n        uint256 BurnToken;\n        if (\n            ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) < block.timestamp) {\n            if (Details[to].EarnPersentage == 100) {\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens +\n                        (InterestAmount[to] - RewardAmount[to])\n                );\n            } else if (Details[to].EarnPersentage == 75) {\n                EarnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 75) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens + EarnToken\n                );\n                BurnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 25) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            } else if (Details[to].EarnPersentage == 50) {\n                EarnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 50) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    to,\n                    Details[to].depositTokens + EarnToken\n                );\n                BurnToken =\n                    ((InterestAmount[to] - RewardAmount[to]) * 50) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n        } else {\n            uint256 InterestAmountperday;\n            uint256 Total;\n            uint256 PenaltyResult;\n            uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60);\n            InterestAmountperday =\n                InterestAmount[to] /\n                (Details[to].StakeMonth * 10);\n\n            //Transfer reward to user 100%\n            if (Details[to].EarnPersentage == 100) {\n                EarnToken = (InterestAmountperday * Stakdays);\n                Total =\n                    Details[to].depositTokens +\n                    (EarnToken - RewardAmount[to]);\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n            }\n            //Transfer reward to user 75% and Burn 25%\n            else if (Details[to].EarnPersentage == 75) {\n                EarnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        75) /\n                    100;\n                Total = Details[to].depositTokens + EarnToken;\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n                BurnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        25) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n            //Transfer reward to user 50% and Burn 50%\n            else if (Details[to].EarnPersentage == 50) {\n                EarnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        50) /\n                    100;\n                Total = Details[to].depositTokens + EarnToken;\n                PenaltyResult = (Total * penalty) / 1000;\n                IERC20(ERC20Address).transfer(to, (Total - PenaltyResult));\n                BurnToken =\n                    (((InterestAmountperday * Stakdays) - RewardAmount[to]) *\n                        50) /\n                    100;\n                IERC20(ERC20Address).transfer(\n                    0x000000000000000000000000000000000000dEaD,\n                    BurnToken\n                );\n            }\n        }\n        Details[to].check = false;\n        delete RewardAmount[to];\n        delete InterestAmount[to];\n        Tokens[to] -= Details[to].depositTokens;\n        totalStakedTokens -= Details[to].depositTokens;\n    }\n\n    /*   ~~~~~~~~~~~~~Claim Function~~~~~~~~~~~~~~~\n    1. This function is used to claim reward tokens.\n    2. User will call this function to claim all rewards from this contract.\n    */\n    function ClaimRewards(address to) public {\n        require(\n            ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >\n                block.timestamp,\n            \"Your Stake Time Complete, Please Call Withdraw Function !\"\n        );\n        uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60);\n        uint256 InterestAmountperday = InterestAmount[to] /\n            (Details[to].StakeMonth * 10);\n        uint256 EarnToken = InterestAmountperday * Stakdays;\n        require(EarnToken > 0, \"Reward must be greater than zero.\");\n        RewardAmount[to] += EarnToken - RewardAmount[to];\n\n        IERC20(ERC20Address).transfer(to, EarnToken);\n    }\n\n    function viewRewards(address to) public view returns (uint256 reward) {\n        if (\n            ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) <\n            block.timestamp\n        ) {\n            return (InterestAmount[to]-RewardAmount[to]);\n        } else {\n            uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60);\n            uint256 InterestAmountperday = InterestAmount[to] /\n                (Details[to].StakeMonth * 10);\n            uint256 EarnToken = (InterestAmountperday * Stakdays) -\n                RewardAmount[to];\n            return (EarnToken);\n        }\n    }\n    function viewBurnRewards(address to) public view returns (uint256 reward) {\n        if(Details[to].EarnPersentage == 100){\n            return 0;\n        }\n        else{\n            return (InterestAmount[to]*(100-Details[to].EarnPersentage))/100;\n        }\n    }\n    /*   ~~~~~~~~~~~~~ SetAPY Function~~~~~~~~~~~~~~~\n    1. This function is used to set Months.\n    */\n    function SetAPY(\n        uint256 Month1,\n        uint256 Month2,\n        uint256 Month3\n    ) public onlyOwner {\n        APY[1] = Month1;\n        APY[2] = Month2;\n        APY[3] = Month3;\n    }\n\n    /*   ~~~~~~~~~~~~~ SetAPY Function~~~~~~~~~~~~~~~\n    1. This function is used to set Months.\n    */\n    function SetRewardPersentage(\n        uint256 Month1Per,\n        uint256 Month2Per,\n        uint256 Month3Per\n    ) public onlyOwner {\n        APYPer[1] = Month1Per;\n        APYPer[2] = Month2Per;\n        APYPer[3] = Month3Per;\n    }\n\n    /*   ~~~~~~~~~~~~~ SetTex Function~~~~~~~~~~~~~~~\n    1. This function is used to set Tax fee and Penalty charges.\n    */\n    function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {\n        Tax = taxFee;\n        penalty = _penalty;\n    }\n\n    function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {\n        return (Tax, penalty);\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0x2B SWAP8 CALLVALUE DUP4 SAR 0x5D 0xCE 0xC4 PUSH23 0x285142EB14AECF45B32179EFD7792F7914C8596FE98864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0x2B SWAP8 CALLVALUE DUP4 SAR 0x5D 0xCE 0xC4 PUSH23 0x285142EB14AECF45B32179EFD7792F7914C8596FE98864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220852b9734831d5dcec476285142eb14aecf45b32179efd7792f7914c8596fe98864736f6c63430008130033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"contracts/Staking/staking.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xCE 0xF8 0xAD 0xA9 0xCC ORIGIN 0xB6 DELEGATECALL 0xCD LOG3 DUP4 0xEA 0x1F 0xF PUSH18 0x628057C0662187477208A19291A51DA06473 PUSH16 0x6C634300081300330000000000000000 ",
							"sourceMap": "194:8964:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xCE 0xF8 0xAD 0xA9 0xCC ORIGIN 0xB6 DELEGATECALL 0xCD LOG3 DUP4 0xEA 0x1F 0xF PUSH18 0x628057C0662187477208A19291A51DA06473 PUSH16 0x6C634300081300330000000000000000 ",
							"sourceMap": "194:8964:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122042cef8ada9cc32b6f4cda383ea1f0f71628057c0662187477208a19291a51da064736f6c63430008130033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"contracts/Staking/staking.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Staking/staking.sol": {
				"TokenStaking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "APY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "APYPer",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "BurnAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ClaimRewards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_payment",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								}
							],
							"name": "DepositTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "depositTokens",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakeTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "InterestAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "RewardAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Month1",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month2",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month3",
									"type": "uint256"
								}
							],
							"name": "SetAPY",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Month1Per",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month2Per",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Month3Per",
									"type": "uint256"
								}
							],
							"name": "SetRewardPersentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Tokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "WithdrawTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTaxPenalty",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tax",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pen",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "taxFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_penalty",
									"type": "uint256"
								}
							],
							"name": "setTexAndPenalty",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalStakedTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "viewBurnRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "viewRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Staking/staking.sol\":201:11859  contract TokenStaking is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Staking/staking.sol\":1164:1279  constructor(address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/Staking/staking.sol\":1209:1221  ERC20Address */\n  0x01\n    /* \"contracts/Staking/staking.sol\":1209:1237  ERC20Address = _ERC20Address */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap3\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap3\n  dup4\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/Staking/staking.sol\":1247:1259  ownerAddress */\n  0x02\n    /* \"contracts/Staking/staking.sol\":1247:1272  ownerAddress = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"contracts/Staking/staking.sol\":1262:1272  msg.sender */\n  caller\n    /* \"contracts/Staking/staking.sol\":1247:1272  ownerAddress = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/Staking/staking.sol\":201:11859  contract TokenStaking is Ownable {... */\n  jump(tag_15)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_17\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_17:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_18:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_15:\n    /* \"contracts/Staking/staking.sol\":201:11859  contract TokenStaking is Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Staking/staking.sol\":201:11859  contract TokenStaking is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa6021ace\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa6021ace\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd6f80a25\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xda40ef80\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x777b4cd8\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x897b3a68\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x9131a05a\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x21736665\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x21736665\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x22b72666\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x264b4af6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x2e886f1f\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x3ae73259\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x662b12c9\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x0178be5f\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x032ad8fb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x0deef63a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x10c404da\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x186cb65b\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Staking/staking.sol\":9270:9949  function ClaimRewards(address to) public {... */\n    tag_3:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      stop\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_33:\n      tag_34\n      jump\t// in\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":529:554   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking/staking.sol\":780:821  mapping(address => uint256) public Tokens */\n    tag_5:\n      tag_32\n      tag_38\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_38:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":2034:4538  function DepositTokens(... */\n    tag_6:\n      tag_28\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":689:727  mapping(uint256 => uint256) public APY */\n    tag_7:\n      tag_32\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":10948:11141  function SetAPY(... */\n    tag_8:\n      tag_28\n      tag_51\n      calldatasize\n      0x04\n      tag_52\n      jump\t// in\n    tag_51:\n      tag_53\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":880:925  mapping(address => uint256) public BurnAmount */\n    tag_9:\n      tag_32\n      tag_55\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_55:\n      mstore(0x20, 0x0d)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":11617:11741  function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {... */\n    tag_10:\n      tag_28\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n        /* \"contracts/Staking/staking.sol\":11694:11697  Tax */\n      0x05\n        /* \"contracts/Staking/staking.sol\":11694:11706  Tax = taxFee */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Staking/staking.sol\":11716:11723  penalty */\n      0x06\n        /* \"contracts/Staking/staking.sol\":11716:11734  penalty = _penalty */\n      sstore\n        /* \"contracts/Staking/staking.sol\":11617:11741  function setTexAndPenalty(uint256 taxFee, uint256 _penalty) public {... */\n      jump\n        /* \"contracts/Staking/staking.sol\":11747:11857  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n    tag_11:\n        /* \"contracts/Staking/staking.sol\":11837:11840  Tax */\n      sload(0x05)\n        /* \"contracts/Staking/staking.sol\":11842:11849  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/staking.sol\":11747:11857  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1894:1919   */\n      swap3\n      dup4\n      mstore\n        /* \"#utility.yul\":1950:1952   */\n      0x20\n        /* \"#utility.yul\":1935:1953   */\n      dup4\n      add\n        /* \"#utility.yul\":1928:1962   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":1867:1885   */\n      add\n        /* \"contracts/Staking/staking.sol\":11747:11857  function getTaxPenalty() public view returns (uint256 tax, uint256 pen) {... */\n      tag_35\n        /* \"#utility.yul\":1720:1968   */\n      jump\n        /* \"contracts/Staking/staking.sol\":331:363  uint256 public totalStakedTokens */\n    tag_12:\n      tag_32\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":634:683  mapping(address => uint256) public InterestAmount */\n    tag_13:\n      tag_32\n      tag_70\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_70:\n      mstore(0x20, 0x08)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_28\n      tag_74\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":827:874  mapping(address => uint256) public RewardAmount */\n    tag_15:\n      tag_32\n      tag_76\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_76:\n      mstore(0x20, 0x0c)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":733:774  mapping(uint256 => uint256) public APYPer */\n    tag_16:\n      tag_32\n      tag_80\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_80:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_83:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2137:2169   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2119:2170   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2107:2109   */\n      0x20\n        /* \"#utility.yul\":2092:2110   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      tag_35\n        /* \"#utility.yul\":1973:2176   */\n      jump\n        /* \"contracts/Staking/staking.sol\":4734:9075  function WithdrawTokens(address to) public {... */\n    tag_18:\n      tag_28\n      tag_88\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_88:\n      tag_89\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":272:299  address public ERC20Address */\n    tag_19:\n      sload(0x01)\n      tag_83\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Staking/staking.sol\":1506:1738  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n    tag_20:\n      tag_28\n      tag_94\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":11252:11485  function SetRewardPersentage(... */\n    tag_21:\n      tag_28\n      tag_97\n      calldatasize\n      0x04\n      tag_52\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":9955:10571  function viewRewards(address to) public view returns (uint256 reward) {... */\n    tag_22:\n      tag_32\n      tag_100\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":587:628  mapping(address => Staker) public Details */\n    tag_23:\n      tag_103\n      tag_104\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_104:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      dup5\n      add\n      sload\n      0x04\n      swap1\n      swap5\n      add\n      sload\n      swap3\n      swap4\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup6\n      jump\n    tag_103:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":2434:2459   */\n      swap6\n      dup7\n      mstore\n        /* \"#utility.yul\":2490:2492   */\n      0x20\n        /* \"#utility.yul\":2475:2493   */\n      dup7\n      add\n        /* \"#utility.yul\":2468:2502   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":2518:2536   */\n      swap3\n      dup5\n      add\n        /* \"#utility.yul\":2511:2545   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2576:2578   */\n      0x60\n        /* \"#utility.yul\":2561:2579   */\n      dup4\n      add\n        /* \"#utility.yul\":2554:2588   */\n      mstore\n        /* \"#utility.yul\":2632:2646   */\n      iszero\n        /* \"#utility.yul\":2625:2647   */\n      iszero\n        /* \"#utility.yul\":2619:2622   */\n      0x80\n        /* \"#utility.yul\":2604:2623   */\n      dup3\n      add\n        /* \"#utility.yul\":2597:2648   */\n      mstore\n        /* \"#utility.yul\":2421:2424   */\n      0xa0\n        /* \"#utility.yul\":2406:2425   */\n      add\n        /* \"contracts/Staking/staking.sol\":587:628  mapping(address => Staker) public Details */\n      tag_35\n        /* \"#utility.yul\":2181:2654   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_28\n      tag_109\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":9270:9949  function ClaimRewards(address to) public {... */\n    tag_31:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9380:9391  Details[to] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9380:9387  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":9380:9391  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":9380:9401  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":9344:9366  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":9421:9436  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/staking.sol\":9380:9401  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/staking.sol\":9344:9371  Details[to].StakeMonth * 10 */\n      tag_112\n      swap1\n        /* \"contracts/Staking/staking.sol\":9369:9371  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":9344:9371  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"contracts/Staking/staking.sol\":9344:9376  Details[to].StakeMonth * 10 * 60 */\n      tag_114\n      swap1\n        /* \"contracts/Staking/staking.sol\":9374:9376  60 */\n      0x3c\n        /* \"contracts/Staking/staking.sol\":9344:9376  Details[to].StakeMonth * 10 * 60 */\n      tag_113\n      jump\t// in\n    tag_114:\n        /* \"contracts/Staking/staking.sol\":9343:9401  (Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime */\n      tag_115\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"contracts/Staking/staking.sol\":9342:9436  ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >... */\n      gt\n        /* \"contracts/Staking/staking.sol\":9321:9519  require(... */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3296:3298   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":9321:9519  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3278:3299   */\n      mstore\n        /* \"#utility.yul\":3335:3337   */\n      0x39\n        /* \"#utility.yul\":3315:3333   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3308:3338   */\n      mstore\n        /* \"#utility.yul\":3374:3408   */\n      0x596f7572205374616b652054696d6520436f6d706c6574652c20506c65617365\n        /* \"#utility.yul\":3354:3372   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3347:3409   */\n      mstore\n        /* \"#utility.yul\":3445:3472   */\n      0x2043616c6c2057697468647261772046756e6374696f6e202100000000000000\n        /* \"#utility.yul\":3425:3443   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3418:3473   */\n      mstore\n        /* \"#utility.yul\":3490:3509   */\n      0x84\n      add\n        /* \"contracts/Staking/staking.sol\":9321:9519  require(... */\n    tag_118:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_117:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9567:9578  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":9529:9545  uint256 Stakdays */\n      0x00\n        /* \"contracts/Staking/staking.sol\":9567:9578  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9567:9574  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":9567:9578  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":9567:9588  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":9593:9595  60 */\n      0x3c\n      swap1\n        /* \"contracts/Staking/staking.sol\":9549:9588  block.timestamp - Details[to].stakeTime */\n      tag_120\n      swap1\n        /* \"contracts/Staking/staking.sol\":9549:9564  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/staking.sol\":9549:9588  block.timestamp - Details[to].stakeTime */\n      tag_121\n      jump\t// in\n    tag_120:\n        /* \"contracts/Staking/staking.sol\":9548:9596  (block.timestamp - Details[to].stakeTime) / (60) */\n      tag_122\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9671:9682  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/staking.sol\":9606:9634  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/staking.sol\":9671:9682  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9671:9678  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":9671:9682  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":9671:9693  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":9529:9596  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":9606:9634  uint256 InterestAmountperday */\n      swap1\n        /* \"contracts/Staking/staking.sol\":9671:9698  Details[to].StakeMonth * 10 */\n      tag_124\n      swap1\n        /* \"contracts/Staking/staking.sol\":9696:9698  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":9671:9698  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9637:9655  InterestAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9637:9651  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":9637:9655  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":9637:9699  InterestAmount[to] /... */\n      tag_125\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_125:\n        /* \"contracts/Staking/staking.sol\":9606:9699  uint256 InterestAmountperday = InterestAmount[to] /... */\n      swap1\n      pop\n        /* \"contracts/Staking/staking.sol\":9709:9726  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/staking.sol\":9729:9760  InterestAmountperday * Stakdays */\n      tag_126\n        /* \"contracts/Staking/staking.sol\":9752:9760  Stakdays */\n      dup4\n        /* \"contracts/Staking/staking.sol\":9606:9699  uint256 InterestAmountperday = InterestAmount[to] /... */\n      dup4\n        /* \"contracts/Staking/staking.sol\":9729:9760  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_126:\n        /* \"contracts/Staking/staking.sol\":9709:9760  uint256 EarnToken = InterestAmountperday * Stakdays */\n      swap1\n      pop\n        /* \"contracts/Staking/staking.sol\":9790:9791  0 */\n      0x00\n        /* \"contracts/Staking/staking.sol\":9778:9787  EarnToken */\n      dup2\n        /* \"contracts/Staking/staking.sol\":9778:9791  EarnToken > 0 */\n      gt\n        /* \"contracts/Staking/staking.sol\":9770:9829  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4077:4079   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":9770:9829  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4059:4080   */\n      mstore\n        /* \"#utility.yul\":4116:4118   */\n      0x21\n        /* \"#utility.yul\":4096:4114   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4089:4119   */\n      mstore\n        /* \"#utility.yul\":4155:4189   */\n      0x526577617264206d7573742062652067726561746572207468616e207a65726f\n        /* \"#utility.yul\":4135:4153   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4128:4190   */\n      mstore\n      shl(0xf9, 0x17)\n        /* \"#utility.yul\":4206:4224   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4199:4230   */\n      mstore\n        /* \"#utility.yul\":4247:4266   */\n      0x84\n      add\n        /* \"contracts/Staking/staking.sol\":9770:9829  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n      tag_118\n        /* \"#utility.yul\":3875:4272   */\n      jump\n        /* \"contracts/Staking/staking.sol\":9770:9829  require(EarnToken > 0, \"Reward must be greater than zero.\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9871:9887  RewardAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9871:9883  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":9871:9887  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":9859:9887  EarnToken - RewardAmount[to] */\n      tag_130\n      swap1\n        /* \"contracts/Staking/staking.sol\":9859:9868  EarnToken */\n      dup3\n        /* \"contracts/Staking/staking.sol\":9859:9887  EarnToken - RewardAmount[to] */\n      tag_121\n      jump\t// in\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9839:9855  RewardAmount[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9839:9851  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":9839:9855  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":9839:9887  RewardAmount[to] += EarnToken - RewardAmount[to] */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":9839:9855  RewardAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/staking.sol\":9839:9887  RewardAmount[to] += EarnToken - RewardAmount[to] */\n      tag_131\n      swap1\n      dup5\n      swap1\n      tag_116\n      jump\t// in\n    tag_131:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":9905:9917  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":9898:9942  IERC20(ERC20Address).transfer(to, EarnToken) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9905:9917  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":9898:9927  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":9898:9942  IERC20(ERC20Address).transfer(to, EarnToken) */\n      tag_132\n      swap1\n        /* \"contracts/Staking/staking.sol\":9928:9930  to */\n      dup8\n      swap1\n        /* \"contracts/Staking/staking.sol\":9932:9941  EarnToken */\n      dup6\n      swap1\n        /* \"contracts/Staking/staking.sol\":9898:9942  IERC20(ERC20Address).transfer(to, EarnToken) */\n      0x04\n      add\n      tag_133\n      jump\t// in\n    tag_132:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_135\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_135:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n      pop\n        /* \"contracts/Staking/staking.sol\":9311:9949  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":9270:9949  function ClaimRewards(address to) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n    tag_34:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10663:10674  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":10634:10648  uint256 reward */\n      0x00\n        /* \"contracts/Staking/staking.sol\":10663:10674  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10663:10670  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":10663:10674  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":10663:10689  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10693:10696  100 */\n      0x64\n        /* \"contracts/Staking/staking.sol\":10663:10696  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/staking.sol\":10660:10832  if(Details[to].EarnPersentage == 100){... */\n      tag_139\n      jumpi\n      pop\n        /* \"contracts/Staking/staking.sol\":10718:10719  0 */\n      0x00\n      swap2\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":10660:10832  if(Details[to].EarnPersentage == 100){... */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10789:10800  Details[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10789:10796  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":10789:10800  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":10789:10815  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10818:10821  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/staking.sol\":10785:10815  100-Details[to].EarnPersentage */\n      tag_141\n      swap1\n        /* \"contracts/Staking/staking.sol\":10818:10821  100 */\n      dup3\n        /* \"contracts/Staking/staking.sol\":10785:10815  100-Details[to].EarnPersentage */\n      tag_121\n      jump\t// in\n    tag_141:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10765:10783  InterestAmount[to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10765:10779  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":10765:10783  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":10765:10816  InterestAmount[to]*(100-Details[to].EarnPersentage) */\n      tag_142\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_142:\n        /* \"contracts/Staking/staking.sol\":10764:10821  (InterestAmount[to]*(100-Details[to].EarnPersentage))/100 */\n      tag_143\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_143:\n        /* \"contracts/Staking/staking.sol\":10757:10821  return (InterestAmount[to]*(100-Details[to].EarnPersentage))/100 */\n      swap3\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":10660:10832  if(Details[to].EarnPersentage == 100){... */\n    tag_140:\n        /* \"contracts/Staking/staking.sol\":10576:10838  function viewBurnRewards(address to) public view returns (uint256 reward) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":2034:4538  function DepositTokens(... */\n    tag_44:\n        /* \"contracts/Staking/staking.sol\":2201:2213  ownerAddress */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Staking/staking.sol\":2217:2218  0 */\n      0x00\n        /* \"contracts/Staking/staking.sol\":2194:2214  Tokens[ownerAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2194:2200  Tokens */\n      0x0b\n        /* \"contracts/Staking/staking.sol\":2194:2214  Tokens[ownerAddress] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":2186:2238  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      tag_145\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5040:5042   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":2186:2238  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5022:5043   */\n      mstore\n        /* \"#utility.yul\":5079:5081   */\n      0x0f\n        /* \"#utility.yul\":5059:5077   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5052:5082   */\n      mstore\n      shl(0x88, 0x506c65617365205761697420212121)\n        /* \"#utility.yul\":5098:5116   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5091:5136   */\n      mstore\n        /* \"#utility.yul\":5153:5171   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":2186:2238  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n      tag_118\n        /* \"#utility.yul\":4838:5177   */\n      jump\n        /* \"contracts/Staking/staking.sol\":2186:2238  require(Tokens[ownerAddress] > 0, \"Please Wait !!!\") */\n    tag_145:\n        /* \"contracts/Staking/staking.sol\":2248:2263  uint256 _amount */\n      0x00\n        /* \"contracts/Staking/staking.sol\":2266:2287  _payment * 1000000000 */\n      tag_148\n        /* \"contracts/Staking/staking.sol\":2266:2274  _payment */\n      dup5\n        /* \"contracts/Staking/staking.sol\":2277:2287  1000000000 */\n      0x3b9aca00\n        /* \"contracts/Staking/staking.sol\":2266:2287  _payment * 1000000000 */\n      tag_113\n      jump\t// in\n    tag_148:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2301:2312  Details[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2301:2308  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2301:2312  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2301:2318  Details[to].check */\n      0x04\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2248:2287  uint256 _amount = _payment * 1000000000 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Staking/staking.sol\":2301:2318  Details[to].check */\n      0xff\n      and\n        /* \"contracts/Staking/staking.sol\":2297:4463  if (Details[to].check) {... */\n      iszero\n      tag_149\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2380:2391  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2380:2387  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2380:2391  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2380:2401  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2344:2366  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2404:2419  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/staking.sol\":2380:2401  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/staking.sol\":2344:2371  Details[to].StakeMonth * 10 */\n      tag_150\n      swap1\n        /* \"contracts/Staking/staking.sol\":2369:2371  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":2344:2371  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_150:\n        /* \"contracts/Staking/staking.sol\":2344:2376  Details[to].StakeMonth * 10 * 60 */\n      tag_151\n      swap1\n        /* \"contracts/Staking/staking.sol\":2374:2376  60 */\n      0x3c\n        /* \"contracts/Staking/staking.sol\":2344:2376  Details[to].StakeMonth * 10 * 60 */\n      tag_113\n      jump\t// in\n    tag_151:\n        /* \"contracts/Staking/staking.sol\":2343:2401  (Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime */\n      tag_152\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_152:\n        /* \"contracts/Staking/staking.sol\":2342:2419  ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp */\n      gt\n        /* \"contracts/Staking/staking.sol\":2334:2449  require(((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      tag_153\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5384:5386   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":2334:2449  require(((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5366:5387   */\n      mstore\n        /* \"#utility.yul\":5423:5425   */\n      0x1a\n        /* \"#utility.yul\":5403:5421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5396:5426   */\n      mstore\n        /* \"#utility.yul\":5462:5490   */\n      0x596f75722054696d6520506572696f6420436f6d706c6574652e000000000000\n        /* \"#utility.yul\":5442:5460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5435:5491   */\n      mstore\n        /* \"#utility.yul\":5508:5526   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":2334:2449  require(((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n      tag_118\n        /* \"#utility.yul\":5182:5532   */\n      jump\n        /* \"contracts/Staking/staking.sol\":2334:2449  require(((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) >block.timestamp,\"Your Time Period Complete.\") */\n    tag_153:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2488:2499  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2488:2495  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2488:2499  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2488:2510  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2488:2524  Details[to].StakeMonth == StakeMonth */\n      dup4\n      eq\n        /* \"contracts/Staking/staking.sol\":2463:2580  require(... */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5739:5741   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":2463:2580  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5721:5742   */\n      mstore\n        /* \"#utility.yul\":5778:5780   */\n      0x16\n        /* \"#utility.yul\":5758:5776   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5751:5781   */\n      mstore\n      shl(0x53, 0x08adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d)\n        /* \"#utility.yul\":5797:5815   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5790:5842   */\n      mstore\n        /* \"#utility.yul\":5859:5877   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":2463:2580  require(... */\n      tag_118\n        /* \"#utility.yul\":5537:5883   */\n      jump\n        /* \"contracts/Staking/staking.sol\":2463:2580  require(... */\n    tag_156:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2619:2630  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2619:2626  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2619:2630  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2619:2645  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2619:2663  Details[to].EarnPersentage == EarnPersentage */\n      dup3\n      eq\n        /* \"contracts/Staking/staking.sol\":2594:2723  require(... */\n      tag_159\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6090:6092   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":2594:2723  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6072:6093   */\n      mstore\n        /* \"#utility.yul\":6129:6131   */\n      0x1a\n        /* \"#utility.yul\":6109:6127   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6102:6132   */\n      mstore\n        /* \"#utility.yul\":6168:6196   */\n      0x456e746572205269676874204561726e50657273656e74616765000000000000\n        /* \"#utility.yul\":6148:6166   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6141:6197   */\n      mstore\n        /* \"#utility.yul\":6214:6232   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":2594:2723  require(... */\n      tag_118\n        /* \"#utility.yul\":5888:6238   */\n      jump\n        /* \"contracts/Staking/staking.sol\":2594:2723  require(... */\n    tag_159:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2765:2776  Details[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2765:2772  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2765:2776  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2765:2790  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":2765:2800  Details[to].depositTokens + _amount */\n      tag_162\n      swap1\n        /* \"contracts/Staking/staking.sol\":2793:2800  _amount */\n      dup3\n      swap1\n        /* \"contracts/Staking/staking.sol\":2765:2800  Details[to].depositTokens + _amount */\n      tag_116\n      jump\t// in\n    tag_162:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2737:2748  Details[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2737:2744  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2737:2748  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2737:2800  Details[to].depositTokens = Details[to].depositTokens + _amount */\n      swap1\n      dup2\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2844:2850  APY[1] */\n      sload\n        /* \"contracts/Staking/staking.sol\":2818:2840  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2818:2850  Details[to].StakeMonth == APY[1] */\n      sub\n        /* \"contracts/Staking/staking.sol\":2814:3189  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_163\n      jumpi\n        /* \"contracts/Staking/staking.sol\":2910:2911  1 */\n      0x01\n        /* \"contracts/Staking/staking.sol\":2903:2912  APYPer[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":2903:2909  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":2903:2912  APYPer[1] */\n      0x20\n      mstore\n      sload(0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7)\n        /* \"contracts/Staking/staking.sol\":2916:2920  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":2893:2912  _amount * APYPer[1] */\n      tag_164\n      swap1\n        /* \"contracts/Staking/staking.sol\":2893:2900  _amount */\n      dup4\n        /* \"contracts/Staking/staking.sol\":2893:2912  _amount * APYPer[1] */\n      tag_113\n      jump\t// in\n    tag_164:\n        /* \"contracts/Staking/staking.sol\":2892:2920  (_amount * APYPer[1]) / 1000 */\n      tag_165\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2870:2888  InterestAmount[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2870:2884  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":2870:2888  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2870:2920  InterestAmount[to] += (_amount * APYPer[1]) / 1000 */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":2870:2888  InterestAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/staking.sol\":2870:2920  InterestAmount[to] += (_amount * APYPer[1]) / 1000 */\n      tag_166\n      swap1\n      dup5\n      swap1\n      tag_116\n      jump\t// in\n    tag_166:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/Staking/staking.sol\":2814:3189  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_173\n      swap1\n      pop\n      jump\n    tag_163:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2971:2977  APY[2] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":2945:2956  Details[to] */\n      dup7\n      and\n        /* \"contracts/Staking/staking.sol\":2971:2977  APY[2] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":2945:2956  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":2945:2952  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":2971:2977  APY[2] */\n      0x20\n        /* \"contracts/Staking/staking.sol\":2945:2956  Details[to] */\n      mstore\n        /* \"contracts/Staking/staking.sol\":2971:2977  APY[2] */\n      0x40\n        /* \"contracts/Staking/staking.sol\":2945:2956  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":2975:2976  2 */\n      0x02\n        /* \"contracts/Staking/staking.sol\":2945:2967  Details[to].StakeMonth */\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":2945:2977  Details[to].StakeMonth == APY[2] */\n      sub\n        /* \"contracts/Staking/staking.sol\":2941:3189  if (Details[to].StakeMonth == APY[2]) {... */\n      tag_168\n      jumpi\n        /* \"contracts/Staking/staking.sol\":3037:3038  2 */\n      0x02\n        /* \"contracts/Staking/staking.sol\":3030:3039  APYPer[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":3030:3036  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":3030:3039  APYPer[2] */\n      0x20\n      mstore\n      sload(0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8)\n        /* \"contracts/Staking/staking.sol\":3043:3047  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":3020:3039  _amount * APYPer[2] */\n      tag_164\n      swap1\n        /* \"contracts/Staking/staking.sol\":3020:3027  _amount */\n      dup4\n        /* \"contracts/Staking/staking.sol\":3020:3039  _amount * APYPer[2] */\n      tag_113\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":2941:3189  if (Details[to].StakeMonth == APY[2]) {... */\n    tag_168:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3098:3104  APY[3] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":3072:3083  Details[to] */\n      dup7\n      and\n        /* \"contracts/Staking/staking.sol\":3098:3104  APY[3] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":3072:3083  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3072:3079  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":3098:3104  APY[3] */\n      0x20\n        /* \"contracts/Staking/staking.sol\":3072:3083  Details[to] */\n      mstore\n        /* \"contracts/Staking/staking.sol\":3098:3104  APY[3] */\n      0x40\n        /* \"contracts/Staking/staking.sol\":3072:3083  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":3072:3094  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":3072:3104  Details[to].StakeMonth == APY[3] */\n      sub\n        /* \"contracts/Staking/staking.sol\":3068:3189  if (Details[to].StakeMonth == APY[3]) {... */\n      tag_173\n      jumpi\n        /* \"contracts/Staking/staking.sol\":3164:3165  3 */\n      0x03\n        /* \"contracts/Staking/staking.sol\":3157:3166  APYPer[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":3157:3163  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":3157:3166  APYPer[3] */\n      0x20\n      mstore\n      sload(0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759)\n        /* \"contracts/Staking/staking.sol\":3170:3174  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":3147:3166  _amount * APYPer[3] */\n      tag_174\n      swap1\n        /* \"contracts/Staking/staking.sol\":3147:3154  _amount */\n      dup4\n        /* \"contracts/Staking/staking.sol\":3147:3166  _amount * APYPer[3] */\n      tag_113\n      jump\t// in\n    tag_174:\n        /* \"contracts/Staking/staking.sol\":3146:3174  (_amount * APYPer[3]) / 1000 */\n      tag_175\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_175:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":3124:3142  InterestAmount[to] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3124:3138  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":3124:3142  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":3124:3174  InterestAmount[to] += (_amount * APYPer[3]) / 1000 */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":3124:3142  InterestAmount[to] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Staking/staking.sol\":3124:3174  InterestAmount[to] += (_amount * APYPer[3]) / 1000 */\n      tag_176\n      swap1\n      dup5\n      swap1\n      tag_116\n      jump\t// in\n    tag_176:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":3068:3189  if (Details[to].StakeMonth == APY[3]) {... */\n    tag_173:\n        /* \"contracts/Staking/staking.sol\":3209:3221  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":3202:3267  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      tag_177\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":3209:3221  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":3240:3242  to */\n      dup7\n        /* \"contracts/Staking/staking.sol\":3252:3256  this */\n      address\n        /* \"contracts/Staking/staking.sol\":3259:3266  _amount */\n      dup5\n        /* \"contracts/Staking/staking.sol\":3202:3239  IERC20(ERC20Address).safeTransferFrom */\n      tag_178\n        /* \"contracts/Staking/staking.sol\":3202:3267  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      jump\t// in\n    tag_177:\n        /* \"contracts/Staking/staking.sol\":2297:4463  if (Details[to].check) {... */\n      jump(tag_179)\n    tag_149:\n        /* \"contracts/Staking/staking.sol\":3341:3342  1 */\n      0x01\n        /* \"contracts/Staking/staking.sol\":3337:3343  APY[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":3337:3340  APY */\n      0x09\n        /* \"contracts/Staking/staking.sol\":3337:3343  APY[1] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/staking.sol\":3323:3343  StakeMonth == APY[1] */\n      dup4\n      eq\n      dup1\n        /* \"contracts/Staking/staking.sol\":3323:3387  StakeMonth == APY[1] ||... */\n      tag_180\n      jumpi\n      pop\n        /* \"contracts/Staking/staking.sol\":3385:3386  2 */\n      0x02\n        /* \"contracts/Staking/staking.sol\":3381:3387  APY[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":3381:3384  APY */\n      0x09\n        /* \"contracts/Staking/staking.sol\":3381:3387  APY[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/staking.sol\":3367:3387  StakeMonth == APY[2] */\n      dup4\n      eq\n        /* \"contracts/Staking/staking.sol\":3323:3387  StakeMonth == APY[1] ||... */\n    tag_180:\n        /* \"contracts/Staking/staking.sol\":3323:3431  StakeMonth == APY[1] ||... */\n      dup1\n      tag_181\n      jumpi\n      pop\n        /* \"contracts/Staking/staking.sol\":3429:3430  3 */\n      0x03\n        /* \"contracts/Staking/staking.sol\":3425:3431  APY[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":3425:3428  APY */\n      0x09\n        /* \"contracts/Staking/staking.sol\":3425:3431  APY[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      sload\n        /* \"contracts/Staking/staking.sol\":3411:3431  StakeMonth == APY[3] */\n      dup4\n      eq\n        /* \"contracts/Staking/staking.sol\":3323:3431  StakeMonth == APY[1] ||... */\n    tag_181:\n        /* \"contracts/Staking/staking.sol\":3298:3487  require(... */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5739:5741   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":3298:3487  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5721:5742   */\n      mstore\n        /* \"#utility.yul\":5778:5780   */\n      0x16\n        /* \"#utility.yul\":5758:5776   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5751:5781   */\n      mstore\n      shl(0x53, 0x08adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d)\n        /* \"#utility.yul\":5797:5815   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5790:5842   */\n      mstore\n        /* \"#utility.yul\":5859:5877   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":3298:3487  require(... */\n      tag_118\n        /* \"#utility.yul\":5537:5883   */\n      jump\n        /* \"contracts/Staking/staking.sol\":3298:3487  require(... */\n    tag_182:\n        /* \"contracts/Staking/staking.sol\":3526:3540  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/staking.sol\":3544:3547  100 */\n      0x64\n        /* \"contracts/Staking/staking.sol\":3526:3547  EarnPersentage == 100 */\n      eq\n        /* \"contracts/Staking/staking.sol\":3526:3591  EarnPersentage == 100 ||... */\n      dup1\n      tag_184\n      jumpi\n      pop\n        /* \"contracts/Staking/staking.sol\":3571:3585  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/staking.sol\":3589:3591  75 */\n      0x4b\n        /* \"contracts/Staking/staking.sol\":3571:3591  EarnPersentage == 75 */\n      eq\n        /* \"contracts/Staking/staking.sol\":3526:3591  EarnPersentage == 100 ||... */\n    tag_184:\n        /* \"contracts/Staking/staking.sol\":3526:3635  EarnPersentage == 100 ||... */\n      dup1\n      tag_185\n      jumpi\n      pop\n        /* \"contracts/Staking/staking.sol\":3615:3629  EarnPersentage */\n      dup2\n        /* \"contracts/Staking/staking.sol\":3633:3635  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":3615:3635  EarnPersentage == 50 */\n      eq\n        /* \"contracts/Staking/staking.sol\":3526:3635  EarnPersentage == 100 ||... */\n    tag_185:\n        /* \"contracts/Staking/staking.sol\":3501:3695  require(... */\n      tag_186\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6090:6092   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":3501:3695  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6072:6093   */\n      mstore\n        /* \"#utility.yul\":6129:6131   */\n      0x1a\n        /* \"#utility.yul\":6109:6127   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6102:6132   */\n      mstore\n        /* \"#utility.yul\":6168:6196   */\n      0x456e746572205269676874204561726e50657273656e74616765000000000000\n        /* \"#utility.yul\":6148:6166   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6141:6197   */\n      mstore\n        /* \"#utility.yul\":6214:6232   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":3501:3695  require(... */\n      tag_118\n        /* \"#utility.yul\":5888:6238   */\n      jump\n        /* \"contracts/Staking/staking.sol\":3501:3695  require(... */\n    tag_186:\n        /* \"contracts/Staking/staking.sol\":3709:3725  uint256 AdminFee */\n      0x00\n        /* \"contracts/Staking/staking.sol\":3746:3750  1000 */\n      0x03e8\n        /* \"contracts/Staking/staking.sol\":3739:3742  Tax */\n      sload(0x05)\n        /* \"contracts/Staking/staking.sol\":3729:3736  _amount */\n      dup4\n        /* \"contracts/Staking/staking.sol\":3729:3742  _amount * Tax */\n      tag_188\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_188:\n        /* \"contracts/Staking/staking.sol\":3728:3750  (_amount * Tax) / 1000 */\n      tag_189\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_189:\n        /* \"contracts/Staking/staking.sol\":3709:3750  uint256 AdminFee = (_amount * Tax) / 1000 */\n      swap1\n      pop\n        /* \"contracts/Staking/staking.sol\":3778:3949  Staker(... */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Staking/staking.sol\":3812:3820  AdminFee */\n      dup3\n        /* \"contracts/Staking/staking.sol\":3802:3809  _amount */\n      dup5\n        /* \"contracts/Staking/staking.sol\":3802:3820  _amount - AdminFee */\n      tag_190\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_190:\n        /* \"contracts/Staking/staking.sol\":3778:3949  Staker(... */\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3838:3853  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/staking.sol\":3778:3949  Staker(... */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      dup1\n      dup4\n      add\n      dup9\n      swap1\n      mstore\n      0x60\n      dup1\n      dup5\n      add\n      dup9\n      swap1\n      mstore\n        /* \"contracts/Staking/staking.sol\":3931:3935  true */\n      0x01\n        /* \"contracts/Staking/staking.sol\":3778:3949  Staker(... */\n      0x80\n      swap5\n      dup6\n      add\n      dup2\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":3764:3775  Details[to] */\n      dup13\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3764:3771  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":3764:3775  Details[to] */\n      dup6\n      mstore\n      dup4\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":3764:3949  Details[to] = Staker(... */\n      dup7\n      mload\n      dup2\n      sstore\n      swap4\n      dup7\n      add\n      mload\n      swap1\n      dup5\n      add\n      sstore\n      swap1\n      dup5\n      add\n      mload\n      0x02\n      dup4\n      add\n      dup2\n      swap1\n      sstore\n      swap1\n      dup5\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      swap3\n      swap1\n      swap2\n      add\n      mload\n      0x04\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":3993:3999  APY[1] */\n      sload\n        /* \"contracts/Staking/staking.sol\":3967:3999  Details[to].StakeMonth == APY[1] */\n      swap1\n      sub\n        /* \"contracts/Staking/staking.sol\":3963:4374  if (Details[to].StakeMonth == APY[1]) {... */\n      tag_191\n      jumpi\n        /* \"contracts/Staking/staking.sol\":4071:4072  1 */\n      0x01\n        /* \"contracts/Staking/staking.sol\":4064:4073  APYPer[1] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":4064:4070  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":4064:4073  APYPer[1] */\n      0x20\n      mstore\n      sload(0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7)\n        /* \"contracts/Staking/staking.sol\":4077:4081  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":4042:4060  _amount - AdminFee */\n      tag_192\n        /* \"contracts/Staking/staking.sol\":4052:4060  AdminFee */\n      dup4\n        /* \"contracts/Staking/staking.sol\":4042:4049  _amount */\n      dup6\n        /* \"contracts/Staking/staking.sol\":4042:4060  _amount - AdminFee */\n      tag_121\n      jump\t// in\n    tag_192:\n        /* \"contracts/Staking/staking.sol\":4041:4073  (_amount - AdminFee) * APYPer[1] */\n      tag_193\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_193:\n        /* \"contracts/Staking/staking.sol\":4040:4081  ((_amount - AdminFee) * APYPer[1]) / 1000 */\n      tag_194\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4019:4037  InterestAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4019:4033  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":4019:4037  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4019:4081  InterestAmount[to] = ((_amount - AdminFee) * APYPer[1]) / 1000 */\n      sstore\n        /* \"contracts/Staking/staking.sol\":3963:4374  if (Details[to].StakeMonth == APY[1]) {... */\n      jump(tag_201)\n    tag_191:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4132:4138  APY[2] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4106:4117  Details[to] */\n      dup8\n      and\n        /* \"contracts/Staking/staking.sol\":4132:4138  APY[2] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":4106:4117  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4106:4113  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":4132:4138  APY[2] */\n      0x20\n        /* \"contracts/Staking/staking.sol\":4106:4117  Details[to] */\n      mstore\n        /* \"contracts/Staking/staking.sol\":4132:4138  APY[2] */\n      0x40\n        /* \"contracts/Staking/staking.sol\":4106:4117  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4136:4137  2 */\n      0x02\n        /* \"contracts/Staking/staking.sol\":4106:4128  Details[to].StakeMonth */\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":4106:4138  Details[to].StakeMonth == APY[2] */\n      sub\n        /* \"contracts/Staking/staking.sol\":4102:4374  if (Details[to].StakeMonth == APY[2]) {... */\n      tag_196\n      jumpi\n        /* \"contracts/Staking/staking.sol\":4210:4211  2 */\n      0x02\n        /* \"contracts/Staking/staking.sol\":4203:4212  APYPer[2] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":4203:4209  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":4203:4212  APYPer[2] */\n      0x20\n      mstore\n      sload(0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8)\n        /* \"contracts/Staking/staking.sol\":4216:4220  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":4181:4199  _amount - AdminFee */\n      tag_192\n        /* \"contracts/Staking/staking.sol\":4191:4199  AdminFee */\n      dup4\n        /* \"contracts/Staking/staking.sol\":4181:4188  _amount */\n      dup6\n        /* \"contracts/Staking/staking.sol\":4181:4199  _amount - AdminFee */\n      tag_121\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":4102:4374  if (Details[to].StakeMonth == APY[2]) {... */\n    tag_196:\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4271:4277  APY[3] */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4245:4256  Details[to] */\n      dup8\n      and\n        /* \"contracts/Staking/staking.sol\":4271:4277  APY[3] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":4245:4256  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4245:4252  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":4271:4277  APY[3] */\n      0x20\n        /* \"contracts/Staking/staking.sol\":4245:4256  Details[to] */\n      mstore\n        /* \"contracts/Staking/staking.sol\":4271:4277  APY[3] */\n      0x40\n        /* \"contracts/Staking/staking.sol\":4245:4256  Details[to] */\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4245:4267  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":4245:4277  Details[to].StakeMonth == APY[3] */\n      sub\n        /* \"contracts/Staking/staking.sol\":4241:4374  if (Details[to].StakeMonth == APY[3]) {... */\n      tag_201\n      jumpi\n        /* \"contracts/Staking/staking.sol\":4349:4350  3 */\n      0x03\n        /* \"contracts/Staking/staking.sol\":4342:4351  APYPer[3] */\n      0x00\n      mstore\n        /* \"contracts/Staking/staking.sol\":4342:4348  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":4342:4351  APYPer[3] */\n      0x20\n      mstore\n      sload(0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759)\n        /* \"contracts/Staking/staking.sol\":4355:4359  1000 */\n      0x03e8\n      swap1\n        /* \"contracts/Staking/staking.sol\":4320:4338  _amount - AdminFee */\n      tag_202\n        /* \"contracts/Staking/staking.sol\":4330:4338  AdminFee */\n      dup4\n        /* \"contracts/Staking/staking.sol\":4320:4327  _amount */\n      dup6\n        /* \"contracts/Staking/staking.sol\":4320:4338  _amount - AdminFee */\n      tag_121\n      jump\t// in\n    tag_202:\n        /* \"contracts/Staking/staking.sol\":4319:4351  (_amount - AdminFee) * APYPer[3] */\n      tag_203\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_203:\n        /* \"contracts/Staking/staking.sol\":4318:4359  ((_amount - AdminFee) * APYPer[3]) / 1000 */\n      tag_204\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_204:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4297:4315  InterestAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4297:4311  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":4297:4315  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4297:4359  InterestAmount[to] = ((_amount - AdminFee) * APYPer[3]) / 1000 */\n      sstore\n        /* \"contracts/Staking/staking.sol\":4241:4374  if (Details[to].StakeMonth == APY[3]) {... */\n    tag_201:\n        /* \"contracts/Staking/staking.sol\":4394:4406  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":4387:4452  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      tag_205\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4394:4406  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":4425:4427  to */\n      dup8\n        /* \"contracts/Staking/staking.sol\":4437:4441  this */\n      address\n        /* \"contracts/Staking/staking.sol\":4444:4451  _amount */\n      dup6\n        /* \"contracts/Staking/staking.sol\":4387:4424  IERC20(ERC20Address).safeTransferFrom */\n      tag_178\n        /* \"contracts/Staking/staking.sol\":4387:4452  IERC20(ERC20Address).safeTransferFrom(to, address(this), _amount) */\n      jump\t// in\n    tag_205:\n        /* \"contracts/Staking/staking.sol\":3284:4463  {... */\n      pop\n        /* \"contracts/Staking/staking.sol\":2297:4463  if (Details[to].check) {... */\n    tag_179:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4472:4482  Tokens[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4472:4478  Tokens */\n      0x0b\n        /* \"contracts/Staking/staking.sol\":4472:4482  Tokens[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4472:4493  Tokens[to] += _amount */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":4486:4493  _amount */\n      dup4\n      swap3\n        /* \"contracts/Staking/staking.sol\":4472:4482  Tokens[to] */\n      swap1\n        /* \"contracts/Staking/staking.sol\":4472:4493  Tokens[to] += _amount */\n      tag_206\n      swap1\n        /* \"contracts/Staking/staking.sol\":4486:4493  _amount */\n      dup5\n      swap1\n        /* \"contracts/Staking/staking.sol\":4472:4493  Tokens[to] += _amount */\n      tag_116\n      jump\t// in\n    tag_206:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/staking.sol\":4524:4531  _amount */\n      dup1\n        /* \"contracts/Staking/staking.sol\":4503:4520  totalStakedTokens */\n      0x03\n      0x00\n        /* \"contracts/Staking/staking.sol\":4503:4531  totalStakedTokens += _amount */\n      dup3\n      dup3\n      sload\n      tag_207\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_207:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":2034:4538  function DepositTokens(... */\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":10948:11141  function SetAPY(... */\n    tag_53:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_209\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_210\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_209:\n        /* \"contracts/Staking/staking.sol\":11069:11072  APY */\n      0x09\n        /* \"contracts/Staking/staking.sol\":11069:11075  APY[1] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":11069:11084  APY[1] = Month1 */\n      swap3\n      swap1\n      swap3\n      sstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":11094:11109  APY[2] = Month2 */\n      sstore\n        /* \"contracts/Staking/staking.sol\":11123:11124  3 */\n      0x03\n        /* \"contracts/Staking/staking.sol\":11069:11075  APY[1] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":11119:11125  APY[3] */\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/Staking/staking.sol\":11119:11134  APY[3] = Month3 */\n      sstore\n        /* \"contracts/Staking/staking.sol\":10948:11141  function SetAPY(... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_215\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_210\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_215:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_217\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_218\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_217:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":4734:9075  function WithdrawTokens(address to) public {... */\n    tag_89:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4795:4806  Details[to] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4795:4802  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":4795:4806  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4795:4812  Details[to].check */\n      0x04\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Staking/staking.sol\":4787:4835  require(Details[to].check, \"First Stake Tokens\") */\n      tag_221\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6445:6447   */\n      0x20\n        /* \"contracts/Staking/staking.sol\":4787:4835  require(Details[to].check, \"First Stake Tokens\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6427:6448   */\n      mstore\n        /* \"#utility.yul\":6484:6486   */\n      0x12\n        /* \"#utility.yul\":6464:6482   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6457:6487   */\n      mstore\n      shl(0x70, 0x4669727374205374616b6520546f6b656e73)\n        /* \"#utility.yul\":6503:6521   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6496:6544   */\n      mstore\n        /* \"#utility.yul\":6561:6579   */\n      0x64\n      add\n        /* \"contracts/Staking/staking.sol\":4787:4835  require(Details[to].check, \"First Stake Tokens\") */\n      tag_118\n        /* \"#utility.yul\":6243:6585   */\n      jump\n        /* \"contracts/Staking/staking.sol\":4787:4835  require(Details[to].check, \"First Stake Tokens\") */\n    tag_221:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":4954:4965  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":4845:4862  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/staking.sol\":4954:4965  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":4954:4961  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":4954:4965  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":4954:4975  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":4918:4940  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":4845:4862  uint256 EarnToken */\n      dup3\n      swap2\n        /* \"contracts/Staking/staking.sol\":4979:4994  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/staking.sol\":4918:4945  Details[to].StakeMonth * 10 */\n      tag_224\n      swap1\n        /* \"contracts/Staking/staking.sol\":4943:4945  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":4918:4945  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_224:\n        /* \"contracts/Staking/staking.sol\":4918:4950  Details[to].StakeMonth * 10 * 60 */\n      tag_225\n      swap1\n        /* \"contracts/Staking/staking.sol\":4948:4950  60 */\n      0x3c\n        /* \"contracts/Staking/staking.sol\":4918:4950  Details[to].StakeMonth * 10 * 60 */\n      tag_113\n      jump\t// in\n    tag_225:\n        /* \"contracts/Staking/staking.sol\":4917:4975  (Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime */\n      tag_226\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_226:\n        /* \"contracts/Staking/staking.sol\":4916:4994  ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) < block.timestamp */\n      lt\n        /* \"contracts/Staking/staking.sol\":4899:8861  if (... */\n      iszero\n      tag_227\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5014:5025  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5014:5021  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":5014:5025  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":5014:5040  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":5044:5047  100 */\n      0x64\n        /* \"contracts/Staking/staking.sol\":5014:5047  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/staking.sol\":5010:6488  if (Details[to].EarnPersentage == 100) {... */\n      tag_228\n      jumpi\n        /* \"contracts/Staking/staking.sol\":5074:5086  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5216:5232  RewardAmount[to] */\n      dup5\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":5074:5086  ERC20Address */\n      0x00\n        /* \"contracts/Staking/staking.sol\":5216:5232  RewardAmount[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5216:5228  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":5216:5232  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5195:5209  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":5195:5213  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5074:5086  ERC20Address */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/Staking/staking.sol\":5067:5096  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap2\n        /* \"contracts/Staking/staking.sol\":5118:5120  to */\n      dup7\n      swap2\n        /* \"contracts/Staking/staking.sol\":5195:5232  InterestAmount[to] - RewardAmount[to] */\n      tag_229\n      swap2\n      tag_121\n      jump\t// in\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5142:5153  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5142:5149  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":5142:5153  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":5142:5167  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":5142:5233  Details[to].depositTokens +... */\n      tag_230\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_230:\n        /* \"contracts/Staking/staking.sol\":5067:5251  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_231\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_231:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_233\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_233:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_234\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_234:\n      pop\n        /* \"contracts/Staking/staking.sol\":4899:8861  if (... */\n      jump(tag_269)\n        /* \"contracts/Staking/staking.sol\":5010:6488  if (Details[to].EarnPersentage == 100) {... */\n    tag_228:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5276:5287  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5276:5283  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":5276:5287  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":5276:5302  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":5306:5308  75 */\n      0x4b\n        /* \"contracts/Staking/staking.sol\":5276:5308  Details[to].EarnPersentage == 75 */\n      sub\n        /* \"contracts/Staking/staking.sol\":5272:6488  if (Details[to].EarnPersentage == 75) {... */\n      tag_236\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5383:5399  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5383:5395  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":5383:5399  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5362:5376  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":5362:5380  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5429:5432  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/staking.sol\":5362:5399  InterestAmount[to] - RewardAmount[to] */\n      tag_237\n      swap2\n      tag_121\n      jump\t// in\n    tag_237:\n        /* \"contracts/Staking/staking.sol\":5361:5405  (InterestAmount[to] - RewardAmount[to]) * 75 */\n      tag_238\n      swap1\n        /* \"contracts/Staking/staking.sol\":5403:5405  75 */\n      0x4b\n        /* \"contracts/Staking/staking.sol\":5361:5405  (InterestAmount[to] - RewardAmount[to]) * 75 */\n      tag_113\n      jump\t// in\n    tag_238:\n        /* \"contracts/Staking/staking.sol\":5360:5432  ((InterestAmount[to] - RewardAmount[to]) * 75) /... */\n      tag_239\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_239:\n        /* \"contracts/Staking/staking.sol\":5457:5469  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5525:5536  Details[to] */\n      dup6\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":5457:5469  ERC20Address */\n      0x00\n        /* \"contracts/Staking/staking.sol\":5525:5536  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5525:5532  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":5525:5536  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":5525:5550  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":5328:5432  EarnToken =... */\n      swap3\n      swap5\n      pop\n        /* \"contracts/Staking/staking.sol\":5457:5469  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":5450:5479  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":5501:5503  to */\n      dup6\n      swap1\n        /* \"contracts/Staking/staking.sol\":5525:5562  Details[to].depositTokens + EarnToken */\n      tag_240\n      swap1\n        /* \"contracts/Staking/staking.sol\":5328:5432  EarnToken =... */\n      dup7\n      swap1\n        /* \"contracts/Staking/staking.sol\":5525:5562  Details[to].depositTokens + EarnToken */\n      tag_116\n      jump\t// in\n    tag_240:\n        /* \"contracts/Staking/staking.sol\":5450:5580  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_241\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_241:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_243\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_243:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_244\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_244:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5653:5669  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5653:5665  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":5653:5669  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5632:5646  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":5632:5650  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5699:5702  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/staking.sol\":5632:5669  InterestAmount[to] - RewardAmount[to] */\n      tag_245\n      swap2\n      tag_121\n      jump\t// in\n    tag_245:\n        /* \"contracts/Staking/staking.sol\":5631:5675  (InterestAmount[to] - RewardAmount[to]) * 25 */\n      tag_246\n      swap1\n        /* \"contracts/Staking/staking.sol\":5673:5675  25 */\n      0x19\n        /* \"contracts/Staking/staking.sol\":5631:5675  (InterestAmount[to] - RewardAmount[to]) * 25 */\n      tag_113\n      jump\t// in\n    tag_246:\n        /* \"contracts/Staking/staking.sol\":5630:5702  ((InterestAmount[to] - RewardAmount[to]) * 25) /... */\n      tag_247\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_247:\n        /* \"contracts/Staking/staking.sol\":5727:5739  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":5720:5862  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5598:5702  BurnToken =... */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5727:5739  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":5720:5749  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":5720:5862  IERC20(ERC20Address).transfer(... */\n      tag_231\n      swap1\n        /* \"contracts/Staking/staking.sol\":5771:5813  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/staking.sol\":5598:5702  BurnToken =... */\n      dup6\n      swap1\n        /* \"contracts/Staking/staking.sol\":5720:5862  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_133\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":5272:6488  if (Details[to].EarnPersentage == 75) {... */\n    tag_236:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5887:5898  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5887:5894  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":5887:5898  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":5887:5913  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":5917:5919  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":5887:5919  Details[to].EarnPersentage == 50 */\n      sub\n        /* \"contracts/Staking/staking.sol\":5883:6488  if (Details[to].EarnPersentage == 50) {... */\n      tag_253\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":5994:6010  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":5994:6006  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":5994:6010  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":5973:5987  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":5973:5991  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":6040:6043  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/staking.sol\":5973:6010  InterestAmount[to] - RewardAmount[to] */\n      tag_254\n      swap2\n      tag_121\n      jump\t// in\n    tag_254:\n        /* \"contracts/Staking/staking.sol\":5972:6016  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_255\n      swap1\n        /* \"contracts/Staking/staking.sol\":6014:6016  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":5972:6016  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_113\n      jump\t// in\n    tag_255:\n        /* \"contracts/Staking/staking.sol\":5971:6043  ((InterestAmount[to] - RewardAmount[to]) * 50) /... */\n      tag_256\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_256:\n        /* \"contracts/Staking/staking.sol\":6068:6080  ERC20Address */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6136:6147  Details[to] */\n      dup6\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":6068:6080  ERC20Address */\n      0x00\n        /* \"contracts/Staking/staking.sol\":6136:6147  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6136:6143  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":6136:6147  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":6136:6161  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":5939:6043  EarnToken =... */\n      swap3\n      swap5\n      pop\n        /* \"contracts/Staking/staking.sol\":6068:6080  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":6061:6090  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":6112:6114  to */\n      dup6\n      swap1\n        /* \"contracts/Staking/staking.sol\":6136:6173  Details[to].depositTokens + EarnToken */\n      tag_257\n      swap1\n        /* \"contracts/Staking/staking.sol\":5939:6043  EarnToken =... */\n      dup7\n      swap1\n        /* \"contracts/Staking/staking.sol\":6136:6173  Details[to].depositTokens + EarnToken */\n      tag_116\n      jump\t// in\n    tag_257:\n        /* \"contracts/Staking/staking.sol\":6061:6191  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_258\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_258:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_260\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_260:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_261\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_261:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6264:6280  RewardAmount[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6264:6276  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":6264:6280  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":6243:6257  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":6243:6261  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":6310:6313  100 */\n      0x64\n      swap2\n        /* \"contracts/Staking/staking.sol\":6243:6280  InterestAmount[to] - RewardAmount[to] */\n      tag_262\n      swap2\n      tag_121\n      jump\t// in\n    tag_262:\n        /* \"contracts/Staking/staking.sol\":6242:6286  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_246\n      swap1\n        /* \"contracts/Staking/staking.sol\":6284:6286  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":6242:6286  (InterestAmount[to] - RewardAmount[to]) * 50 */\n      tag_113\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":5883:6488  if (Details[to].EarnPersentage == 50) {... */\n    tag_253:\n        /* \"contracts/Staking/staking.sol\":4899:8861  if (... */\n      jump(tag_269)\n    tag_227:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6660:6671  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/staking.sol\":6518:6546  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/staking.sol\":6660:6671  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6660:6667  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":6660:6671  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":6660:6681  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":6518:6546  uint256 InterestAmountperday */\n      dup2\n      swap1\n      dup2\n      swap1\n      dup2\n      swap1\n        /* \"contracts/Staking/staking.sol\":6686:6688  60 */\n      0x3c\n      swap1\n        /* \"contracts/Staking/staking.sol\":6642:6681  block.timestamp - Details[to].stakeTime */\n      tag_270\n      swap1\n        /* \"contracts/Staking/staking.sol\":6642:6657  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/staking.sol\":6642:6681  block.timestamp - Details[to].stakeTime */\n      tag_121\n      jump\t// in\n    tag_270:\n        /* \"contracts/Staking/staking.sol\":6641:6689  (block.timestamp - Details[to].stakeTime) / (60) */\n      tag_271\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_271:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6780:6791  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6780:6787  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":6780:6791  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":6780:6802  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":6622:6689  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Staking/staking.sol\":6780:6807  Details[to].StakeMonth * 10 */\n      tag_272\n      swap1\n        /* \"contracts/Staking/staking.sol\":6805:6807  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":6780:6807  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_272:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6742:6760  InterestAmount[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6742:6756  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":6742:6760  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":6742:6808  InterestAmount[to] /... */\n      tag_273\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_273:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":6870:6881  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":6870:6877  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":6870:6881  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":6870:6896  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":6703:6808  InterestAmountperday =... */\n      swap1\n      swap5\n      pop\n        /* \"contracts/Staking/staking.sol\":6900:6903  100 */\n      0x64\n        /* \"contracts/Staking/staking.sol\":6870:6903  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/staking.sol\":6866:8851  if (Details[to].EarnPersentage == 100) {... */\n      tag_274\n      jumpi\n        /* \"contracts/Staking/staking.sol\":6936:6967  InterestAmountperday * Stakdays */\n      tag_275\n        /* \"contracts/Staking/staking.sol\":6959:6967  Stakdays */\n      dup2\n        /* \"contracts/Staking/staking.sol\":6936:6956  InterestAmountperday */\n      dup6\n        /* \"contracts/Staking/staking.sol\":6936:6967  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_275:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7075:7091  RewardAmount[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7075:7087  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":7075:7091  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":6923:6968  EarnToken = (InterestAmountperday * Stakdays) */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/staking.sol\":7063:7091  EarnToken - RewardAmount[to] */\n      tag_276\n      swap1\n        /* \"contracts/Staking/staking.sol\":6923:6968  EarnToken = (InterestAmountperday * Stakdays) */\n      dup8\n        /* \"contracts/Staking/staking.sol\":7063:7091  EarnToken - RewardAmount[to] */\n      tag_121\n      jump\t// in\n    tag_276:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7014:7025  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7014:7021  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":7014:7025  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":7014:7039  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":7014:7092  Details[to].depositTokens +... */\n      tag_277\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_277:\n        /* \"contracts/Staking/staking.sol\":6986:7092  Total =... */\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":7146:7150  1000 */\n      0x03e8\n        /* \"contracts/Staking/staking.sol\":7135:7142  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/staking.sol\":7127:7132  Total */\n      dup5\n        /* \"contracts/Staking/staking.sol\":7127:7142  Total * penalty */\n      tag_278\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_278:\n        /* \"contracts/Staking/staking.sol\":7126:7150  (Total * penalty) / 1000 */\n      tag_279\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_279:\n        /* \"contracts/Staking/staking.sol\":7175:7187  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":7110:7150  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7175:7187  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":7168:7197  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/staking.sol\":7198:7200  to */\n      dup9\n        /* \"contracts/Staking/staking.sol\":7203:7224  Total - PenaltyResult */\n      tag_280\n        /* \"contracts/Staking/staking.sol\":7110:7150  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/staking.sol\":7203:7208  Total */\n      dup8\n        /* \"contracts/Staking/staking.sol\":7203:7224  Total - PenaltyResult */\n      tag_121\n      jump\t// in\n    tag_280:\n        /* \"contracts/Staking/staking.sol\":7168:7226  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_281\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_281:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_283\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_283:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_284\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_284:\n      pop\n        /* \"contracts/Staking/staking.sol\":6866:8851  if (Details[to].EarnPersentage == 100) {... */\n      jump(tag_308)\n    tag_274:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7318:7329  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7318:7325  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":7318:7329  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":7318:7344  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":7348:7350  75 */\n      0x4b\n        /* \"contracts/Staking/staking.sol\":7318:7350  Details[to].EarnPersentage == 75 */\n      sub\n        /* \"contracts/Staking/staking.sol\":7314:8851  if (Details[to].EarnPersentage == 75) {... */\n      tag_286\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7440:7456  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7440:7452  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":7440:7456  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":7510:7513  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/staking.sol\":7405:7436  InterestAmountperday * Stakdays */\n      tag_287\n        /* \"contracts/Staking/staking.sol\":7428:7436  Stakdays */\n      dup4\n        /* \"contracts/Staking/staking.sol\":7405:7425  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/staking.sol\":7405:7436  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_287:\n        /* \"contracts/Staking/staking.sol\":7404:7456  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_288\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_288:\n        /* \"contracts/Staking/staking.sol\":7403:7486  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_289\n      swap1\n        /* \"contracts/Staking/staking.sol\":7484:7486  75 */\n      0x4b\n        /* \"contracts/Staking/staking.sol\":7403:7486  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_289:\n        /* \"contracts/Staking/staking.sol\":7402:7513  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_290\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_290:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7539:7550  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7539:7546  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":7539:7550  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":7539:7564  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":7370:7513  EarnToken =... */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/staking.sol\":7539:7576  Details[to].depositTokens + EarnToken */\n      tag_291\n      swap1\n        /* \"contracts/Staking/staking.sol\":7370:7513  EarnToken =... */\n      dup8\n      swap1\n        /* \"contracts/Staking/staking.sol\":7539:7576  Details[to].depositTokens + EarnToken */\n      tag_116\n      jump\t// in\n    tag_291:\n        /* \"contracts/Staking/staking.sol\":7531:7576  Total = Details[to].depositTokens + EarnToken */\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":7630:7634  1000 */\n      0x03e8\n        /* \"contracts/Staking/staking.sol\":7619:7626  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/staking.sol\":7611:7616  Total */\n      dup5\n        /* \"contracts/Staking/staking.sol\":7611:7626  Total * penalty */\n      tag_292\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_292:\n        /* \"contracts/Staking/staking.sol\":7610:7634  (Total * penalty) / 1000 */\n      tag_293\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_293:\n        /* \"contracts/Staking/staking.sol\":7659:7671  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":7594:7634  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7659:7671  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":7652:7681  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/staking.sol\":7682:7684  to */\n      dup9\n        /* \"contracts/Staking/staking.sol\":7687:7708  Total - PenaltyResult */\n      tag_294\n        /* \"contracts/Staking/staking.sol\":7594:7634  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/staking.sol\":7687:7692  Total */\n      dup8\n        /* \"contracts/Staking/staking.sol\":7687:7708  Total - PenaltyResult */\n      tag_121\n      jump\t// in\n    tag_294:\n        /* \"contracts/Staking/staking.sol\":7652:7710  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_295\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_295:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_297\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_297:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_298\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_298:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7798:7814  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7798:7810  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":7798:7814  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":7868:7871  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/staking.sol\":7763:7794  InterestAmountperday * Stakdays */\n      tag_299\n        /* \"contracts/Staking/staking.sol\":7786:7794  Stakdays */\n      dup4\n        /* \"contracts/Staking/staking.sol\":7763:7783  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/staking.sol\":7763:7794  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_299:\n        /* \"contracts/Staking/staking.sol\":7762:7814  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_300\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_300:\n        /* \"contracts/Staking/staking.sol\":7761:7844  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_301\n      swap1\n        /* \"contracts/Staking/staking.sol\":7842:7844  25 */\n      0x19\n        /* \"contracts/Staking/staking.sol\":7761:7844  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_301:\n        /* \"contracts/Staking/staking.sol\":7760:7871  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_302\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_302:\n        /* \"contracts/Staking/staking.sol\":7896:7908  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":7889:8031  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":7728:7871  BurnToken =... */\n      swap2\n      swap7\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":7896:7908  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":7889:7918  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":7889:8031  IERC20(ERC20Address).transfer(... */\n      tag_281\n      swap1\n        /* \"contracts/Staking/staking.sol\":7940:7982  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/staking.sol\":7728:7871  BurnToken =... */\n      dup10\n      swap1\n        /* \"contracts/Staking/staking.sol\":7889:8031  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_133\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":7314:8851  if (Details[to].EarnPersentage == 75) {... */\n    tag_286:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8123:8134  Details[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8123:8130  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":8123:8134  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8123:8149  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":8153:8155  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":8123:8155  Details[to].EarnPersentage == 50 */\n      sub\n        /* \"contracts/Staking/staking.sol\":8119:8851  if (Details[to].EarnPersentage == 50) {... */\n      tag_308\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8245:8261  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8245:8257  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":8245:8261  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":8315:8318  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/staking.sol\":8210:8241  InterestAmountperday * Stakdays */\n      tag_309\n        /* \"contracts/Staking/staking.sol\":8233:8241  Stakdays */\n      dup4\n        /* \"contracts/Staking/staking.sol\":8210:8230  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/staking.sol\":8210:8241  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_309:\n        /* \"contracts/Staking/staking.sol\":8209:8261  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_310\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_310:\n        /* \"contracts/Staking/staking.sol\":8208:8291  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_311\n      swap1\n        /* \"contracts/Staking/staking.sol\":8289:8291  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":8208:8291  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_311:\n        /* \"contracts/Staking/staking.sol\":8207:8318  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_312\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_312:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8344:8355  Details[to] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8344:8351  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":8344:8355  Details[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8344:8369  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":8175:8318  EarnToken =... */\n      swap1\n      swap7\n      pop\n        /* \"contracts/Staking/staking.sol\":8344:8381  Details[to].depositTokens + EarnToken */\n      tag_313\n      swap1\n        /* \"contracts/Staking/staking.sol\":8175:8318  EarnToken =... */\n      dup8\n      swap1\n        /* \"contracts/Staking/staking.sol\":8344:8381  Details[to].depositTokens + EarnToken */\n      tag_116\n      jump\t// in\n    tag_313:\n        /* \"contracts/Staking/staking.sol\":8336:8381  Total = Details[to].depositTokens + EarnToken */\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":8435:8439  1000 */\n      0x03e8\n        /* \"contracts/Staking/staking.sol\":8424:8431  penalty */\n      sload(0x06)\n        /* \"contracts/Staking/staking.sol\":8416:8421  Total */\n      dup5\n        /* \"contracts/Staking/staking.sol\":8416:8431  Total * penalty */\n      tag_314\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_314:\n        /* \"contracts/Staking/staking.sol\":8415:8439  (Total * penalty) / 1000 */\n      tag_315\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_315:\n        /* \"contracts/Staking/staking.sol\":8464:8476  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":8399:8439  PenaltyResult = (Total * penalty) / 1000 */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8464:8476  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":8457:8486  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Staking/staking.sol\":8487:8489  to */\n      dup9\n        /* \"contracts/Staking/staking.sol\":8492:8513  Total - PenaltyResult */\n      tag_316\n        /* \"contracts/Staking/staking.sol\":8399:8439  PenaltyResult = (Total * penalty) / 1000 */\n      dup6\n        /* \"contracts/Staking/staking.sol\":8492:8497  Total */\n      dup8\n        /* \"contracts/Staking/staking.sol\":8492:8513  Total - PenaltyResult */\n      tag_121\n      jump\t// in\n    tag_316:\n        /* \"contracts/Staking/staking.sol\":8457:8515  IERC20(ERC20Address).transfer(to, (Total - PenaltyResult)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_317\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_317:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_319\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_319:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_320\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_320:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8603:8619  RewardAmount[to] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8603:8615  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":8603:8619  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":8673:8676  100 */\n      0x64\n      swap1\n        /* \"contracts/Staking/staking.sol\":8568:8599  InterestAmountperday * Stakdays */\n      tag_321\n        /* \"contracts/Staking/staking.sol\":8591:8599  Stakdays */\n      dup4\n        /* \"contracts/Staking/staking.sol\":8568:8588  InterestAmountperday */\n      dup8\n        /* \"contracts/Staking/staking.sol\":8568:8599  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_321:\n        /* \"contracts/Staking/staking.sol\":8567:8619  (InterestAmountperday * Stakdays) - RewardAmount[to] */\n      tag_322\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_322:\n        /* \"contracts/Staking/staking.sol\":8566:8649  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_323\n      swap1\n        /* \"contracts/Staking/staking.sol\":8647:8649  50 */\n      0x32\n        /* \"contracts/Staking/staking.sol\":8566:8649  ((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_113\n      jump\t// in\n    tag_323:\n        /* \"contracts/Staking/staking.sol\":8565:8676  (((InterestAmountperday * Stakdays) - RewardAmount[to]) *... */\n      tag_324\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_324:\n        /* \"contracts/Staking/staking.sol\":8701:8713  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":8694:8836  IERC20(ERC20Address).transfer(... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8533:8676  BurnToken =... */\n      swap2\n      swap7\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8701:8713  ERC20Address */\n      and\n      swap1\n        /* \"contracts/Staking/staking.sol\":8694:8723  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Staking/staking.sol\":8694:8836  IERC20(ERC20Address).transfer(... */\n      tag_325\n      swap1\n        /* \"contracts/Staking/staking.sol\":8745:8787  0x000000000000000000000000000000000000dEaD */\n      0xdead\n      swap1\n        /* \"contracts/Staking/staking.sol\":8533:8676  BurnToken =... */\n      dup10\n      swap1\n        /* \"contracts/Staking/staking.sol\":8694:8836  IERC20(ERC20Address).transfer(... */\n      0x04\n      add\n      tag_133\n      jump\t// in\n    tag_325:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_327\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_327:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_328\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_328:\n      pop\n        /* \"contracts/Staking/staking.sol\":8119:8851  if (Details[to].EarnPersentage == 50) {... */\n    tag_308:\n        /* \"contracts/Staking/staking.sol\":6504:8861  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":4899:8861  if (... */\n    tag_269:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":8870:8881  Details[to] */\n      dup4\n      and\n        /* \"contracts/Staking/staking.sol\":8890:8895  false */\n      0x00\n        /* \"contracts/Staking/staking.sol\":8870:8881  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":8870:8877  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":8870:8881  Details[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8870:8887  Details[to].check */\n      0x04\n      dup2\n      add\n        /* \"contracts/Staking/staking.sol\":8870:8895  Details[to].check = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Staking/staking.sol\":8912:8924  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":8912:8928  RewardAmount[to] */\n      dup4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8905:8928  delete RewardAmount[to] */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/Staking/staking.sol\":8945:8959  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":8945:8963  InterestAmount[to] */\n      dup4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8938:8963  delete InterestAmount[to] */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/Staking/staking.sol\":8987:9012  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":8973:8979  Tokens */\n      0x0b\n        /* \"contracts/Staking/staking.sol\":8973:8983  Tokens[to] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Staking/staking.sol\":8973:9012  Tokens[to] -= Details[to].depositTokens */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":8987:9012  Details[to].depositTokens */\n      swap2\n      swap3\n        /* \"contracts/Staking/staking.sol\":8973:8983  Tokens[to] */\n      swap1\n      swap2\n        /* \"contracts/Staking/staking.sol\":8973:9012  Tokens[to] -= Details[to].depositTokens */\n      tag_329\n      swap1\n        /* \"contracts/Staking/staking.sol\":8987:9012  Details[to].depositTokens */\n      dup5\n      swap1\n        /* \"contracts/Staking/staking.sol\":8973:9012  Tokens[to] -= Details[to].depositTokens */\n      tag_121\n      jump\t// in\n    tag_329:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":9043:9054  Details[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":9043:9050  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":9043:9054  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":9043:9068  Details[to].depositTokens */\n      sload\n        /* \"contracts/Staking/staking.sol\":9022:9039  totalStakedTokens */\n      0x03\n        /* \"contracts/Staking/staking.sol\":9022:9068  totalStakedTokens -= Details[to].depositTokens */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":9043:9068  Details[to].depositTokens */\n      swap2\n      swap3\n        /* \"contracts/Staking/staking.sol\":9022:9039  totalStakedTokens */\n      swap1\n      swap2\n        /* \"contracts/Staking/staking.sol\":9022:9068  totalStakedTokens -= Details[to].depositTokens */\n      tag_330\n      swap1\n        /* \"contracts/Staking/staking.sol\":9043:9068  Details[to].depositTokens */\n      dup5\n      swap1\n        /* \"contracts/Staking/staking.sol\":9022:9068  totalStakedTokens -= Details[to].depositTokens */\n      tag_121\n      jump\t// in\n    tag_330:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":4734:9075  function WithdrawTokens(address to) public {... */\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":1506:1738  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_332\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_210\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_332:\n        /* \"contracts/Staking/staking.sol\":1580:1590  msg.sender */\n      caller\n        /* \"contracts/Staking/staking.sol\":1573:1591  Tokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":1573:1579  Tokens */\n      0x0b\n        /* \"contracts/Staking/staking.sol\":1573:1591  Tokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":1573:1602  Tokens[msg.sender] += _amount */\n      dup1\n      sload\n        /* \"contracts/Staking/staking.sol\":1595:1602  _amount */\n      dup4\n      swap3\n        /* \"contracts/Staking/staking.sol\":1573:1591  Tokens[msg.sender] */\n      swap1\n        /* \"contracts/Staking/staking.sol\":1573:1602  Tokens[msg.sender] += _amount */\n      tag_334\n      swap1\n        /* \"contracts/Staking/staking.sol\":1595:1602  _amount */\n      dup5\n      swap1\n        /* \"contracts/Staking/staking.sol\":1573:1602  Tokens[msg.sender] += _amount */\n      tag_116\n      jump\t// in\n    tag_334:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking/staking.sol\":1619:1631  ERC20Address */\n      sload(0x01)\n        /* \"contracts/Staking/staking.sol\":1612:1731  IERC20(ERC20Address).safeTransferFrom(... */\n      tag_335\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":1619:1631  ERC20Address */\n      and\n        /* \"contracts/Staking/staking.sol\":1663:1673  msg.sender */\n      caller\n        /* \"contracts/Staking/staking.sol\":1695:1699  this */\n      address\n        /* \"contracts/Staking/staking.sol\":1714:1721  _amount */\n      dup5\n        /* \"contracts/Staking/staking.sol\":1612:1649  IERC20(ERC20Address).safeTransferFrom */\n      tag_178\n        /* \"contracts/Staking/staking.sol\":1612:1731  IERC20(ERC20Address).safeTransferFrom(... */\n      jump\t// in\n    tag_335:\n        /* \"contracts/Staking/staking.sol\":1506:1738  function AdminAddToken(uint256 _amount) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":11252:11485  function SetRewardPersentage(... */\n    tag_98:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_337\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_210\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_337:\n        /* \"contracts/Staking/staking.sol\":11395:11401  APYPer */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":11395:11404  APYPer[1] */\n      0x20\n      mstore\n      0xbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7\n        /* \"contracts/Staking/staking.sol\":11395:11416  APYPer[1] = Month1Per */\n      swap3\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Staking/staking.sol\":11426:11435  APYPer[2] */\n      0xbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8\n        /* \"contracts/Staking/staking.sol\":11426:11447  APYPer[2] = Month2Per */\n      sstore\n        /* \"contracts/Staking/staking.sol\":11464:11465  3 */\n      0x03\n        /* \"contracts/Staking/staking.sol\":11395:11404  APYPer[1] */\n      0x00\n        /* \"contracts/Staking/staking.sol\":11457:11466  APYPer[3] */\n      mstore\n      0xa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759\n        /* \"contracts/Staking/staking.sol\":11457:11478  APYPer[3] = Month3Per */\n      sstore\n        /* \"contracts/Staking/staking.sol\":11252:11485  function SetRewardPersentage(... */\n      jump\t// out\n        /* \"contracts/Staking/staking.sol\":9955:10571  function viewRewards(address to) public view returns (uint256 reward) {... */\n    tag_101:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10090:10101  Details[to] */\n      dup2\n      and\n        /* \"contracts/Staking/staking.sol\":10009:10023  uint256 reward */\n      0x00\n        /* \"contracts/Staking/staking.sol\":10090:10101  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10090:10097  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":10090:10101  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":10090:10111  Details[to].stakeTime */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10054:10076  Details[to].StakeMonth */\n      0x02\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10127:10142  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/Staking/staking.sol\":10090:10111  Details[to].stakeTime */\n      swap1\n        /* \"contracts/Staking/staking.sol\":10054:10081  Details[to].StakeMonth * 10 */\n      tag_340\n      swap1\n        /* \"contracts/Staking/staking.sol\":10079:10081  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":10054:10081  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_340:\n        /* \"contracts/Staking/staking.sol\":10054:10086  Details[to].StakeMonth * 10 * 60 */\n      tag_341\n      swap1\n        /* \"contracts/Staking/staking.sol\":10084:10086  60 */\n      0x3c\n        /* \"contracts/Staking/staking.sol\":10054:10086  Details[to].StakeMonth * 10 * 60 */\n      tag_113\n      jump\t// in\n    tag_341:\n        /* \"contracts/Staking/staking.sol\":10053:10111  (Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime */\n      tag_342\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_342:\n        /* \"contracts/Staking/staking.sol\":10052:10142  ((Details[to].StakeMonth * 10 * 60) + Details[to].stakeTime) <... */\n      lt\n        /* \"contracts/Staking/staking.sol\":10035:10565  if (... */\n      iszero\n      tag_343\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10194:10210  RewardAmount[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10194:10206  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":10194:10210  RewardAmount[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":10175:10189  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":10175:10193  InterestAmount[to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":10175:10210  InterestAmount[to]-RewardAmount[to] */\n      tag_143\n      swap2\n        /* \"contracts/Staking/staking.sol\":10194:10210  RewardAmount[to] */\n      swap1\n        /* \"contracts/Staking/staking.sol\":10175:10210  InterestAmount[to]-RewardAmount[to] */\n      tag_121\n      jump\t// in\n        /* \"contracts/Staking/staking.sol\":10035:10565  if (... */\n    tag_343:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10280:10291  Details[to] */\n      dup3\n      and\n        /* \"contracts/Staking/staking.sol\":10242:10258  uint256 Stakdays */\n      0x00\n        /* \"contracts/Staking/staking.sol\":10280:10291  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10280:10287  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":10280:10291  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":10280:10301  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10306:10308  60 */\n      0x3c\n      swap1\n        /* \"contracts/Staking/staking.sol\":10262:10301  block.timestamp - Details[to].stakeTime */\n      tag_346\n      swap1\n        /* \"contracts/Staking/staking.sol\":10262:10277  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/staking.sol\":10262:10301  block.timestamp - Details[to].stakeTime */\n      tag_121\n      jump\t// in\n    tag_346:\n        /* \"contracts/Staking/staking.sol\":10261:10309  (block.timestamp - Details[to].stakeTime) / (60) */\n      tag_347\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_347:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10392:10403  Details[to] */\n      dup5\n      and\n        /* \"contracts/Staking/staking.sol\":10323:10351  uint256 InterestAmountperday */\n      0x00\n        /* \"contracts/Staking/staking.sol\":10392:10403  Details[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10392:10399  Details */\n      0x07\n        /* \"contracts/Staking/staking.sol\":10392:10403  Details[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Staking/staking.sol\":10392:10414  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/staking.sol\":10242:10309  uint256 Stakdays = (block.timestamp - Details[to].stakeTime) / (60) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":10323:10351  uint256 InterestAmountperday */\n      swap1\n        /* \"contracts/Staking/staking.sol\":10392:10419  Details[to].StakeMonth * 10 */\n      tag_348\n      swap1\n        /* \"contracts/Staking/staking.sol\":10417:10419  10 */\n      0x0a\n        /* \"contracts/Staking/staking.sol\":10392:10419  Details[to].StakeMonth * 10 */\n      tag_113\n      jump\t// in\n    tag_348:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10354:10372  InterestAmount[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10354:10368  InterestAmount */\n      0x08\n        /* \"contracts/Staking/staking.sol\":10354:10372  InterestAmount[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":10354:10420  InterestAmount[to] /... */\n      tag_349\n      swap2\n      swap1\n      tag_123\n      jump\t// in\n    tag_349:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Staking/staking.sol\":10506:10522  RewardAmount[to] */\n      dup6\n      and\n        /* \"contracts/Staking/staking.sol\":10434:10451  uint256 EarnToken */\n      0x00\n        /* \"contracts/Staking/staking.sol\":10506:10522  RewardAmount[to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Staking/staking.sol\":10506:10518  RewardAmount */\n      0x0c\n        /* \"contracts/Staking/staking.sol\":10506:10522  RewardAmount[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/Staking/staking.sol\":10323:10420  uint256 InterestAmountperday = InterestAmount[to] /... */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Staking/staking.sol\":10434:10451  uint256 EarnToken */\n      swap1\n        /* \"contracts/Staking/staking.sol\":10455:10486  InterestAmountperday * Stakdays */\n      tag_350\n        /* \"contracts/Staking/staking.sol\":10478:10486  Stakdays */\n      dup5\n        /* \"contracts/Staking/staking.sol\":10323:10420  uint256 InterestAmountperday = InterestAmount[to] /... */\n      dup5\n        /* \"contracts/Staking/staking.sol\":10455:10486  InterestAmountperday * Stakdays */\n      tag_113\n      jump\t// in\n    tag_350:\n        /* \"contracts/Staking/staking.sol\":10454:10522  (InterestAmountperday * Stakdays) -... */\n      tag_351\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_351:\n        /* \"contracts/Staking/staking.sol\":10434:10522  uint256 EarnToken = (InterestAmountperday * Stakdays) -... */\n      swap6\n        /* \"contracts/Staking/staking.sol\":9955:10571  function viewRewards(address to) public view returns (uint256 reward) {... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_110:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_353\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_210\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_353:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_355\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6792:6794   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6774:6795   */\n      mstore\n        /* \"#utility.yul\":6831:6833   */\n      0x26\n        /* \"#utility.yul\":6811:6829   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6804:6834   */\n      mstore\n        /* \"#utility.yul\":6870:6904   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":6850:6868   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6843:6905   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":6921:6939   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6914:6950   */\n      mstore\n        /* \"#utility.yul\":6967:6986   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_118\n        /* \"#utility.yul\":6590:6992   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_355:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_335\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_218\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_178:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7255:7270   */\n      dup6\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":7237:7271   */\n      mstore\n        /* \"#utility.yul\":7307:7322   */\n      dup5\n      and\n        /* \"#utility.yul\":7287:7305   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7280:7323   */\n      mstore\n        /* \"#utility.yul\":7339:7357   */\n      0x64\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7332:7366   */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":7172:7190   */\n      0x84\n      swap1\n      swap2\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      swap1\n      swap2\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0x23b872dd)\n      or\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_360\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_363\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_360:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_210:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_217\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7579:7581   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7561:7582   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7598:7616   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7591:7621   */\n      mstore\n        /* \"#utility.yul\":7657:7691   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7637:7655   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7630:7692   */\n      mstore\n        /* \"#utility.yul\":7709:7727   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_118\n        /* \"#utility.yul\":7377:7733   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_218:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_363:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_373\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_374\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_373:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_377\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_376\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_376:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_377\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7940:7942   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7922:7943   */\n      mstore\n        /* \"#utility.yul\":7979:7981   */\n      0x2a\n        /* \"#utility.yul\":7959:7977   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7952:7982   */\n      mstore\n        /* \"#utility.yul\":8018:8052   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":7998:8016   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7991:8053   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":8069:8087   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8062:8102   */\n      mstore\n        /* \"#utility.yul\":8119:8138   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_118\n        /* \"#utility.yul\":7738:8144   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n    tag_377:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3817:4453  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_374:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_382\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_383\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_382:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_383:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_385\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8351:8353   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8333:8354   */\n      mstore\n        /* \"#utility.yul\":8390:8392   */\n      0x26\n        /* \"#utility.yul\":8370:8388   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8363:8393   */\n      mstore\n        /* \"#utility.yul\":8429:8463   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":8409:8427   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8402:8464   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":8480:8498   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8473:8509   */\n      mstore\n        /* \"#utility.yul\":8526:8545   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_118\n        /* \"#utility.yul\":8149:8551   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_385:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_388\n      swap2\n      swap1\n      tag_389\n      jump\t// in\n    tag_388:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_392\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_391)\n    tag_392:\n      0x60\n      swap2\n      pop\n    tag_391:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_393\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_394\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_393:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_394:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_396\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_400\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_400\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9305:9307   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9287:9308   */\n      mstore\n        /* \"#utility.yul\":9344:9346   */\n      0x1d\n        /* \"#utility.yul\":9324:9342   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9317:9347   */\n      mstore\n        /* \"#utility.yul\":9383:9414   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":9363:9381   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9356:9415   */\n      mstore\n        /* \"#utility.yul\":9432:9450   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_118\n        /* \"#utility.yul\":9103:9456   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_400:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_382)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_396:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_382\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_408\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_408:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_118\n      swap2\n      swap1\n      tag_411\n      jump\t// in\n        /* \"#utility.yul\":14:187   */\n    tag_412:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_140\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":192:378   */\n    tag_30:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_419\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_419:\n        /* \"#utility.yul\":343:372   */\n      tag_420\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_412\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":192:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":565:956   */\n    tag_43:\n        /* \"#utility.yul\":651:657   */\n      0x00\n        /* \"#utility.yul\":659:665   */\n      dup1\n        /* \"#utility.yul\":667:673   */\n      0x00\n        /* \"#utility.yul\":675:681   */\n      dup1\n        /* \"#utility.yul\":728:731   */\n      0x80\n        /* \"#utility.yul\":716:725   */\n      dup6\n        /* \"#utility.yul\":707:714   */\n      dup8\n        /* \"#utility.yul\":703:726   */\n      sub\n        /* \"#utility.yul\":699:732   */\n      slt\n        /* \"#utility.yul\":696:749   */\n      iszero\n      tag_423\n      jumpi\n        /* \"#utility.yul\":745:746   */\n      0x00\n        /* \"#utility.yul\":742:743   */\n      dup1\n        /* \"#utility.yul\":735:747   */\n      revert\n        /* \"#utility.yul\":696:749   */\n    tag_423:\n        /* \"#utility.yul\":768:797   */\n      tag_424\n        /* \"#utility.yul\":787:796   */\n      dup6\n        /* \"#utility.yul\":768:797   */\n      tag_412\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":758:797   */\n      swap7\n        /* \"#utility.yul\":844:846   */\n      0x20\n        /* \"#utility.yul\":829:847   */\n      dup7\n      add\n        /* \"#utility.yul\":816:848   */\n      calldataload\n      swap7\n      pop\n        /* \"#utility.yul\":895:897   */\n      0x40\n        /* \"#utility.yul\":880:898   */\n      dup7\n      add\n        /* \"#utility.yul\":867:899   */\n      calldataload\n      swap6\n        /* \"#utility.yul\":946:948   */\n      0x60\n        /* \"#utility.yul\":931:949   */\n      add\n        /* \"#utility.yul\":918:950   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":565:956   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":961:1141   */\n    tag_47:\n        /* \"#utility.yul\":1020:1026   */\n      0x00\n        /* \"#utility.yul\":1073:1075   */\n      0x20\n        /* \"#utility.yul\":1061:1070   */\n      dup3\n        /* \"#utility.yul\":1052:1059   */\n      dup5\n        /* \"#utility.yul\":1048:1071   */\n      sub\n        /* \"#utility.yul\":1044:1076   */\n      slt\n        /* \"#utility.yul\":1041:1093   */\n      iszero\n      tag_426\n      jumpi\n        /* \"#utility.yul\":1089:1090   */\n      0x00\n        /* \"#utility.yul\":1086:1087   */\n      dup1\n        /* \"#utility.yul\":1079:1091   */\n      revert\n        /* \"#utility.yul\":1041:1093   */\n    tag_426:\n      pop\n        /* \"#utility.yul\":1112:1135   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":961:1141   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1146:1462   */\n    tag_52:\n        /* \"#utility.yul\":1223:1229   */\n      0x00\n        /* \"#utility.yul\":1231:1237   */\n      dup1\n        /* \"#utility.yul\":1239:1245   */\n      0x00\n        /* \"#utility.yul\":1292:1294   */\n      0x60\n        /* \"#utility.yul\":1280:1289   */\n      dup5\n        /* \"#utility.yul\":1271:1278   */\n      dup7\n        /* \"#utility.yul\":1267:1290   */\n      sub\n        /* \"#utility.yul\":1263:1295   */\n      slt\n        /* \"#utility.yul\":1260:1312   */\n      iszero\n      tag_428\n      jumpi\n        /* \"#utility.yul\":1308:1309   */\n      0x00\n        /* \"#utility.yul\":1305:1306   */\n      dup1\n        /* \"#utility.yul\":1298:1310   */\n      revert\n        /* \"#utility.yul\":1260:1312   */\n    tag_428:\n      pop\n      pop\n        /* \"#utility.yul\":1331:1354   */\n      dup2\n      calldataload\n      swap4\n        /* \"#utility.yul\":1401:1403   */\n      0x20\n        /* \"#utility.yul\":1386:1404   */\n      dup4\n      add\n        /* \"#utility.yul\":1373:1405   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":1452:1454   */\n      0x40\n        /* \"#utility.yul\":1437:1455   */\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1424:1456   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1146:1462   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1467:1715   */\n    tag_60:\n        /* \"#utility.yul\":1535:1541   */\n      0x00\n        /* \"#utility.yul\":1543:1549   */\n      dup1\n        /* \"#utility.yul\":1596:1598   */\n      0x40\n        /* \"#utility.yul\":1584:1593   */\n      dup4\n        /* \"#utility.yul\":1575:1582   */\n      dup6\n        /* \"#utility.yul\":1571:1594   */\n      sub\n        /* \"#utility.yul\":1567:1599   */\n      slt\n        /* \"#utility.yul\":1564:1616   */\n      iszero\n      tag_430\n      jumpi\n        /* \"#utility.yul\":1612:1613   */\n      0x00\n        /* \"#utility.yul\":1609:1610   */\n      dup1\n        /* \"#utility.yul\":1602:1614   */\n      revert\n        /* \"#utility.yul\":1564:1616   */\n    tag_430:\n      pop\n      pop\n        /* \"#utility.yul\":1635:1658   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1705:1707   */\n      0x20\n        /* \"#utility.yul\":1690:1708   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1677:1709   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1467:1715   */\n      jump\t// out\n        /* \"#utility.yul\":2659:2786   */\n    tag_413:\n        /* \"#utility.yul\":2720:2730   */\n      0x4e487b71\n        /* \"#utility.yul\":2715:2718   */\n      0xe0\n        /* \"#utility.yul\":2711:2731   */\n      shl\n        /* \"#utility.yul\":2708:2709   */\n      0x00\n        /* \"#utility.yul\":2701:2732   */\n      mstore\n        /* \"#utility.yul\":2751:2755   */\n      0x11\n        /* \"#utility.yul\":2748:2749   */\n      0x04\n        /* \"#utility.yul\":2741:2756   */\n      mstore\n        /* \"#utility.yul\":2775:2779   */\n      0x24\n        /* \"#utility.yul\":2772:2773   */\n      0x00\n        /* \"#utility.yul\":2765:2780   */\n      revert\n        /* \"#utility.yul\":2791:2959   */\n    tag_113:\n        /* \"#utility.yul\":2864:2873   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":2895:2904   */\n      dup2\n      iszero\n        /* \"#utility.yul\":2912:2927   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":2906:2928   */\n      dup5\n      eq\n        /* \"#utility.yul\":2892:2929   */\n      or\n        /* \"#utility.yul\":2882:2953   */\n      tag_143\n      jumpi\n        /* \"#utility.yul\":2933:2951   */\n      tag_143\n      tag_413\n      jump\t// in\n        /* \"#utility.yul\":2964:3089   */\n    tag_116:\n        /* \"#utility.yul\":3029:3038   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3050:3060   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3047:3083   */\n      iszero\n      tag_143\n      jumpi\n        /* \"#utility.yul\":3063:3081   */\n      tag_143\n      tag_413\n      jump\t// in\n        /* \"#utility.yul\":3520:3648   */\n    tag_121:\n        /* \"#utility.yul\":3587:3596   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":3608:3619   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":3605:3642   */\n      iszero\n      tag_143\n      jumpi\n        /* \"#utility.yul\":3622:3640   */\n      tag_143\n      tag_413\n      jump\t// in\n        /* \"#utility.yul\":3653:3870   */\n    tag_123:\n        /* \"#utility.yul\":3693:3694   */\n      0x00\n        /* \"#utility.yul\":3719:3720   */\n      dup3\n        /* \"#utility.yul\":3709:3841   */\n      tag_446\n      jumpi\n        /* \"#utility.yul\":3763:3773   */\n      0x4e487b71\n        /* \"#utility.yul\":3758:3761   */\n      0xe0\n        /* \"#utility.yul\":3754:3774   */\n      shl\n        /* \"#utility.yul\":3751:3752   */\n      0x00\n        /* \"#utility.yul\":3744:3775   */\n      mstore\n        /* \"#utility.yul\":3798:3802   */\n      0x12\n        /* \"#utility.yul\":3795:3796   */\n      0x04\n        /* \"#utility.yul\":3788:3803   */\n      mstore\n        /* \"#utility.yul\":3826:3830   */\n      0x24\n        /* \"#utility.yul\":3823:3824   */\n      0x00\n        /* \"#utility.yul\":3816:3831   */\n      revert\n        /* \"#utility.yul\":3709:3841   */\n    tag_446:\n      pop\n        /* \"#utility.yul\":3855:3864   */\n      div\n      swap1\n        /* \"#utility.yul\":3653:3870   */\n      jump\t// out\n        /* \"#utility.yul\":4277:4551   */\n    tag_133:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4469:4501   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4451:4502   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4533:4535   */\n      0x20\n        /* \"#utility.yul\":4518:4536   */\n      dup3\n      add\n        /* \"#utility.yul\":4511:4545   */\n      mstore\n        /* \"#utility.yul\":4439:4441   */\n      0x40\n        /* \"#utility.yul\":4424:4442   */\n      add\n      swap1\n        /* \"#utility.yul\":4277:4551   */\n      jump\t// out\n        /* \"#utility.yul\":4556:4833   */\n    tag_137:\n        /* \"#utility.yul\":4623:4629   */\n      0x00\n        /* \"#utility.yul\":4676:4678   */\n      0x20\n        /* \"#utility.yul\":4664:4673   */\n      dup3\n        /* \"#utility.yul\":4655:4662   */\n      dup5\n        /* \"#utility.yul\":4651:4674   */\n      sub\n        /* \"#utility.yul\":4647:4679   */\n      slt\n        /* \"#utility.yul\":4644:4696   */\n      iszero\n      tag_450\n      jumpi\n        /* \"#utility.yul\":4692:4693   */\n      0x00\n        /* \"#utility.yul\":4689:4690   */\n      dup1\n        /* \"#utility.yul\":4682:4694   */\n      revert\n        /* \"#utility.yul\":4644:4696   */\n    tag_450:\n        /* \"#utility.yul\":4724:4733   */\n      dup2\n        /* \"#utility.yul\":4718:4734   */\n      mload\n        /* \"#utility.yul\":4777:4782   */\n      dup1\n        /* \"#utility.yul\":4770:4783   */\n      iszero\n        /* \"#utility.yul\":4763:4784   */\n      iszero\n        /* \"#utility.yul\":4756:4761   */\n      dup2\n        /* \"#utility.yul\":4753:4785   */\n      eq\n        /* \"#utility.yul\":4743:4803   */\n      tag_420\n      jumpi\n        /* \"#utility.yul\":4799:4800   */\n      0x00\n        /* \"#utility.yul\":4796:4797   */\n      dup1\n        /* \"#utility.yul\":4789:4801   */\n      revert\n        /* \"#utility.yul\":8556:8806   */\n    tag_414:\n        /* \"#utility.yul\":8641:8642   */\n      0x00\n        /* \"#utility.yul\":8651:8764   */\n    tag_463:\n        /* \"#utility.yul\":8665:8671   */\n      dup4\n        /* \"#utility.yul\":8662:8663   */\n      dup2\n        /* \"#utility.yul\":8659:8672   */\n      lt\n        /* \"#utility.yul\":8651:8764   */\n      iszero\n      tag_465\n      jumpi\n        /* \"#utility.yul\":8741:8752   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8735:8753   */\n      mload\n        /* \"#utility.yul\":8722:8733   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":8715:8754   */\n      mstore\n        /* \"#utility.yul\":8687:8689   */\n      0x20\n        /* \"#utility.yul\":8680:8690   */\n      add\n        /* \"#utility.yul\":8651:8764   */\n      jump(tag_463)\n    tag_465:\n      pop\n      pop\n        /* \"#utility.yul\":8798:8799   */\n      0x00\n        /* \"#utility.yul\":8780:8796   */\n      swap2\n      add\n        /* \"#utility.yul\":8773:8800   */\n      mstore\n        /* \"#utility.yul\":8556:8806   */\n      jump\t// out\n        /* \"#utility.yul\":8811:9098   */\n    tag_389:\n        /* \"#utility.yul\":8940:8943   */\n      0x00\n        /* \"#utility.yul\":8978:8984   */\n      dup3\n        /* \"#utility.yul\":8972:8985   */\n      mload\n        /* \"#utility.yul\":8994:9060   */\n      tag_467\n        /* \"#utility.yul\":9053:9059   */\n      dup2\n        /* \"#utility.yul\":9048:9051   */\n      dup5\n        /* \"#utility.yul\":9041:9045   */\n      0x20\n        /* \"#utility.yul\":9033:9039   */\n      dup8\n        /* \"#utility.yul\":9029:9046   */\n      add\n        /* \"#utility.yul\":8994:9060   */\n      tag_414\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":9076:9092   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":8811:9098   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9461:9857   */\n    tag_411:\n        /* \"#utility.yul\":9610:9612   */\n      0x20\n        /* \"#utility.yul\":9599:9608   */\n      dup2\n        /* \"#utility.yul\":9592:9613   */\n      mstore\n        /* \"#utility.yul\":9573:9577   */\n      0x00\n        /* \"#utility.yul\":9642:9648   */\n      dup3\n        /* \"#utility.yul\":9636:9649   */\n      mload\n        /* \"#utility.yul\":9685:9691   */\n      dup1\n        /* \"#utility.yul\":9680:9682   */\n      0x20\n        /* \"#utility.yul\":9669:9678   */\n      dup5\n        /* \"#utility.yul\":9665:9683   */\n      add\n        /* \"#utility.yul\":9658:9692   */\n      mstore\n        /* \"#utility.yul\":9701:9780   */\n      tag_470\n        /* \"#utility.yul\":9773:9779   */\n      dup2\n        /* \"#utility.yul\":9768:9770   */\n      0x40\n        /* \"#utility.yul\":9757:9766   */\n      dup6\n        /* \"#utility.yul\":9753:9771   */\n      add\n        /* \"#utility.yul\":9748:9750   */\n      0x20\n        /* \"#utility.yul\":9740:9746   */\n      dup8\n        /* \"#utility.yul\":9736:9751   */\n      add\n        /* \"#utility.yul\":9701:9780   */\n      tag_414\n      jump\t// in\n    tag_470:\n        /* \"#utility.yul\":9841:9843   */\n      0x1f\n        /* \"#utility.yul\":9820:9835   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":9816:9845   */\n      and\n        /* \"#utility.yul\":9801:9846   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":9848:9850   */\n      0x40\n        /* \"#utility.yul\":9797:9851   */\n      add\n      swap3\n        /* \"#utility.yul\":9461:9857   */\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0ada41edf8798b24cf95700ae04a399923583f100f59bcda0e41724a1960ba8b 6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3\n    data_0c4bcf2d962d2967567161e2c07ee166d0a7fbac816b34859338e95768fe2ad4 c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7\n    data_f5918152dffd4c0c585ca2588ca9b8191bd01a7fbff2737f8e5b9361e056218e 92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36\n\n    auxdata: 0xa26469706673582212204f53299237b8a11440be6cca4c4b4341cca526e8436dc9f5af8fbca09a25747b64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_936": {
									"entryPoint": null,
									"id": 936,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_849": {
									"entryPoint": null,
									"id": 849,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 110,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 190,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:7"
															},
															"nodeType": "YulIf",
															"src": "105:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:7"
															},
															"nodeType": "YulIf",
															"src": "204:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:7",
														"type": ""
													}
												],
												"src": "14:290:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162002226380380620022268339810160408190526200003491620000be565b6200003f336200006e565b600180546001600160a01b039092166001600160a01b03199283161790556002805490911633179055620000f0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000d157600080fd5b81516001600160a01b0381168114620000e957600080fd5b9392505050565b61212680620001006000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063a6021ace1161007c578063a6021ace146102e5578063c0cd40ee146102f8578063d6f80a251461030b578063da40ef801461031e578063e88cc2be14610331578063f2fde38b1461039b57600080fd5b8063715018a614610265578063777b4cd81461026d578063897b3a681461028d5780638da5cb5b146102ad5780639131a05a146102d257600080fd5b8063217366651161010a57806321736665146101d557806322b72666146101e8578063264b4af6146102085780632e886f1f146102215780633ae732591461023c578063662b12c91461024557600080fd5b80630178be5f14610147578063032ad8fb1461015c5780630deef63a1461018257806310c404da146101a2578063186cb65b146101b5575b600080fd5b61015a610155366004611eab565b6103ae565b005b61016f61016a366004611eab565b610623565b6040519081526020015b60405180910390f35b61016f610190366004611eab565b600b6020526000908152604090205481565b61015a6101b0366004611ecd565b6106af565b61016f6101c3366004611f06565b60096020526000908152604090205481565b61015a6101e3366004611f1f565b610e40565b61016f6101f6366004611eab565b600d6020526000908152604090205481565b61015a610216366004611f4b565b600591909155600655565b60055460065460408051928352602083019190915201610179565b61016f60035481565b61016f610253366004611eab565b60086020526000908152604090205481565b61015a610e87565b61016f61027b366004611eab565b600c6020526000908152604090205481565b61016f61029b366004611f06565b600a6020526000908152604090205481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610179565b61015a6102e0366004611eab565b610e9b565b6001546102ba906001600160a01b031681565b61015a610306366004611f06565b6118b3565b61015a610319366004611f1f565b6118fa565b61016f61032c366004611eab565b611977565b61037161033f366004611eab565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a001610179565b61015a6103a9366004611eab565b611aad565b6001600160a01b038116600090815260076020526040902060018101546002909101544291906103df90600a611f83565b6103ea90603c611f83565b6103f49190611f9a565b1161046c5760405162461bcd60e51b815260206004820152603960248201527f596f7572205374616b652054696d6520436f6d706c6574652c20506c6561736560448201527f2043616c6c2057697468647261772046756e6374696f6e20210000000000000060648201526084015b60405180910390fd5b6001600160a01b038116600090815260076020526040812060010154603c906104959042611fad565b61049f9190611fc0565b6001600160a01b038316600090815260076020526040812060020154919250906104ca90600a611f83565b6001600160a01b0384166000908152600860205260409020546104ed9190611fc0565b905060006104fb8383611f83565b9050600081116105575760405162461bcd60e51b815260206004820152602160248201527f526577617264206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b6064820152608401610463565b6001600160a01b0384166000908152600c602052604090205461057a9082611fad565b6001600160a01b0385166000908152600c6020526040812080549091906105a2908490611f9a565b909155505060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906105d99087908590600401611fe2565b6020604051808303816000875af11580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611ffb565b5050505050565b6001600160a01b03811660009081526007602052604081206003015460640361064e57506000919050565b6001600160a01b0382166000908152600760205260409020600301546064906106779082611fad565b6001600160a01b03841660009081526008602052604090205461069a9190611f83565b6106a49190611fc0565b92915050565b919050565b6002546001600160a01b03166000908152600b60205260409020546107085760405162461bcd60e51b815260206004820152600f60248201526e506c6561736520576169742021212160881b6044820152606401610463565b600061071884633b9aca00611f83565b6001600160a01b03861660009081526007602052604090206004015490915060ff1615610a9b576001600160a01b0385166000908152600760205260409020600181015460029091015442919061077090600a611f83565b61077b90603c611f83565b6107859190611f9a565b116107d25760405162461bcd60e51b815260206004820152601a60248201527f596f75722054696d6520506572696f6420436f6d706c6574652e0000000000006044820152606401610463565b6001600160a01b03851660009081526007602052604090206002015483146108355760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610463565b6001600160a01b038516600090815260076020526040902060030154821461089f5760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610463565b6001600160a01b0385166000908152600760205260409020546108c3908290611f9a565b6001600160a01b03861660009081526007602052604090209081556000805160206120d18339815191525460029091015403610970576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e8906109339083611f83565b61093d9190611fc0565b6001600160a01b03861660009081526008602052604081208054909190610965908490611f9a565b90915550610a7e9050565b600080516020612091833981519152546001600160a01b038616600090815260076020526040902060020154036109db576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e8906109339083611f83565b6000805160206120b1833981519152546001600160a01b03861660009081526007602052604090206002015403610a7e576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610a469083611f83565b610a509190611fc0565b6001600160a01b03861660009081526008602052604081208054909190610a78908490611f9a565b90915550505b600154610a96906001600160a01b0316863084611b23565b610df3565b600160005260096020526000805160206120d183398151915254831480610ada5750600260005260096020526000805160206120918339815191525483145b80610afd5750600360005260096020526000805160206120b18339815191525483145b610b425760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610463565b8160641480610b51575081604b145b80610b5c5750816032145b610ba85760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610463565b60006103e860055483610bbb9190611f83565b610bc59190611fc0565b90506040518060a001604052808284610bde9190611fad565b81524260208083019190915260408083018890526060808401889052600160809485018190526001600160a01b038c16600090815260078552839020865181559386015190840155908401516002830181905590840151600383015592909101516004909101805460ff19169115159190911790556000805160206120d1833981519152549003610cd5576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e890610ca38385611fad565b610cad9190611f83565b610cb79190611fc0565b6001600160a01b038716600090815260086020526040902055610dd9565b600080516020612091833981519152546001600160a01b03871660009081526007602052604090206002015403610d40576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e890610ca38385611fad565b6000805160206120b1833981519152546001600160a01b03871660009081526007602052604090206002015403610dd9576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610dab8385611fad565b610db59190611f83565b610dbf9190611fc0565b6001600160a01b0387166000908152600860205260409020555b600154610df1906001600160a01b0316873085611b23565b505b6001600160a01b0385166000908152600b602052604081208054839290610e1b908490611f9a565b925050819055508060036000828254610e349190611f9a565b90915550505050505050565b610e48611b83565b60096020526000805160206120d1833981519152929092556000805160206120918339815191525560036000526000805160206120b183398151915255565b610e8f611b83565b610e996000611bdd565b565b6001600160a01b03811660009081526007602052604090206004015460ff16610efb5760405162461bcd60e51b81526020600482015260126024820152714669727374205374616b6520546f6b656e7360701b6044820152606401610463565b6001600160a01b0381166000908152600760205260408120600181015460029091015482914291610f2d90600a611f83565b610f3890603c611f83565b610f429190611f9a565b10156112ed576001600160a01b038316600090815260076020526040902060030154606403611033576001546001600160a01b038481166000908152600c6020908152604080832054600890925290912054919092169163a9059cbb918691610faa91611fad565b6001600160a01b038716600090815260076020526040902054610fcd9190611f9a565b6040518363ffffffff1660e01b8152600401610fea929190611fe2565b6020604051808303816000875af1158015611009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102d9190611ffb565b50611824565b6001600160a01b038316600090815260076020526040902060030154604b036111ad576001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161108791611fad565b61109290604b611f83565b61109c9190611fc0565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb9085906110d1908690611f9a565b6040518363ffffffff1660e01b81526004016110ee929190611fe2565b6020604051808303816000875af115801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190611ffb565b506001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161116391611fad565b61116e906019611f83565b6111789190611fc0565b60015460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610fea9061dead908590600401611fe2565b6001600160a01b0383166000908152600760205260409020600301546032036112e8576001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161120191611fad565b61120c906032611f83565b6112169190611fc0565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb90859061124b908690611f9a565b6040518363ffffffff1660e01b8152600401611268929190611fe2565b6020604051808303816000875af1158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ab9190611ffb565b506001600160a01b0383166000908152600c60209081526040808320546008909252909120546064916112dd91611fad565b61116e906032611f83565b611824565b6001600160a01b038316600090815260076020526040812060010154819081908190603c9061131c9042611fad565b6113269190611fc0565b6001600160a01b03881660009081526007602052604090206002015490915061135090600a611f83565b6001600160a01b0388166000908152600860205260409020546113739190611fc0565b6001600160a01b03881660009081526007602052604090206003015490945060640361148e576113a38185611f83565b6001600160a01b0388166000908152600c60205260409020549096506113c99087611fad565b6001600160a01b0388166000908152600760205260409020546113ec9190611f9a565b92506103e8600654846113ff9190611f83565b6114099190611fc0565b6001549092506001600160a01b031663a9059cbb886114288587611fad565b6040518363ffffffff1660e01b8152600401611445929190611fe2565b6020604051808303816000875af1158015611464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114889190611ffb565b5061181f565b6001600160a01b038716600090815260076020526040902060030154604b03611634576001600160a01b0387166000908152600c60205260409020546064906114d78387611f83565b6114e19190611fad565b6114ec90604b611f83565b6114f69190611fc0565b6001600160a01b03881660009081526007602052604090205490965061151d908790611f9a565b92506103e8600654846115309190611f83565b61153a9190611fc0565b6001549092506001600160a01b031663a9059cbb886115598587611fad565b6040518363ffffffff1660e01b8152600401611576929190611fe2565b6020604051808303816000875af1158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190611ffb565b506001600160a01b0387166000908152600c60205260409020546064906115e08387611f83565b6115ea9190611fad565b6115f5906019611f83565b6115ff9190611fc0565b60015460405163a9059cbb60e01b81529196506001600160a01b03169063a9059cbb906114459061dead908990600401611fe2565b6001600160a01b03871660009081526007602052604090206003015460320361181f576001600160a01b0387166000908152600c602052604090205460649061167d8387611f83565b6116879190611fad565b611692906032611f83565b61169c9190611fc0565b6001600160a01b0388166000908152600760205260409020549096506116c3908790611f9a565b92506103e8600654846116d69190611f83565b6116e09190611fc0565b6001549092506001600160a01b031663a9059cbb886116ff8587611fad565b6040518363ffffffff1660e01b815260040161171c929190611fe2565b6020604051808303816000875af115801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190611ffb565b506001600160a01b0387166000908152600c60205260409020546064906117868387611f83565b6117909190611fad565b61179b906032611f83565b6117a59190611fc0565b60015460405163a9059cbb60e01b81529196506001600160a01b03169063a9059cbb906117da9061dead908990600401611fe2565b6020604051808303816000875af11580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190611ffb565b505b505050505b6001600160a01b038316600090815260076020908152604080832060048101805460ff19169055600c83528184208490556008835281842084905554600b9092528220805491929091611878908490611fad565b90915550506001600160a01b03831660009081526007602052604081205460038054919290916118a9908490611fad565b9091555050505050565b6118bb611b83565b336000908152600b6020526040812080548392906118da908490611f9a565b90915550506001546118f7906001600160a01b0316333084611b23565b50565b611902611b83565b600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7929092557fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba85560036000527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa3975955565b6001600160a01b038116600090815260076020526040812060018101546002909101544291906119a890600a611f83565b6119b390603c611f83565b6119bd9190611f9a565b10156119f2576001600160a01b0382166000908152600c60209081526040808320546008909252909120546106a49190611fad565b6001600160a01b038216600090815260076020526040812060010154603c90611a1b9042611fad565b611a259190611fc0565b6001600160a01b03841660009081526007602052604081206002015491925090611a5090600a611f83565b6001600160a01b038516600090815260086020526040902054611a739190611fc0565b6001600160a01b0385166000908152600c602052604081205491925090611a9a8484611f83565b611aa49190611fad565b95945050505050565b611ab5611b83565b6001600160a01b038116611b1a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b6118f781611bdd565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611b7d908590611c2d565b50505050565b6000546001600160a01b03163314610e995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610463565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611c82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d049092919063ffffffff16565b805190915015611cff5780806020019051810190611ca09190611ffb565b611cff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b505050565b6060611d138484600085611d1b565b949350505050565b606082471015611d7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610463565b600080866001600160a01b03168587604051611d989190612041565b60006040518083038185875af1925050503d8060008114611dd5576040519150601f19603f3d011682016040523d82523d6000602084013e611dda565b606091505b5091509150611deb87838387611df6565b979650505050505050565b60608315611e65578251600003611e5e576001600160a01b0385163b611e5e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b5081611d13565b611d138383815115611e7a5781518083602001fd5b8060405162461bcd60e51b8152600401610463919061205d565b80356001600160a01b03811681146106aa57600080fd5b600060208284031215611ebd57600080fd5b611ec682611e94565b9392505050565b60008060008060808587031215611ee357600080fd5b611eec85611e94565b966020860135965060408601359560600135945092505050565b600060208284031215611f1857600080fd5b5035919050565b600080600060608486031215611f3457600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611f5e57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106a4576106a4611f6d565b808201808211156106a4576106a4611f6d565b818103818111156106a4576106a4611f6d565b600082611fdd57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60006020828403121561200d57600080fd5b81518015158114611ec657600080fd5b60005b83811015612038578181015183820152602001612020565b50506000910152565b6000825161205381846020870161201d565b9190910192915050565b602081526000825180602084015261207c81604085016020870161201d565b601f01601f1916919091016040019291505056fe6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e792e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36a26469706673582212204f53299237b8a11440be6cca4c4b4341cca526e8436dc9f5af8fbca09a25747b64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2226 CODESIZE SUB DUP1 PUSH3 0x2226 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xBE JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x6E JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH3 0xF0 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2126 DUP1 PUSH3 0x100 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA6021ACE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0xD6F80A25 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDA40EF80 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x777B4CD8 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x897B3A68 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21736665 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x21736665 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x22B72666 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x264B4AF6 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x2E886F1F EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x662B12C9 EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178BE5F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x32AD8FB EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xDEEF63A EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x186CB65B EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16F PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ECD JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1F JUMP JUMPDEST PUSH2 0xE40 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x5 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x16F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH2 0x18B3 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1F JUMP JUMPDEST PUSH2 0x18FA JUMP JUMPDEST PUSH2 0x16F PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1977 JUMP JUMPDEST PUSH2 0x371 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1AAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x3DF SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x3EA SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST GT PUSH2 0x46C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2043616C6C2057697468647261772046756E6374696F6E202100000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x495 SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x49F SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x4CA SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4ED SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FB DUP4 DUP4 PUSH2 0x1F83 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x557 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526577617264206D7573742062652067726561746572207468616E207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x57A SWAP1 DUP3 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x5A2 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x5D9 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x61C SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x64E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SWAP1 PUSH2 0x677 SWAP1 DUP3 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x69A SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x6A4 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x506C65617365205761697420212121 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x718 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA9B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x770 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x77B SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST GT PUSH2 0x7D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 EQ PUSH2 0x835 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 EQ PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8C3 SWAP1 DUP3 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SUB PUSH2 0x970 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x933 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x93D SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x965 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA7E SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0x9DB JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x933 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA7E JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xA46 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xA50 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xA78 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xA96 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 ADDRESS DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH2 0xDF3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ DUP1 PUSH2 0xADA JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST DUP1 PUSH2 0xAFD JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST PUSH2 0xB42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST DUP2 PUSH1 0x64 EQ DUP1 PUSH2 0xB51 JUMPI POP DUP2 PUSH1 0x4B EQ JUMPDEST DUP1 PUSH2 0xB5C JUMPI POP DUP2 PUSH1 0x32 EQ JUMPDEST PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E8 PUSH1 0x5 SLOAD DUP4 PUSH2 0xBBB SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP5 PUSH2 0xBDE SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP5 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SSTORE SWAP4 DUP7 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 SUB PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCA3 DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0xCAD SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xD40 JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCA3 DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xDD9 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xDAB DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0xDB5 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xDBF SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xDF1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 ADDRESS DUP6 PUSH2 0x1B23 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xE1B SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE34 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE48 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0xE8F PUSH2 0x1B83 JUMP JUMPDEST PUSH2 0xE99 PUSH1 0x0 PUSH2 0x1BDD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND PUSH2 0xEFB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4669727374205374616B6520546F6B656E73 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 TIMESTAMP SWAP2 PUSH2 0xF2D SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xF38 SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xF42 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST LT ISZERO PUSH2 0x12ED JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x1033 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 DUP7 SWAP2 PUSH2 0xFAA SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFCD SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFEA SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1009 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x102D SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH2 0x1824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x11AD JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1087 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1092 SWAP1 PUSH1 0x4B PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x109C SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x10D1 SWAP1 DUP7 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EE SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1131 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1163 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x116E SWAP1 PUSH1 0x19 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1178 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0xFEA SWAP1 PUSH2 0xDEAD SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x12E8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1201 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x120C SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1216 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x124B SWAP1 DUP7 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1268 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1287 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12AB SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x12DD SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x116E SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x3C SWAP1 PUSH2 0x131C SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1326 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x1350 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1373 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP5 POP PUSH1 0x64 SUB PUSH2 0x148E JUMPI PUSH2 0x13A3 DUP2 DUP6 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x13C9 SWAP1 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x13EC SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x13FF SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1409 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1428 DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1445 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1464 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1488 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH2 0x181F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x1634 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x14D7 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x14E1 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x14EC SWAP1 PUSH1 0x4B PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x14F6 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x151D SWAP1 DUP8 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x153A SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1559 DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1576 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15B9 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x15E0 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x15EA SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x15F5 SWAP1 PUSH1 0x19 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x15FF SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x1445 SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x181F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x167D DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1687 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1692 SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x169C SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x16C3 SWAP1 DUP8 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x16D6 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x16E0 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x16FF DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171C SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x173B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x175F SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x1786 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1790 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x179B SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x17A5 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x17DA SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x181D SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0xC DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x1878 SWAP1 DUP5 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x18A9 SWAP1 DUP5 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18BB PUSH2 0x1B83 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x18DA SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH2 0x18F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x1B23 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1902 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SWAP3 SWAP1 SWAP3 SSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x19A8 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x19B3 SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x19BD SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST LT ISZERO PUSH2 0x19F2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x6A4 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x1A1B SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1A25 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1A50 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1A73 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1A9A DUP5 DUP5 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1AA4 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB5 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1B1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH2 0x18F7 DUP2 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1B7D SWAP1 DUP6 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C82 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D04 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1CFF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CA0 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x1CFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D13 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1D1B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1D7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D98 SWAP2 SWAP1 PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1DEB DUP8 DUP4 DUP4 DUP8 PUSH2 0x1DF6 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1E65 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1E5E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1E5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST POP DUP2 PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0x1D13 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1E7A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x205D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EC6 DUP3 PUSH2 0x1E94 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EEC DUP6 PUSH2 0x1E94 JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FDD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x200D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2038 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2020 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2053 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x201D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x207C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x201D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH13 0xDE3CEA4B3A3FB2488B2808BAE7 SSTORE PUSH16 0x4A405E50F65E1794383BC026131B13C3 0xC5 PUSH22 0xC31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923 0x23 0x4C 0xF 0xE9 ADD 0x4A PUSH2 0xE792 0xE8 0x5D MUL JUMPI EXP DUP1 SWAP3 0xD0 SWAP11 PUSH15 0x3A57665BC3815A2699A4074001BF1C 0xCA 0xBF PUSH7 0xF5A36A2646970 PUSH7 0x73582212204F53 0x29 SWAP3 CALLDATACOPY 0xB8 LOG1 EQ BLOCKHASH 0xBE PUSH13 0xCA4C4B4341CCA526E8436DC9F5 0xAF DUP16 0xBC LOG0 SWAP11 0x25 PUSH21 0x7B64736F6C63430008130033000000000000000000 ",
							"sourceMap": "201:11658:6:-:0;;;1164:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:5;936:18:0;:32::i;:::-;1209:12:6;:28;;-1:-1:-1;;;;;1209:28:6;;;-1:-1:-1;;;;;;1209:28:6;;;;;;1247:12;:25;;;;;1262:10;1247:25;;;201:11658;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:290:7:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:7;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:7:o;:::-;201:11658:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@APYPer_909": {
									"entryPoint": null,
									"id": 909,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@APY_905": {
									"entryPoint": null,
									"id": 905,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@AdminAddToken_964": {
									"entryPoint": 6323,
									"id": 964,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@BurnAmount_921": {
									"entryPoint": null,
									"id": 921,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ClaimRewards_1848": {
									"entryPoint": 942,
									"id": 1848,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@DepositTokens_1293": {
									"entryPoint": 1711,
									"id": 1293,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@Details_897": {
									"entryPoint": null,
									"id": 897,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_871": {
									"entryPoint": null,
									"id": 871,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@InterestAmount_901": {
									"entryPoint": null,
									"id": 901,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@RewardAmount_917": {
									"entryPoint": null,
									"id": 917,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@SetAPY_1992": {
									"entryPoint": 3648,
									"id": 1992,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@SetRewardPersentage_2022": {
									"entryPoint": 6394,
									"id": 2022,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@Tokens_913": {
									"entryPoint": null,
									"id": 913,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WithdrawTokens_1761": {
									"entryPoint": 3739,
									"id": 1761,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 7213,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 7043,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_849": {
									"entryPoint": null,
									"id": 849,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_836": {
									"entryPoint": null,
									"id": 836,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 7133,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_661": {
									"entryPoint": 7451,
									"id": 661,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_597": {
									"entryPoint": 7428,
									"id": 597,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getTaxPenalty_2050": {
									"entryPoint": null,
									"id": 2050,
									"parameterSlots": 0,
									"returnSlots": 2
								},
								"@isContract_525": {
									"entryPoint": null,
									"id": 525,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 3719,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 6947,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setTexAndPenalty_2038": {
									"entryPoint": null,
									"id": 2038,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@totalStakedTokens_875": {
									"entryPoint": null,
									"id": 875,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 6829,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_792": {
									"entryPoint": 7670,
									"id": 792,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@viewBurnRewards_1962": {
									"entryPoint": 1571,
									"id": 1962,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@viewRewards_1928": {
									"entryPoint": 6519,
									"id": 1928,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 7828,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7851,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256": {
									"entryPoint": 7885,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 8187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7942,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 8011,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256t_uint256": {
									"entryPoint": 7967,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8257,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 8162,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8285,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8090,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8128,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8067,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8109,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 8221,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 8045,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9859:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:7"
															},
															"nodeType": "YulIf",
															"src": "111:70:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:7",
														"type": ""
													}
												],
												"src": "14:173:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "320:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:7"
															},
															"nodeType": "YulIf",
															"src": "272:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "333:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "343:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:7",
														"type": ""
													}
												],
												"src": "192:186:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "494:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "506:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "517:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "536:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "547:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "529:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "529:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "529:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "453:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "464:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "475:4:7",
														"type": ""
													}
												],
												"src": "383:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "686:270:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "733:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "742:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "745:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "735:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "735:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "735:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "707:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "716:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "703:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "703:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "728:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "699:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "699:33:7"
															},
															"nodeType": "YulIf",
															"src": "696:53:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "758:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "787:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "768:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "768:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "758:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "806:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "833:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "844:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "829:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "829:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "816:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "816:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "806:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "857:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "884:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "895:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "880:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "880:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "867:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "867:32:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "857:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "908:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "935:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "946:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "931:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "931:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "918:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "918:32:7"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "908:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "628:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "639:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "651:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "659:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "667:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "675:6:7",
														"type": ""
													}
												],
												"src": "565:391:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1031:110:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1077:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1086:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1089:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1079:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1079:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1079:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1052:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1061:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1048:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1048:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1073:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1044:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1044:32:7"
															},
															"nodeType": "YulIf",
															"src": "1041:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1102:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1125:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1112:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1112:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1102:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "997:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1008:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1020:6:7",
														"type": ""
													}
												],
												"src": "961:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1250:212:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1296:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1305:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1308:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1298:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1298:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1298:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1271:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1280:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1267:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1267:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1292:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1263:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1263:32:7"
															},
															"nodeType": "YulIf",
															"src": "1260:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1321:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1344:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1331:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1331:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1321:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1363:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1390:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1401:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1386:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1386:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1373:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1373:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1363:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1414:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1441:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1452:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1437:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1437:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1424:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1424:32:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1414:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1200:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1211:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1223:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1231:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1239:6:7",
														"type": ""
													}
												],
												"src": "1146:316:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1554:161:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1600:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1609:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1612:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1602:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1602:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1602:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1575:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1584:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1571:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1571:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1596:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1567:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1567:32:7"
															},
															"nodeType": "YulIf",
															"src": "1564:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1625:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1648:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1635:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1635:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1625:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1667:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1694:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1705:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1690:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1690:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1677:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1677:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1667:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1512:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1523:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1535:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1543:6:7",
														"type": ""
													}
												],
												"src": "1467:248:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1849:119:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1859:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1871:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1882:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1867:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1867:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1859:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1901:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1912:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1894:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1894:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1894:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1939:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1950:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1935:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1935:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1955:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1928:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1928:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1928:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1810:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1821:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1829:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1840:4:7",
														"type": ""
													}
												],
												"src": "1720:248:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2074:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2084:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2096:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2107:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2092:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2092:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2084:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2126:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2141:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2157:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2162:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2153:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2153:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2166:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2149:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2149:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2137:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2137:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2119:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2119:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2119:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2043:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2054:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2065:4:7",
														"type": ""
													}
												],
												"src": "1973:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2388:266:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2398:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2410:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2421:3:7",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2406:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2398:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2441:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2452:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2434:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2434:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2434:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2479:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2490:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2475:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2475:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2495:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2468:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2468:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2522:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2533:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2518:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2518:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "2538:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2511:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2511:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2511:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2565:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2576:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2561:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2561:18:7"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "2581:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2554:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2554:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2554:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2608:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2619:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2604:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2604:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "2639:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2632:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2632:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2625:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2625:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2597:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2597:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2325:9:7",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2336:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2344:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2352:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2360:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2368:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2379:4:7",
														"type": ""
													}
												],
												"src": "2181:473:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2691:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2708:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2715:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2711:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2711:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2701:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2701:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2701:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2748:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2751:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2741:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2741:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2741:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2772:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2775:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2765:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2765:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2765:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2659:127:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2843:116:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2853:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2868:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2871:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2864:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2864:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2853:7:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2931:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2933:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2933:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2933:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2902:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2895:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2895:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "2909:1:7"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "2916:7:7"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "2925:1:7"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "2912:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2912:15:7"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "2906:2:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2906:22:7"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "2892:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2892:37:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2885:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2885:45:7"
															},
															"nodeType": "YulIf",
															"src": "2882:71:7"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2822:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2825:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2831:7:7",
														"type": ""
													}
												],
												"src": "2791:168:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3012:77:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3022:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3033:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3036:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3029:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3022:3:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3061:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3063:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3063:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3063:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3053:1:7"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "3056:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3050:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3050:10:7"
															},
															"nodeType": "YulIf",
															"src": "3047:36:7"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2995:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2998:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3004:3:7",
														"type": ""
													}
												],
												"src": "2964:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3268:247:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3285:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3296:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3278:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3278:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3278:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3319:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3330:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3315:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3315:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3335:2:7",
																		"type": "",
																		"value": "57"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3308:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3308:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3308:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3358:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3369:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3354:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3354:18:7"
																	},
																	{
																		"hexValue": "596f7572205374616b652054696d6520436f6d706c6574652c20506c65617365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3374:34:7",
																		"type": "",
																		"value": "Your Stake Time Complete, Please"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3347:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3347:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3347:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3429:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3440:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3425:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3425:18:7"
																	},
																	{
																		"hexValue": "2043616c6c2057697468647261772046756e6374696f6e2021",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3445:27:7",
																		"type": "",
																		"value": " Call Withdraw Function !"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3418:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3418:55:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3418:55:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3482:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3494:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3505:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3490:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3490:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3482:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3245:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3259:4:7",
														"type": ""
													}
												],
												"src": "3094:421:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3569:79:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3579:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3591:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3594:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3587:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3587:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3579:4:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3620:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3622:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3622:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3622:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "3611:4:7"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3617:1:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3608:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3608:11:7"
															},
															"nodeType": "YulIf",
															"src": "3605:37:7"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3551:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3554:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3560:4:7",
														"type": ""
													}
												],
												"src": "3520:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3699:171:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3730:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3751:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3758:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3763:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3754:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3754:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3744:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3744:31:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3744:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3795:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3798:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3788:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3788:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3788:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3823:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3826:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3816:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3816:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3816:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3719:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3712:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3712:9:7"
															},
															"nodeType": "YulIf",
															"src": "3709:132:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3850:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3859:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3862:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3855:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3855:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3850:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3684:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3687:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3693:1:7",
														"type": ""
													}
												],
												"src": "3653:217:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4049:223:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4066:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4077:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4059:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4059:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4059:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4100:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4111:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4096:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4096:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4116:2:7",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4089:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4089:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4089:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4139:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4150:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4135:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4135:18:7"
																	},
																	{
																		"hexValue": "526577617264206d7573742062652067726561746572207468616e207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4155:34:7",
																		"type": "",
																		"value": "Reward must be greater than zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4128:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4128:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4128:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4210:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4221:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4206:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4206:18:7"
																	},
																	{
																		"hexValue": "2e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4226:3:7",
																		"type": "",
																		"value": "."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4199:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4199:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4199:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4239:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4251:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4262:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4247:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4247:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4239:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4026:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4040:4:7",
														"type": ""
													}
												],
												"src": "3875:397:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4406:145:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4416:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4428:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4439:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4424:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4424:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4416:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4458:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4473:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4489:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4494:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4485:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4485:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4498:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4481:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4481:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4469:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4469:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4451:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4451:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4451:51:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4522:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4533:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4518:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4518:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4538:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4511:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4511:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4511:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4367:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4378:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4386:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4397:4:7",
														"type": ""
													}
												],
												"src": "4277:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4634:199:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4680:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4689:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4692:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4682:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4682:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4682:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4655:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4664:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4651:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4651:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4676:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4647:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:32:7"
															},
															"nodeType": "YulIf",
															"src": "4644:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4705:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4724:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4718:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4718:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4709:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4787:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4796:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4799:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4789:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4789:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4789:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4756:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "4777:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "4770:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4770:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4763:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4763:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4753:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4753:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4746:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4746:40:7"
															},
															"nodeType": "YulIf",
															"src": "4743:60:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4812:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4822:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4812:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4600:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4611:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4623:6:7",
														"type": ""
													}
												],
												"src": "4556:277:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5012:165:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5029:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5040:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5022:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5022:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5022:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5063:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5074:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5059:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5059:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5079:2:7",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5052:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5052:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5052:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5102:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5113:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5098:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5098:18:7"
																	},
																	{
																		"hexValue": "506c65617365205761697420212121",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5118:17:7",
																		"type": "",
																		"value": "Please Wait !!!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5091:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5091:45:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5091:45:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5145:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5157:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5168:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5153:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5153:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5145:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4989:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5003:4:7",
														"type": ""
													}
												],
												"src": "4838:339:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5356:176:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5373:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5384:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5366:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5366:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5366:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5407:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5418:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5403:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5403:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5423:2:7",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5396:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5396:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5396:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5446:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5457:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5442:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5442:18:7"
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5462:28:7",
																		"type": "",
																		"value": "Your Time Period Complete."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5435:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5435:56:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5435:56:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5500:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5512:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5523:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5508:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5508:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5500:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5333:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5347:4:7",
														"type": ""
													}
												],
												"src": "5182:350:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5711:172:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5728:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5739:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5721:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5721:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5721:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5762:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5773:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5758:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5758:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5778:2:7",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5751:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5751:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5751:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5801:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5812:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5797:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5797:18:7"
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5817:24:7",
																		"type": "",
																		"value": "Enter Right StakeMonth"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5790:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5790:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5790:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5851:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5863:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5874:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5859:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5859:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5851:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5688:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5702:4:7",
														"type": ""
													}
												],
												"src": "5537:346:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6062:176:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6079:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6090:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6072:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6072:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6072:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6113:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6124:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6109:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6109:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6129:2:7",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6102:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6102:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6102:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6152:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6163:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6148:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6148:18:7"
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6168:28:7",
																		"type": "",
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6141:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6141:56:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6141:56:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6206:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6218:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6229:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6214:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6214:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6206:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6039:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6053:4:7",
														"type": ""
													}
												],
												"src": "5888:350:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6417:168:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6434:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6445:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6427:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6427:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6427:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6468:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6479:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6464:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6464:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6484:2:7",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6457:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6457:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6457:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6507:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6518:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6503:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6503:18:7"
																	},
																	{
																		"hexValue": "4669727374205374616b6520546f6b656e73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6523:20:7",
																		"type": "",
																		"value": "First Stake Tokens"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6496:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6496:48:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6496:48:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6553:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6565:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6576:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6561:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6561:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6553:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6394:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6408:4:7",
														"type": ""
													}
												],
												"src": "6243:342:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6764:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6781:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6792:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6774:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6774:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6774:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6815:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6826:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6811:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6811:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6831:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6804:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6804:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6804:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6854:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6865:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6850:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6850:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6870:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6843:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6843:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6843:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6925:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6936:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6921:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6921:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6941:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6914:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6914:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6914:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6959:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6971:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6982:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6967:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6967:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6959:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6741:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6755:4:7",
														"type": ""
													}
												],
												"src": "6590:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7154:218:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7164:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7176:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7187:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7172:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7172:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7164:4:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7199:29:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7217:3:7",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7222:1:7",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7213:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7213:11:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7226:1:7",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7209:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7209:19:7"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7203:2:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7244:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7259:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7267:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7255:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7255:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7237:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7237:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7237:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7291:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7302:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7287:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7287:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7311:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7319:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7307:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7307:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7280:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7280:43:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7280:43:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7343:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7354:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7339:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7339:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7359:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7332:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7332:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7332:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7107:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7118:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7126:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7134:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7145:4:7",
														"type": ""
													}
												],
												"src": "6997:375:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7551:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7568:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7579:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7561:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7561:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7561:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7602:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7613:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7598:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7598:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7618:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7591:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7591:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7591:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7641:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7652:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7637:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7637:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7657:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7630:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7630:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7630:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7701:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7713:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7724:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7709:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7709:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7701:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7528:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7542:4:7",
														"type": ""
													}
												],
												"src": "7377:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7912:232:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7929:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7940:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7922:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7922:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7922:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7963:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7974:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7959:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7959:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7979:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7952:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7952:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7952:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8002:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8013:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7998:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7998:18:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8018:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7991:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7991:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7991:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8073:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8084:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8069:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8069:18:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8089:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8062:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8062:40:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8062:40:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8111:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8123:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8134:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8119:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8119:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8111:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7889:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7903:4:7",
														"type": ""
													}
												],
												"src": "7738:406:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8323:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8340:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8351:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8333:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8333:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8333:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8374:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8385:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8370:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8370:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8390:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8363:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8363:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8363:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8413:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8424:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8409:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8409:18:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8429:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8402:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8402:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8402:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8484:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8495:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8480:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8480:18:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8500:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8473:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8473:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8473:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8518:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8530:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8541:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8526:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8526:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8518:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8300:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8314:4:7",
														"type": ""
													}
												],
												"src": "8149:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8622:184:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8632:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8641:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8636:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8701:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8726:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8731:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8722:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8722:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "8745:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8750:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8741:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8741:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "8735:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8735:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8715:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8715:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8715:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8662:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8665:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8659:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8659:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8673:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8675:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8684:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8687:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8680:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8680:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8675:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8655:3:7",
																"statements": []
															},
															"src": "8651:113:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8784:3:7"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8789:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8780:16:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8798:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8773:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8773:27:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8773:27:7"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8600:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8605:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8610:6:7",
														"type": ""
													}
												],
												"src": "8556:250:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8948:150:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8958:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8978:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8972:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8972:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8962:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9033:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9041:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9029:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9029:17:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9048:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9053:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8994:34:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8994:66:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8994:66:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9069:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9080:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9085:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9076:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9076:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9069:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8924:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8929:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8940:3:7",
														"type": ""
													}
												],
												"src": "8811:287:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9277:179:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9294:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9305:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9287:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9287:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9287:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9328:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9339:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9324:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9324:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9344:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9317:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9317:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9317:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9367:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9378:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9363:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9363:18:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9383:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9356:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9356:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9356:59:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9424:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9436:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9447:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9432:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9432:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9424:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9254:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9268:4:7",
														"type": ""
													}
												],
												"src": "9103:353:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9582:275:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9599:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9610:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9592:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9592:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9592:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9622:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9642:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9636:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9626:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9669:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9680:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9665:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9665:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9685:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9658:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9658:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9658:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9740:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9748:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9736:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9736:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9757:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9768:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9753:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9753:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9773:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "9701:34:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9701:79:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9701:79:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9789:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9805:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "9824:6:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9832:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9820:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9820:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9841:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9837:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9837:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9816:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9816:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9801:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9801:45:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9848:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9797:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9797:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9789:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9551:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9562:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9573:4:7",
														"type": ""
													}
												],
												"src": "9461:396:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"Your Stake Time Complete, Please\")\n        mstore(add(headStart, 96), \" Call Withdraw Function !\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Reward must be greater than zero\")\n        mstore(add(headStart, 96), \".\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Please Wait !!!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Your Time Period Complete.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Enter Right StakeMonth\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Enter Right EarnPersentage\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"First Stake Tokens\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063a6021ace1161007c578063a6021ace146102e5578063c0cd40ee146102f8578063d6f80a251461030b578063da40ef801461031e578063e88cc2be14610331578063f2fde38b1461039b57600080fd5b8063715018a614610265578063777b4cd81461026d578063897b3a681461028d5780638da5cb5b146102ad5780639131a05a146102d257600080fd5b8063217366651161010a57806321736665146101d557806322b72666146101e8578063264b4af6146102085780632e886f1f146102215780633ae732591461023c578063662b12c91461024557600080fd5b80630178be5f14610147578063032ad8fb1461015c5780630deef63a1461018257806310c404da146101a2578063186cb65b146101b5575b600080fd5b61015a610155366004611eab565b6103ae565b005b61016f61016a366004611eab565b610623565b6040519081526020015b60405180910390f35b61016f610190366004611eab565b600b6020526000908152604090205481565b61015a6101b0366004611ecd565b6106af565b61016f6101c3366004611f06565b60096020526000908152604090205481565b61015a6101e3366004611f1f565b610e40565b61016f6101f6366004611eab565b600d6020526000908152604090205481565b61015a610216366004611f4b565b600591909155600655565b60055460065460408051928352602083019190915201610179565b61016f60035481565b61016f610253366004611eab565b60086020526000908152604090205481565b61015a610e87565b61016f61027b366004611eab565b600c6020526000908152604090205481565b61016f61029b366004611f06565b600a6020526000908152604090205481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610179565b61015a6102e0366004611eab565b610e9b565b6001546102ba906001600160a01b031681565b61015a610306366004611f06565b6118b3565b61015a610319366004611f1f565b6118fa565b61016f61032c366004611eab565b611977565b61037161033f366004611eab565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a001610179565b61015a6103a9366004611eab565b611aad565b6001600160a01b038116600090815260076020526040902060018101546002909101544291906103df90600a611f83565b6103ea90603c611f83565b6103f49190611f9a565b1161046c5760405162461bcd60e51b815260206004820152603960248201527f596f7572205374616b652054696d6520436f6d706c6574652c20506c6561736560448201527f2043616c6c2057697468647261772046756e6374696f6e20210000000000000060648201526084015b60405180910390fd5b6001600160a01b038116600090815260076020526040812060010154603c906104959042611fad565b61049f9190611fc0565b6001600160a01b038316600090815260076020526040812060020154919250906104ca90600a611f83565b6001600160a01b0384166000908152600860205260409020546104ed9190611fc0565b905060006104fb8383611f83565b9050600081116105575760405162461bcd60e51b815260206004820152602160248201527f526577617264206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b6064820152608401610463565b6001600160a01b0384166000908152600c602052604090205461057a9082611fad565b6001600160a01b0385166000908152600c6020526040812080549091906105a2908490611f9a565b909155505060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906105d99087908590600401611fe2565b6020604051808303816000875af11580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611ffb565b5050505050565b6001600160a01b03811660009081526007602052604081206003015460640361064e57506000919050565b6001600160a01b0382166000908152600760205260409020600301546064906106779082611fad565b6001600160a01b03841660009081526008602052604090205461069a9190611f83565b6106a49190611fc0565b92915050565b919050565b6002546001600160a01b03166000908152600b60205260409020546107085760405162461bcd60e51b815260206004820152600f60248201526e506c6561736520576169742021212160881b6044820152606401610463565b600061071884633b9aca00611f83565b6001600160a01b03861660009081526007602052604090206004015490915060ff1615610a9b576001600160a01b0385166000908152600760205260409020600181015460029091015442919061077090600a611f83565b61077b90603c611f83565b6107859190611f9a565b116107d25760405162461bcd60e51b815260206004820152601a60248201527f596f75722054696d6520506572696f6420436f6d706c6574652e0000000000006044820152606401610463565b6001600160a01b03851660009081526007602052604090206002015483146108355760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610463565b6001600160a01b038516600090815260076020526040902060030154821461089f5760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610463565b6001600160a01b0385166000908152600760205260409020546108c3908290611f9a565b6001600160a01b03861660009081526007602052604090209081556000805160206120d18339815191525460029091015403610970576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e8906109339083611f83565b61093d9190611fc0565b6001600160a01b03861660009081526008602052604081208054909190610965908490611f9a565b90915550610a7e9050565b600080516020612091833981519152546001600160a01b038616600090815260076020526040902060020154036109db576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e8906109339083611f83565b6000805160206120b1833981519152546001600160a01b03861660009081526007602052604090206002015403610a7e576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610a469083611f83565b610a509190611fc0565b6001600160a01b03861660009081526008602052604081208054909190610a78908490611f9a565b90915550505b600154610a96906001600160a01b0316863084611b23565b610df3565b600160005260096020526000805160206120d183398151915254831480610ada5750600260005260096020526000805160206120918339815191525483145b80610afd5750600360005260096020526000805160206120b18339815191525483145b610b425760405162461bcd60e51b815260206004820152601660248201527508adce8cae440a4d2ced0e840a6e8c2d6ca9adedce8d60531b6044820152606401610463565b8160641480610b51575081604b145b80610b5c5750816032145b610ba85760405162461bcd60e51b815260206004820152601a60248201527f456e746572205269676874204561726e50657273656e746167650000000000006044820152606401610463565b60006103e860055483610bbb9190611f83565b610bc59190611fc0565b90506040518060a001604052808284610bde9190611fad565b81524260208083019190915260408083018890526060808401889052600160809485018190526001600160a01b038c16600090815260078552839020865181559386015190840155908401516002830181905590840151600383015592909101516004909101805460ff19169115159190911790556000805160206120d1833981519152549003610cd5576001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7546103e890610ca38385611fad565b610cad9190611f83565b610cb79190611fc0565b6001600160a01b038716600090815260086020526040902055610dd9565b600080516020612091833981519152546001600160a01b03871660009081526007602052604090206002015403610d40576002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e890610ca38385611fad565b6000805160206120b1833981519152546001600160a01b03871660009081526007602052604090206002015403610dd9576003600052600a6020527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa39759546103e890610dab8385611fad565b610db59190611f83565b610dbf9190611fc0565b6001600160a01b0387166000908152600860205260409020555b600154610df1906001600160a01b0316873085611b23565b505b6001600160a01b0385166000908152600b602052604081208054839290610e1b908490611f9a565b925050819055508060036000828254610e349190611f9a565b90915550505050505050565b610e48611b83565b60096020526000805160206120d1833981519152929092556000805160206120918339815191525560036000526000805160206120b183398151915255565b610e8f611b83565b610e996000611bdd565b565b6001600160a01b03811660009081526007602052604090206004015460ff16610efb5760405162461bcd60e51b81526020600482015260126024820152714669727374205374616b6520546f6b656e7360701b6044820152606401610463565b6001600160a01b0381166000908152600760205260408120600181015460029091015482914291610f2d90600a611f83565b610f3890603c611f83565b610f429190611f9a565b10156112ed576001600160a01b038316600090815260076020526040902060030154606403611033576001546001600160a01b038481166000908152600c6020908152604080832054600890925290912054919092169163a9059cbb918691610faa91611fad565b6001600160a01b038716600090815260076020526040902054610fcd9190611f9a565b6040518363ffffffff1660e01b8152600401610fea929190611fe2565b6020604051808303816000875af1158015611009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102d9190611ffb565b50611824565b6001600160a01b038316600090815260076020526040902060030154604b036111ad576001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161108791611fad565b61109290604b611f83565b61109c9190611fc0565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb9085906110d1908690611f9a565b6040518363ffffffff1660e01b81526004016110ee929190611fe2565b6020604051808303816000875af115801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190611ffb565b506001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161116391611fad565b61116e906019611f83565b6111789190611fc0565b60015460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610fea9061dead908590600401611fe2565b6001600160a01b0383166000908152600760205260409020600301546032036112e8576001600160a01b0383166000908152600c602090815260408083205460089092529091205460649161120191611fad565b61120c906032611f83565b6112169190611fc0565b6001546001600160a01b03858116600090815260076020526040902054929450169063a9059cbb90859061124b908690611f9a565b6040518363ffffffff1660e01b8152600401611268929190611fe2565b6020604051808303816000875af1158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ab9190611ffb565b506001600160a01b0383166000908152600c60209081526040808320546008909252909120546064916112dd91611fad565b61116e906032611f83565b611824565b6001600160a01b038316600090815260076020526040812060010154819081908190603c9061131c9042611fad565b6113269190611fc0565b6001600160a01b03881660009081526007602052604090206002015490915061135090600a611f83565b6001600160a01b0388166000908152600860205260409020546113739190611fc0565b6001600160a01b03881660009081526007602052604090206003015490945060640361148e576113a38185611f83565b6001600160a01b0388166000908152600c60205260409020549096506113c99087611fad565b6001600160a01b0388166000908152600760205260409020546113ec9190611f9a565b92506103e8600654846113ff9190611f83565b6114099190611fc0565b6001549092506001600160a01b031663a9059cbb886114288587611fad565b6040518363ffffffff1660e01b8152600401611445929190611fe2565b6020604051808303816000875af1158015611464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114889190611ffb565b5061181f565b6001600160a01b038716600090815260076020526040902060030154604b03611634576001600160a01b0387166000908152600c60205260409020546064906114d78387611f83565b6114e19190611fad565b6114ec90604b611f83565b6114f69190611fc0565b6001600160a01b03881660009081526007602052604090205490965061151d908790611f9a565b92506103e8600654846115309190611f83565b61153a9190611fc0565b6001549092506001600160a01b031663a9059cbb886115598587611fad565b6040518363ffffffff1660e01b8152600401611576929190611fe2565b6020604051808303816000875af1158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190611ffb565b506001600160a01b0387166000908152600c60205260409020546064906115e08387611f83565b6115ea9190611fad565b6115f5906019611f83565b6115ff9190611fc0565b60015460405163a9059cbb60e01b81529196506001600160a01b03169063a9059cbb906114459061dead908990600401611fe2565b6001600160a01b03871660009081526007602052604090206003015460320361181f576001600160a01b0387166000908152600c602052604090205460649061167d8387611f83565b6116879190611fad565b611692906032611f83565b61169c9190611fc0565b6001600160a01b0388166000908152600760205260409020549096506116c3908790611f9a565b92506103e8600654846116d69190611f83565b6116e09190611fc0565b6001549092506001600160a01b031663a9059cbb886116ff8587611fad565b6040518363ffffffff1660e01b815260040161171c929190611fe2565b6020604051808303816000875af115801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190611ffb565b506001600160a01b0387166000908152600c60205260409020546064906117868387611f83565b6117909190611fad565b61179b906032611f83565b6117a59190611fc0565b60015460405163a9059cbb60e01b81529196506001600160a01b03169063a9059cbb906117da9061dead908990600401611fe2565b6020604051808303816000875af11580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190611ffb565b505b505050505b6001600160a01b038316600090815260076020908152604080832060048101805460ff19169055600c83528184208490556008835281842084905554600b9092528220805491929091611878908490611fad565b90915550506001600160a01b03831660009081526007602052604081205460038054919290916118a9908490611fad565b9091555050505050565b6118bb611b83565b336000908152600b6020526040812080548392906118da908490611f9a565b90915550506001546118f7906001600160a01b0316333084611b23565b50565b611902611b83565b600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7929092557fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba85560036000527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa3975955565b6001600160a01b038116600090815260076020526040812060018101546002909101544291906119a890600a611f83565b6119b390603c611f83565b6119bd9190611f9a565b10156119f2576001600160a01b0382166000908152600c60209081526040808320546008909252909120546106a49190611fad565b6001600160a01b038216600090815260076020526040812060010154603c90611a1b9042611fad565b611a259190611fc0565b6001600160a01b03841660009081526007602052604081206002015491925090611a5090600a611f83565b6001600160a01b038516600090815260086020526040902054611a739190611fc0565b6001600160a01b0385166000908152600c602052604081205491925090611a9a8484611f83565b611aa49190611fad565b95945050505050565b611ab5611b83565b6001600160a01b038116611b1a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b6118f781611bdd565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611b7d908590611c2d565b50505050565b6000546001600160a01b03163314610e995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610463565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611c82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d049092919063ffffffff16565b805190915015611cff5780806020019051810190611ca09190611ffb565b611cff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b505050565b6060611d138484600085611d1b565b949350505050565b606082471015611d7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610463565b600080866001600160a01b03168587604051611d989190612041565b60006040518083038185875af1925050503d8060008114611dd5576040519150601f19603f3d011682016040523d82523d6000602084013e611dda565b606091505b5091509150611deb87838387611df6565b979650505050505050565b60608315611e65578251600003611e5e576001600160a01b0385163b611e5e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b5081611d13565b611d138383815115611e7a5781518083602001fd5b8060405162461bcd60e51b8152600401610463919061205d565b80356001600160a01b03811681146106aa57600080fd5b600060208284031215611ebd57600080fd5b611ec682611e94565b9392505050565b60008060008060808587031215611ee357600080fd5b611eec85611e94565b966020860135965060408601359560600135945092505050565b600060208284031215611f1857600080fd5b5035919050565b600080600060608486031215611f3457600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611f5e57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106a4576106a4611f6d565b808201808211156106a4576106a4611f6d565b818103818111156106a4576106a4611f6d565b600082611fdd57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60006020828403121561200d57600080fd5b81518015158114611ec657600080fd5b60005b83811015612038578181015183820152602001612020565b50506000910152565b6000825161205381846020870161201d565b9190910192915050565b602081526000825180602084015261207c81604085016020870161201d565b601f01601f1916919091016040019291505056fe6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e792e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36a26469706673582212204f53299237b8a11440be6cca4c4b4341cca526e8436dc9f5af8fbca09a25747b64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA6021ACE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0xD6F80A25 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDA40EF80 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x777B4CD8 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x897B3A68 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21736665 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x21736665 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x22B72666 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x264B4AF6 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x2E886F1F EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x662B12C9 EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178BE5F EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x32AD8FB EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xDEEF63A EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x186CB65B EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16F PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ECD JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1F JUMP JUMPDEST PUSH2 0xE40 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x5 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x16F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F06 JUMP JUMPDEST PUSH2 0x18B3 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1F JUMP JUMPDEST PUSH2 0x18FA JUMP JUMPDEST PUSH2 0x16F PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1977 JUMP JUMPDEST PUSH2 0x371 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1AAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x3DF SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x3EA SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST GT PUSH2 0x46C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2043616C6C2057697468647261772046756E6374696F6E202100000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x495 SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x49F SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x4CA SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4ED SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FB DUP4 DUP4 PUSH2 0x1F83 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x557 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526577617264206D7573742062652067726561746572207468616E207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x57A SWAP1 DUP3 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x5A2 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x5D9 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x61C SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x64E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SWAP1 PUSH2 0x677 SWAP1 DUP3 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x69A SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x6A4 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x506C65617365205761697420212121 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x718 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA9B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x770 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x77B SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST GT PUSH2 0x7D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 EQ PUSH2 0x835 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 EQ PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8C3 SWAP1 DUP3 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SUB PUSH2 0x970 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x933 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x93D SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x965 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA7E SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0x9DB JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0x933 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA7E JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xA46 SWAP1 DUP4 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xA50 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xA78 SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xA96 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 ADDRESS DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH2 0xDF3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ DUP1 PUSH2 0xADA JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST DUP1 PUSH2 0xAFD JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP4 EQ JUMPDEST PUSH2 0xB42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST DUP2 PUSH1 0x64 EQ DUP1 PUSH2 0xB51 JUMPI POP DUP2 PUSH1 0x4B EQ JUMPDEST DUP1 PUSH2 0xB5C JUMPI POP DUP2 PUSH1 0x32 EQ JUMPDEST PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E8 PUSH1 0x5 SLOAD DUP4 PUSH2 0xBBB SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP5 PUSH2 0xBDE SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP5 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SSTORE SWAP4 DUP7 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 SUB PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCA3 DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0xCAD SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xD40 JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xCA3 DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xDD9 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SLOAD PUSH2 0x3E8 SWAP1 PUSH2 0xDAB DUP4 DUP6 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0xDB5 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xDBF SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xDF1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 ADDRESS DUP6 PUSH2 0x1B23 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xE1B SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE34 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE48 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20D1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2091 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x20B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0xE8F PUSH2 0x1B83 JUMP JUMPDEST PUSH2 0xE99 PUSH1 0x0 PUSH2 0x1BDD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND PUSH2 0xEFB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4669727374205374616B6520546F6B656E73 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 TIMESTAMP SWAP2 PUSH2 0xF2D SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xF38 SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0xF42 SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST LT ISZERO PUSH2 0x12ED JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x64 SUB PUSH2 0x1033 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 DUP7 SWAP2 PUSH2 0xFAA SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFCD SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFEA SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1009 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x102D SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH2 0x1824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x11AD JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1087 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1092 SWAP1 PUSH1 0x4B PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x109C SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x10D1 SWAP1 DUP7 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EE SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1131 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1163 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x116E SWAP1 PUSH1 0x19 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1178 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0xFEA SWAP1 PUSH2 0xDEAD SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x12E8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x1201 SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x120C SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1216 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP5 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP6 SWAP1 PUSH2 0x124B SWAP1 DUP7 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1268 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1287 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12AB SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x64 SWAP2 PUSH2 0x12DD SWAP2 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x116E SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x3C SWAP1 PUSH2 0x131C SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1326 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x1350 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1373 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP5 POP PUSH1 0x64 SUB PUSH2 0x148E JUMPI PUSH2 0x13A3 DUP2 DUP6 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x13C9 SWAP1 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x13EC SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x13FF SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1409 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1428 DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1445 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1464 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1488 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH2 0x181F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x4B SUB PUSH2 0x1634 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x14D7 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x14E1 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x14EC SWAP1 PUSH1 0x4B PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x14F6 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x151D SWAP1 DUP8 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x153A SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x1559 DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1576 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15B9 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x15E0 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x15EA SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x15F5 SWAP1 PUSH1 0x19 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x15FF SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x1445 SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x32 SUB PUSH2 0x181F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x167D DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1687 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1692 SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x169C SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP7 POP PUSH2 0x16C3 SWAP1 DUP8 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP3 POP PUSH2 0x3E8 PUSH1 0x6 SLOAD DUP5 PUSH2 0x16D6 SWAP2 SWAP1 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x16E0 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP9 PUSH2 0x16FF DUP6 DUP8 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171C SWAP3 SWAP2 SWAP1 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x173B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x175F SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x64 SWAP1 PUSH2 0x1786 DUP4 DUP8 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1790 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x179B SWAP1 PUSH1 0x32 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x17A5 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x17DA SWAP1 PUSH2 0xDEAD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x181D SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0xC DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x1878 SWAP1 DUP5 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x18A9 SWAP1 DUP5 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18BB PUSH2 0x1B83 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x18DA SWAP1 DUP5 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH2 0x18F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x1B23 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1902 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xBBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7 SWAP3 SWAP1 SWAP3 SSTORE PUSH32 0xBFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD TIMESTAMP SWAP2 SWAP1 PUSH2 0x19A8 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x19B3 SWAP1 PUSH1 0x3C PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x19BD SWAP2 SWAP1 PUSH2 0x1F9A JUMP JUMPDEST LT ISZERO PUSH2 0x19F2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x6A4 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x1A1B SWAP1 TIMESTAMP PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x1A25 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1A50 SWAP1 PUSH1 0xA PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1A73 SWAP2 SWAP1 PUSH2 0x1FC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x1A9A DUP5 DUP5 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1AA4 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB5 PUSH2 0x1B83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1B1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH2 0x18F7 DUP2 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1B7D SWAP1 DUP6 SWAP1 PUSH2 0x1C2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C82 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D04 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1CFF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CA0 SWAP2 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x1CFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D13 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1D1B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1D7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x463 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D98 SWAP2 SWAP1 PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1DEB DUP8 DUP4 DUP4 DUP8 PUSH2 0x1DF6 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1E65 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1E5E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1E5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x463 JUMP JUMPDEST POP DUP2 PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0x1D13 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1E7A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x205D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EC6 DUP3 PUSH2 0x1E94 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EEC DUP6 PUSH2 0x1E94 JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x1F6D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FDD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x200D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2038 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2020 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2053 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x201D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x207C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x201D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH13 0xDE3CEA4B3A3FB2488B2808BAE7 SSTORE PUSH16 0x4A405E50F65E1794383BC026131B13C3 0xC5 PUSH22 0xC31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923 0x23 0x4C 0xF 0xE9 ADD 0x4A PUSH2 0xE792 0xE8 0x5D MUL JUMPI EXP DUP1 SWAP3 0xD0 SWAP11 PUSH15 0x3A57665BC3815A2699A4074001BF1C 0xCA 0xBF PUSH7 0xF5A36A2646970 PUSH7 0x73582212204F53 0x29 SWAP3 CALLDATACOPY 0xB8 LOG1 EQ BLOCKHASH 0xBE PUSH13 0xCA4C4B4341CCA526E8436DC9F5 0xAF DUP16 0xBC LOG0 SWAP11 0x25 PUSH21 0x7B64736F6C63430008130033000000000000000000 ",
							"sourceMap": "201:11658:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9270:679;;;;;;:::i;:::-;;:::i;:::-;;10576:262;;;;;;:::i;:::-;;:::i;:::-;;;529:25:7;;;517:2;502:18;10576:262:6;;;;;;;;780:41;;;;;;:::i;:::-;;;;;;;;;;;;;;2034:2504;;;;;;:::i;:::-;;:::i;689:38::-;;;;;;:::i;:::-;;;;;;;;;;;;;;10948:193;;;;;;:::i;:::-;;:::i;880:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;11617:124;;;;;;:::i;:::-;11694:3;:12;;;;11716:7;:18;11617:124;11747:110;11837:3;;11842:7;;11747:110;;;1894:25:7;;;1950:2;1935:18;;1928:34;;;;1867:18;11747:110:6;1720:248:7;331:32:6;;;;;;634:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1831:101:0;;;:::i;827:47:6:-;;;;;;:::i;:::-;;;;;;;;;;;;;;733:41;;;;;;:::i;:::-;;;;;;;;;;;;;;1201:85:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;2137:32:7;;;2119:51;;2107:2;2092:18;1201:85:0;1973:203:7;4734:4341:6;;;;;;:::i;:::-;;:::i;272:27::-;;;;;-1:-1:-1;;;;;272:27:6;;;1506:232;;;;;;:::i;:::-;;:::i;11252:233::-;;;;;;:::i;:::-;;:::i;9955:616::-;;;;;;:::i;:::-;;:::i;587:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:25:7;;;2490:2;2475:18;;2468:34;;;;2518:18;;;2511:34;;;;2576:2;2561:18;;2554:34;2632:14;2625:22;2619:3;2604:19;;2597:51;2421:3;2406:19;587:41:6;2181:473:7;2081:198:0;;;;;;:::i;:::-;;:::i;9270:679:6:-;-1:-1:-1;;;;;9380:11:6;;;;;;:7;:11;;;;;:21;;;;9344:22;;;;;9421:15;;9380:21;9344:27;;9369:2;9344:27;:::i;:::-;:32;;9374:2;9344:32;:::i;:::-;9343:58;;;;:::i;:::-;9342:94;9321:198;;;;-1:-1:-1;;;9321:198:6;;3296:2:7;9321:198:6;;;3278:21:7;3335:2;3315:18;;;3308:30;3374:34;3354:18;;;3347:62;3445:27;3425:18;;;3418:55;3490:19;;9321:198:6;;;;;;;;;-1:-1:-1;;;;;9567:11:6;;9529:16;9567:11;;;:7;:11;;;;;:21;;;9593:2;;9549:39;;:15;:39;:::i;:::-;9548:48;;;;:::i;:::-;-1:-1:-1;;;;;9671:11:6;;9606:28;9671:11;;;:7;:11;;;;;:22;;;9529:67;;-1:-1:-1;9606:28:6;9671:27;;9696:2;9671:27;:::i;:::-;-1:-1:-1;;;;;9637:18:6;;;;;;:14;:18;;;;;;:62;;;;:::i;:::-;9606:93;-1:-1:-1;9709:17:6;9729:31;9752:8;9606:93;9729:31;:::i;:::-;9709:51;;9790:1;9778:9;:13;9770:59;;;;-1:-1:-1;;;9770:59:6;;4077:2:7;9770:59:6;;;4059:21:7;4116:2;4096:18;;;4089:30;4155:34;4135:18;;;4128:62;-1:-1:-1;;;4206:18:7;;;4199:31;4247:19;;9770:59:6;3875:397:7;9770:59:6;-1:-1:-1;;;;;9871:16:6;;;;;;:12;:16;;;;;;9859:28;;:9;:28;:::i;:::-;-1:-1:-1;;;;;9839:16:6;;;;;;:12;:16;;;;;:48;;:16;;;:48;;;;;:::i;:::-;;;;-1:-1:-1;;9905:12:6;;9898:44;;-1:-1:-1;;;9898:44:6;;-1:-1:-1;;;;;9905:12:6;;;;9898:29;;:44;;9928:2;;9932:9;;9898:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9311:638;;;9270:679;:::o;10576:262::-;-1:-1:-1;;;;;10663:11:6;;10634:14;10663:11;;;:7;:11;;;;;:26;;;10693:3;10663:33;10660:172;;-1:-1:-1;10718:1:6;;10576:262;-1:-1:-1;10576:262:6:o;10660:172::-;-1:-1:-1;;;;;10789:11:6;;;;;;:7;:11;;;;;:26;;;10818:3;;10785:30;;10818:3;10785:30;:::i;:::-;-1:-1:-1;;;;;10765:18:6;;;;;;:14;:18;;;;;;:51;;;;:::i;:::-;10764:57;;;;:::i;:::-;10757:64;10576:262;-1:-1:-1;;10576:262:6:o;10660:172::-;10576:262;;;:::o;2034:2504::-;2201:12;;-1:-1:-1;;;;;2201:12:6;2217:1;2194:20;;;:6;:20;;;;;;2186:52;;;;-1:-1:-1;;;2186:52:6;;5040:2:7;2186:52:6;;;5022:21:7;5079:2;5059:18;;;5052:30;-1:-1:-1;;;5098:18:7;;;5091:45;5153:18;;2186:52:6;4838:339:7;2186:52:6;2248:15;2266:21;:8;2277:10;2266:21;:::i;:::-;-1:-1:-1;;;;;2301:11:6;;;;;;:7;:11;;;;;:17;;;2248:39;;-1:-1:-1;2301:17:6;;2297:2166;;;-1:-1:-1;;;;;2380:11:6;;;;;;:7;:11;;;;;:21;;;;2344:22;;;;;2404:15;;2380:21;2344:27;;2369:2;2344:27;:::i;:::-;:32;;2374:2;2344:32;:::i;:::-;2343:58;;;;:::i;:::-;2342:77;2334:115;;;;-1:-1:-1;;;2334:115:6;;5384:2:7;2334:115:6;;;5366:21:7;5423:2;5403:18;;;5396:30;5462:28;5442:18;;;5435:56;5508:18;;2334:115:6;5182:350:7;2334:115:6;-1:-1:-1;;;;;2488:11:6;;;;;;:7;:11;;;;;:22;;;:36;;2463:117;;;;-1:-1:-1;;;2463:117:6;;5739:2:7;2463:117:6;;;5721:21:7;5778:2;5758:18;;;5751:30;-1:-1:-1;;;5797:18:7;;;5790:52;5859:18;;2463:117:6;5537:346:7;2463:117:6;-1:-1:-1;;;;;2619:11:6;;;;;;:7;:11;;;;;:26;;;:44;;2594:129;;;;-1:-1:-1;;;2594:129:6;;6090:2:7;2594:129:6;;;6072:21:7;6129:2;6109:18;;;6102:30;6168:28;6148:18;;;6141:56;6214:18;;2594:129:6;5888:350:7;2594:129:6;-1:-1:-1;;;;;2765:11:6;;;;;;:7;:11;;;;;:25;:35;;2793:7;;2765:35;:::i;:::-;-1:-1:-1;;;;;2737:11:6;;;;;;:7;:11;;;;;:63;;;-1:-1:-1;;;;;;;;;;;2844:6:6;2818:22;;;;;:32;2814:375;;2910:1;2903:9;;:6;:9;;;;2916:4;;2893:19;;:7;:19;:::i;:::-;2892:28;;;;:::i;:::-;-1:-1:-1;;;;;2870:18:6;;;;;;:14;:18;;;;;:50;;:18;;;:50;;;;;:::i;:::-;;;;-1:-1:-1;2814:375:6;;-1:-1:-1;2814:375:6;;-1:-1:-1;;;;;;;;;;;2971:6:6;-1:-1:-1;;;;;2945:11:6;;2971:6;2945:11;;;:7;2971:6;2945:11;2971:6;2945:11;;2975:1;2945:22;;:32;2941:248;;3037:1;3030:9;;:6;:9;;;;3043:4;;3020:19;;:7;:19;:::i;2941:248::-;-1:-1:-1;;;;;;;;;;;3098:6:6;-1:-1:-1;;;;;3072:11:6;;3098:6;3072:11;;;:7;3098:6;3072:11;3098:6;3072:11;;:22;;;:32;3068:121;;3164:1;3157:9;;:6;:9;;;;3170:4;;3147:19;;:7;:19;:::i;:::-;3146:28;;;;:::i;:::-;-1:-1:-1;;;;;3124:18:6;;;;;;:14;:18;;;;;:50;;:18;;;:50;;;;;:::i;:::-;;;;-1:-1:-1;;3068:121:6;3209:12;;3202:65;;-1:-1:-1;;;;;3209:12:6;3240:2;3252:4;3259:7;3202:37;:65::i;:::-;2297:2166;;;3341:1;3337:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3337:6:6;3323:20;;;:64;;-1:-1:-1;3385:1:6;3381:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3381:6:6;3367:20;;3323:64;:108;;;-1:-1:-1;3429:1:6;3425:6;;:3;:6;;-1:-1:-1;;;;;;;;;;;3425:6:6;3411:20;;3323:108;3298:189;;;;-1:-1:-1;;;3298:189:6;;5739:2:7;3298:189:6;;;5721:21:7;5778:2;5758:18;;;5751:30;-1:-1:-1;;;5797:18:7;;;5790:52;5859:18;;3298:189:6;5537:346:7;3298:189:6;3526:14;3544:3;3526:21;:65;;;;3571:14;3589:2;3571:20;3526:65;:109;;;;3615:14;3633:2;3615:20;3526:109;3501:194;;;;-1:-1:-1;;;3501:194:6;;6090:2:7;3501:194:6;;;6072:21:7;6129:2;6109:18;;;6102:30;6168:28;6148:18;;;6141:56;6214:18;;3501:194:6;5888:350:7;3501:194:6;3709:16;3746:4;3739:3;;3729:7;:13;;;;:::i;:::-;3728:22;;;;:::i;:::-;3709:41;;3778:171;;;;;;;;3812:8;3802:7;:18;;;;:::i;:::-;3778:171;;3838:15;3778:171;;;;;;;;;;;;;;;;;;;;;;3931:4;3778:171;;;;;;;-1:-1:-1;;;;;3764:11:6;;-1:-1:-1;3764:11:6;;;:7;:11;;;;;:185;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3764:185:6;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3993:6:6;3967:32;;3963:411;;4071:1;4064:9;;:6;:9;;;;4077:4;;4042:18;4052:8;4042:7;:18;:::i;:::-;4041:32;;;;:::i;:::-;4040:41;;;;:::i;:::-;-1:-1:-1;;;;;4019:18:6;;;;;;:14;:18;;;;;:62;3963:411;;;-1:-1:-1;;;;;;;;;;;4132:6:6;-1:-1:-1;;;;;4106:11:6;;4132:6;4106:11;;;:7;4132:6;4106:11;4132:6;4106:11;;4136:1;4106:22;;:32;4102:272;;4210:1;4203:9;;:6;:9;;;;4216:4;;4181:18;4191:8;4181:7;:18;:::i;4102:272::-;-1:-1:-1;;;;;;;;;;;4271:6:6;-1:-1:-1;;;;;4245:11:6;;4271:6;4245:11;;;:7;4271:6;4245:11;4271:6;4245:11;;:22;;;:32;4241:133;;4349:1;4342:9;;:6;:9;;;;4355:4;;4320:18;4330:8;4320:7;:18;:::i;:::-;4319:32;;;;:::i;:::-;4318:41;;;;:::i;:::-;-1:-1:-1;;;;;4297:18:6;;;;;;:14;:18;;;;;:62;4241:133;4394:12;;4387:65;;-1:-1:-1;;;;;4394:12:6;4425:2;4437:4;4444:7;4387:37;:65::i;:::-;3284:1179;2297:2166;-1:-1:-1;;;;;4472:10:6;;;;;;:6;:10;;;;;:21;;4486:7;;4472:10;:21;;4486:7;;4472:21;:::i;:::-;;;;;;;;4524:7;4503:17;;:28;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;2034:2504:6:o;10948:193::-;1094:13:0;:11;:13::i;:::-;11069:3:6::1;:6;::::0;-1:-1:-1;;;;;;;;;;;11069:15:6;;;;-1:-1:-1;;;;;;;;;;;11094:15:6;11123:1:::1;11069:6;11119::::0;-1:-1:-1;;;;;;;;;;;11119:15:6;10948:193::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;4734:4341:6:-;-1:-1:-1;;;;;4795:11:6;;;;;;:7;:11;;;;;:17;;;;;4787:48;;;;-1:-1:-1;;;4787:48:6;;6445:2:7;4787:48:6;;;6427:21:7;6484:2;6464:18;;;6457:30;-1:-1:-1;;;6503:18:7;;;6496:48;6561:18;;4787:48:6;6243:342:7;4787:48:6;-1:-1:-1;;;;;4954:11:6;;4845:17;4954:11;;;:7;:11;;;;;:21;;;;4918:22;;;;;4845:17;;4979:15;;4918:27;;4943:2;4918:27;:::i;:::-;:32;;4948:2;4918:32;:::i;:::-;4917:58;;;;:::i;:::-;4916:78;4899:3962;;;-1:-1:-1;;;;;5014:11:6;;;;;;:7;:11;;;;;:26;;;5044:3;5014:33;5010:1478;;5074:12;;-1:-1:-1;;;;;5216:16:6;;;5074:12;5216:16;;;:12;:16;;;;;;;;;5195:14;:18;;;;;;;5074:12;;;;;5067:29;;5118:2;;5195:37;;;:::i;:::-;-1:-1:-1;;;;;5142:11:6;;;;;;:7;:11;;;;;:25;:91;;;;:::i;:::-;5067:184;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4899:3962;;5010:1478;-1:-1:-1;;;;;5276:11:6;;;;;;:7;:11;;;;;:26;;;5306:2;5276:32;5272:1216;;-1:-1:-1;;;;;5383:16:6;;;;;;:12;:16;;;;;;;;;5362:14;:18;;;;;;;5429:3;;5362:37;;;:::i;:::-;5361:44;;5403:2;5361:44;:::i;:::-;5360:72;;;;:::i;:::-;5457:12;;-1:-1:-1;;;;;5525:11:6;;;5457:12;5525:11;;;:7;:11;;;;;:25;5328:104;;-1:-1:-1;5457:12:6;;5450:29;;5501:2;;5525:37;;5328:104;;5525:37;:::i;:::-;5450:130;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;5653:16:6;;;;;;:12;:16;;;;;;;;;5632:14;:18;;;;;;;5699:3;;5632:37;;;:::i;:::-;5631:44;;5673:2;5631:44;:::i;:::-;5630:72;;;;:::i;:::-;5727:12;;5720:142;;-1:-1:-1;;;5720:142:6;;5598:104;;-1:-1:-1;;;;;;5727:12:6;;5720:29;;:142;;5771:42;;5598:104;;5720:142;;;:::i;5272:1216::-;-1:-1:-1;;;;;5887:11:6;;;;;;:7;:11;;;;;:26;;;5917:2;5887:32;5883:605;;-1:-1:-1;;;;;5994:16:6;;;;;;:12;:16;;;;;;;;;5973:14;:18;;;;;;;6040:3;;5973:37;;;:::i;:::-;5972:44;;6014:2;5972:44;:::i;:::-;5971:72;;;;:::i;:::-;6068:12;;-1:-1:-1;;;;;6136:11:6;;;6068:12;6136:11;;;:7;:11;;;;;:25;5939:104;;-1:-1:-1;6068:12:6;;6061:29;;6112:2;;6136:37;;5939:104;;6136:37;:::i;:::-;6061:130;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;6264:16:6;;;;;;:12;:16;;;;;;;;;6243:14;:18;;;;;;;6310:3;;6243:37;;;:::i;:::-;6242:44;;6284:2;6242:44;:::i;5883:605::-;4899:3962;;;-1:-1:-1;;;;;6660:11:6;;6518:28;6660:11;;;:7;:11;;;;;:21;;;6518:28;;;;;;6686:2;;6642:39;;:15;:39;:::i;:::-;6641:48;;;;:::i;:::-;-1:-1:-1;;;;;6780:11:6;;;;;;:7;:11;;;;;:22;;;6622:67;;-1:-1:-1;6780:27:6;;6805:2;6780:27;:::i;:::-;-1:-1:-1;;;;;6742:18:6;;;;;;:14;:18;;;;;;:66;;;;:::i;:::-;-1:-1:-1;;;;;6870:11:6;;;;;;:7;:11;;;;;:26;;;6703:105;;-1:-1:-1;6900:3:6;6870:33;6866:1985;;6936:31;6959:8;6936:20;:31;:::i;:::-;-1:-1:-1;;;;;7075:16:6;;;;;;:12;:16;;;;;;6923:45;;-1:-1:-1;7063:28:6;;6923:45;7063:28;:::i;:::-;-1:-1:-1;;;;;7014:11:6;;;;;;:7;:11;;;;;:25;:78;;;;:::i;:::-;6986:106;;7146:4;7135:7;;7127:5;:15;;;;:::i;:::-;7126:24;;;;:::i;:::-;7175:12;;7110:40;;-1:-1:-1;;;;;;7175:12:6;7168:29;7198:2;7203:21;7110:40;7203:5;:21;:::i;:::-;7168:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6866:1985;;;-1:-1:-1;;;;;7318:11:6;;;;;;:7;:11;;;;;:26;;;7348:2;7318:32;7314:1537;;-1:-1:-1;;;;;7440:16:6;;;;;;:12;:16;;;;;;7510:3;;7405:31;7428:8;7405:20;:31;:::i;:::-;7404:52;;;;:::i;:::-;7403:83;;7484:2;7403:83;:::i;:::-;7402:111;;;;:::i;:::-;-1:-1:-1;;;;;7539:11:6;;;;;;:7;:11;;;;;:25;7370:143;;-1:-1:-1;7539:37:6;;7370:143;;7539:37;:::i;:::-;7531:45;;7630:4;7619:7;;7611:5;:15;;;;:::i;:::-;7610:24;;;;:::i;:::-;7659:12;;7594:40;;-1:-1:-1;;;;;;7659:12:6;7652:29;7682:2;7687:21;7594:40;7687:5;:21;:::i;:::-;7652:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;7798:16:6;;;;;;:12;:16;;;;;;7868:3;;7763:31;7786:8;7763:20;:31;:::i;:::-;7762:52;;;;:::i;:::-;7761:83;;7842:2;7761:83;:::i;:::-;7760:111;;;;:::i;:::-;7896:12;;7889:142;;-1:-1:-1;;;7889:142:6;;7728:143;;-1:-1:-1;;;;;;7896:12:6;;7889:29;;:142;;7940:42;;7728:143;;7889:142;;;:::i;7314:1537::-;-1:-1:-1;;;;;8123:11:6;;;;;;:7;:11;;;;;:26;;;8153:2;8123:32;8119:732;;-1:-1:-1;;;;;8245:16:6;;;;;;:12;:16;;;;;;8315:3;;8210:31;8233:8;8210:20;:31;:::i;:::-;8209:52;;;;:::i;:::-;8208:83;;8289:2;8208:83;:::i;:::-;8207:111;;;;:::i;:::-;-1:-1:-1;;;;;8344:11:6;;;;;;:7;:11;;;;;:25;8175:143;;-1:-1:-1;8344:37:6;;8175:143;;8344:37;:::i;:::-;8336:45;;8435:4;8424:7;;8416:5;:15;;;;:::i;:::-;8415:24;;;;:::i;:::-;8464:12;;8399:40;;-1:-1:-1;;;;;;8464:12:6;8457:29;8487:2;8492:21;8399:40;8492:5;:21;:::i;:::-;8457:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;8603:16:6;;;;;;:12;:16;;;;;;8673:3;;8568:31;8591:8;8568:20;:31;:::i;:::-;8567:52;;;;:::i;:::-;8566:83;;8647:2;8566:83;:::i;:::-;8565:111;;;;:::i;:::-;8701:12;;8694:142;;-1:-1:-1;;;8694:142:6;;8533:143;;-1:-1:-1;;;;;;8701:12:6;;8694:29;;:142;;8745:42;;8533:143;;8694:142;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8119:732;6504:2357;;;;4899:3962;-1:-1:-1;;;;;8870:11:6;;8890:5;8870:11;;;:7;:11;;;;;;;;:17;;;:25;;-1:-1:-1;;8870:25:6;;;8912:12;:16;;;;;8905:23;;;8945:14;:18;;;;;8938:25;;;8987;8973:6;:10;;;;;:39;;8987:25;;8973:10;;:39;;8987:25;;8973:39;:::i;:::-;;;;-1:-1:-1;;;;;;;9043:11:6;;;;;;:7;:11;;;;;:25;9022:17;:46;;9043:25;;9022:17;;:46;;9043:25;;9022:46;:::i;:::-;;;;-1:-1:-1;;;;;4734:4341:6:o;1506:232::-;1094:13:0;:11;:13::i;:::-;1580:10:6::1;1573:18;::::0;;;:6:::1;:18;::::0;;;;:29;;1595:7;;1573:18;:29:::1;::::0;1595:7;;1573:29:::1;:::i;:::-;::::0;;;-1:-1:-1;;1619:12:6::1;::::0;1612:119:::1;::::0;-1:-1:-1;;;;;1619:12:6::1;1663:10;1695:4;1714:7:::0;1612:37:::1;:119::i;:::-;1506:232:::0;:::o;11252:233::-;1094:13:0;:11;:13::i;:::-;11395:6:6::1;:9;::::0;;:21;;;;11426:9;:21;11464:1:::1;11395:9;11457::::0;;:21;11252:233::o;9955:616::-;-1:-1:-1;;;;;10090:11:6;;10009:14;10090:11;;;:7;:11;;;;;:21;;;;10054:22;;;;;10127:15;;10090:21;10054:27;;10079:2;10054:27;:::i;:::-;:32;;10084:2;10054:32;:::i;:::-;10053:58;;;;:::i;:::-;10052:90;10035:530;;;-1:-1:-1;;;;;10194:16:6;;;;;;:12;:16;;;;;;;;;10175:14;:18;;;;;;;:35;;10194:16;10175:35;:::i;10035:530::-;-1:-1:-1;;;;;10280:11:6;;10242:16;10280:11;;;:7;:11;;;;;:21;;;10306:2;;10262:39;;:15;:39;:::i;:::-;10261:48;;;;:::i;:::-;-1:-1:-1;;;;;10392:11:6;;10323:28;10392:11;;;:7;:11;;;;;:22;;;10242:67;;-1:-1:-1;10323:28:6;10392:27;;10417:2;10392:27;:::i;:::-;-1:-1:-1;;;;;10354:18:6;;;;;;:14;:18;;;;;;:66;;;;:::i;:::-;-1:-1:-1;;;;;10506:16:6;;10434:17;10506:16;;;:12;:16;;;;;;10323:97;;-1:-1:-1;10434:17:6;10455:31;10478:8;10323:97;10455:31;:::i;:::-;10454:68;;;;:::i;:::-;10434:88;9955:616;-1:-1:-1;;;;;9955:616:6:o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;6792:2:7;2161:73:0::1;::::0;::::1;6774:21:7::0;6831:2;6811:18;;;6804:30;6870:34;6850:18;;;6843:62;-1:-1:-1;;;6921:18:7;;;6914:36;6967:19;;2161:73:0::1;6590:402:7::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;974:241:3:-:0;1139:68;;;-1:-1:-1;;;;;7255:15:7;;;1139:68:3;;;7237:34:7;7307:15;;7287:18;;;7280:43;7339:18;;;;7332:34;;;1139:68:3;;;;;;;;;;7172:18:7;;;;1139:68:3;;;;;;;;-1:-1:-1;;;;;1139:68:3;-1:-1:-1;;;1139:68:3;;;1112:96;;1132:5;;1112:19;:96::i;:::-;974:241;;;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:5;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;7579:2:7;1414:68:0;;;7561:21:7;;;7598:18;;;7591:30;7657:34;7637:18;;;7630:62;7709:18;;1414:68:0;7377:356:7;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;3747:706:3:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:3;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:3;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:3;;7940:2:7;4351:85:3;;;7922:21:7;7979:2;7959:18;;;7952:30;8018:34;7998:18;;;7991:62;-1:-1:-1;;;8069:18:7;;;8062:40;8119:19;;4351:85:3;7738:406:7;4351:85:3;3817:636;3747:706;;:::o;3873:223:4:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:4:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:4;;8351:2:7;5149:81:4;;;8333:21:7;8390:2;8370:18;;;8363:30;8429:34;8409:18;;;8402:62;-1:-1:-1;;;8480:18:7;;;8473:36;8526:19;;5149:81:4;8149:402:7;5149:81:4;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:4;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:4:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:4;;;7908:60;;;;-1:-1:-1;;;7908:60:4;;9305:2:7;7908:60:4;;;9287:21:7;9344:2;9324:18;;;9317:30;9383:31;9363:18;;;9356:59;9432:18;;7908:60:4;9103:353:7;7908:60:4;-1:-1:-1;8003:10:4;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:4;;;;;;;;:::i;14:173:7:-;82:20;;-1:-1:-1;;;;;131:31:7;;121:42;;111:70;;177:1;174;167:12;192:186;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:7:o;565:391::-;651:6;659;667;675;728:3;716:9;707:7;703:23;699:33;696:53;;;745:1;742;735:12;696:53;768:29;787:9;768:29;:::i;:::-;758:39;844:2;829:18;;816:32;;-1:-1:-1;895:2:7;880:18;;867:32;;946:2;931:18;918:32;;-1:-1:-1;565:391:7;-1:-1:-1;;;565:391:7:o;961:180::-;1020:6;1073:2;1061:9;1052:7;1048:23;1044:32;1041:52;;;1089:1;1086;1079:12;1041:52;-1:-1:-1;1112:23:7;;961:180;-1:-1:-1;961:180:7:o;1146:316::-;1223:6;1231;1239;1292:2;1280:9;1271:7;1267:23;1263:32;1260:52;;;1308:1;1305;1298:12;1260:52;-1:-1:-1;;1331:23:7;;;1401:2;1386:18;;1373:32;;-1:-1:-1;1452:2:7;1437:18;;;1424:32;;1146:316;-1:-1:-1;1146:316:7:o;1467:248::-;1535:6;1543;1596:2;1584:9;1575:7;1571:23;1567:32;1564:52;;;1612:1;1609;1602:12;1564:52;-1:-1:-1;;1635:23:7;;;1705:2;1690:18;;;1677:32;;-1:-1:-1;1467:248:7:o;2659:127::-;2720:10;2715:3;2711:20;2708:1;2701:31;2751:4;2748:1;2741:15;2775:4;2772:1;2765:15;2791:168;2864:9;;;2895;;2912:15;;;2906:22;;2892:37;2882:71;;2933:18;;:::i;2964:125::-;3029:9;;;3050:10;;;3047:36;;;3063:18;;:::i;3520:128::-;3587:9;;;3608:11;;;3605:37;;;3622:18;;:::i;3653:217::-;3693:1;3719;3709:132;;3763:10;3758:3;3754:20;3751:1;3744:31;3798:4;3795:1;3788:15;3826:4;3823:1;3816:15;3709:132;-1:-1:-1;3855:9:7;;3653:217::o;4277:274::-;-1:-1:-1;;;;;4469:32:7;;;;4451:51;;4533:2;4518:18;;4511:34;4439:2;4424:18;;4277:274::o;4556:277::-;4623:6;4676:2;4664:9;4655:7;4651:23;4647:32;4644:52;;;4692:1;4689;4682:12;4644:52;4724:9;4718:16;4777:5;4770:13;4763:21;4756:5;4753:32;4743:60;;4799:1;4796;4789:12;8556:250;8641:1;8651:113;8665:6;8662:1;8659:13;8651:113;;;8741:11;;;8735:18;8722:11;;;8715:39;8687:2;8680:10;8651:113;;;-1:-1:-1;;8798:1:7;8780:16;;8773:27;8556:250::o;8811:287::-;8940:3;8978:6;8972:13;8994:66;9053:6;9048:3;9041:4;9033:6;9029:17;8994:66;:::i;:::-;9076:16;;;;;8811:287;-1:-1:-1;;8811:287:7:o;9461:396::-;9610:2;9599:9;9592:21;9573:4;9642:6;9636:13;9685:6;9680:2;9669:9;9665:18;9658:34;9701:79;9773:6;9768:2;9757:9;9753:18;9748:2;9740:6;9736:15;9701:79;:::i;:::-;9841:2;9820:15;-1:-1:-1;;9816:29:7;9801:45;;;;9848:2;9797:54;;9461:396;-1:-1:-1;;9461:396:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1697200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"APY(uint256)": "2539",
								"APYPer(uint256)": "2494",
								"AdminAddToken(uint256)": "infinite",
								"BurnAmount(address)": "2553",
								"ClaimRewards(address)": "infinite",
								"DepositTokens(address,uint256,uint256,uint256)": "infinite",
								"Details(address)": "11185",
								"ERC20Address()": "2359",
								"InterestAmount(address)": "2641",
								"RewardAmount(address)": "2553",
								"SetAPY(uint256,uint256,uint256)": "68889",
								"SetRewardPersentage(uint256,uint256,uint256)": "68833",
								"Tokens(address)": "2576",
								"WithdrawTokens(address)": "infinite",
								"getTaxPenalty()": "4496",
								"owner()": "2409",
								"renounceOwnership()": "infinite",
								"setTexAndPenalty(uint256,uint256)": "44514",
								"totalStakedTokens()": "2395",
								"transferOwnership(address)": "28465",
								"viewBurnRewards(address)": "infinite",
								"viewRewards(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1164,
									"end": 1279,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1164,
									"end": 1279,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1209,
									"end": 1221,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1209,
									"end": 1237,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1259,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1262,
									"end": 1272,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1247,
									"end": 1272,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "15"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 201,
									"end": 11859,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204f53299237b8a11440be6cca4c4b4341cca526e8436dc9f5af8fbca09a25747b64736f6c63430008130033",
									".code": [
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "A6021ACE"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "A6021ACE"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "C0CD40EE"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "D6F80A25"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "DA40EF80"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "E88CC2BE"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "777B4CD8"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "897B3A68"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "9131A05A"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "21736665"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "21736665"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "22B72666"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "264B4AF6"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "2E886F1F"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "3AE73259"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "662B12C9"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "178BE5F"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "32AD8FB"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "DEEF63A"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "10C404DA"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "186CB65B"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 201,
											"end": 11859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 9270,
											"end": 9949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9270,
											"end": 9949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 10576,
											"end": 10838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 10576,
											"end": 10838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 529,
											"end": 554,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 529,
											"end": 554,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 529,
											"end": 554,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 780,
											"end": 821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 780,
											"end": 821,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 780,
											"end": 821,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 2034,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2034,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 689,
											"end": 727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "tag",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 689,
											"end": 727,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 689,
											"end": 727,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 10948,
											"end": 11141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "tag",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 10948,
											"end": 11141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 880,
											"end": 925,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "D"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 880,
											"end": 925,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 880,
											"end": 925,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 11617,
											"end": 11741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11694,
											"end": 11697,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 11694,
											"end": 11706,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11694,
											"end": 11706,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11694,
											"end": 11706,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11694,
											"end": 11706,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11716,
											"end": 11723,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11716,
											"end": 11734,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11617,
											"end": 11741,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11837,
											"end": 11840,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 11837,
											"end": 11840,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11842,
											"end": 11849,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11842,
											"end": 11849,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1919,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1935,
											"end": 1953,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1935,
											"end": 1953,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1928,
											"end": 1962,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11747,
											"end": 11857,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 1720,
											"end": 1968,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 331,
											"end": 363,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 331,
											"end": 363,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 331,
											"end": 363,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 331,
											"end": 363,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 331,
											"end": 363,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 331,
											"end": 363,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 331,
											"end": 363,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 634,
											"end": 683,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "tag",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 634,
											"end": 683,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 634,
											"end": 683,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 827,
											"end": 874,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 827,
											"end": 874,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "tag",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 827,
											"end": 874,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 827,
											"end": 874,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 733,
											"end": 774,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 733,
											"end": 774,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 733,
											"end": 774,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2169,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2119,
											"end": 2170,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2119,
											"end": 2170,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2109,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2092,
											"end": 2110,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1973,
											"end": 2176,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 4734,
											"end": 9075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 4734,
											"end": 9075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 272,
											"end": 299,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 272,
											"end": 299,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 272,
											"end": 299,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 272,
											"end": 299,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 272,
											"end": 299,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 272,
											"end": 299,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 272,
											"end": 299,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 272,
											"end": 299,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 272,
											"end": 299,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1506,
											"end": 1738,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1506,
											"end": 1738,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 11252,
											"end": 11485,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 11252,
											"end": 11485,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 9955,
											"end": 10571,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 9955,
											"end": 10571,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 587,
											"end": 628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 587,
											"end": 628,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2434,
											"end": 2459,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2490,
											"end": 2492,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2475,
											"end": 2493,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2475,
											"end": 2493,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2468,
											"end": 2502,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2518,
											"end": 2536,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2545,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2576,
											"end": 2578,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2554,
											"end": 2588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2632,
											"end": 2646,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2625,
											"end": 2647,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2619,
											"end": 2622,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 2604,
											"end": 2623,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2604,
											"end": 2623,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2597,
											"end": 2648,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2421,
											"end": 2424,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 2406,
											"end": 2425,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 587,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 2181,
											"end": 2654,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9387,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9391,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9401,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 9380,
											"end": 9401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9401,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9366,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 9344,
											"end": 9366,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9366,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9366,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9366,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9421,
											"end": 9436,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9421,
											"end": 9436,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9380,
											"end": 9401,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9369,
											"end": 9371,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 9344,
											"end": 9371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "tag",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 9344,
											"end": 9376,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9374,
											"end": 9376,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 9344,
											"end": 9376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 9344,
											"end": 9376,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9344,
											"end": 9376,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 9344,
											"end": 9376,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 9343,
											"end": 9401,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 9343,
											"end": 9401,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9342,
											"end": 9436,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3296,
											"end": 3298,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3278,
											"end": 3299,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3335,
											"end": 3337,
											"name": "PUSH",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3308,
											"end": 3338,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3374,
											"end": 3408,
											"name": "PUSH",
											"source": 7,
											"value": "596F7572205374616B652054696D6520436F6D706C6574652C20506C65617365"
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3354,
											"end": 3372,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3347,
											"end": 3409,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3445,
											"end": 3472,
											"name": "PUSH",
											"source": 7,
											"value": "2043616C6C2057697468647261772046756E6374696F6E202100000000000000"
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3425,
											"end": 3443,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3418,
											"end": 3473,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3490,
											"end": 3509,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 3490,
											"end": 3509,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "tag",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 9321,
											"end": 9519,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9529,
											"end": 9545,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9574,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9578,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9588,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 9567,
											"end": 9588,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9567,
											"end": 9588,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9593,
											"end": 9595,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 9593,
											"end": 9595,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9549,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 9549,
											"end": 9588,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9549,
											"end": 9564,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9549,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 9549,
											"end": 9588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9549,
											"end": 9588,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 9549,
											"end": 9588,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 9548,
											"end": 9596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "tag",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 9548,
											"end": 9596,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9606,
											"end": 9634,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9678,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9682,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9693,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 9671,
											"end": 9693,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9693,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9529,
											"end": 9596,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9529,
											"end": 9596,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9606,
											"end": 9634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9698,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 9671,
											"end": 9698,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9696,
											"end": 9698,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 9671,
											"end": 9698,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 9671,
											"end": 9698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9698,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 9671,
											"end": 9698,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9651,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9655,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 9637,
											"end": 9699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 9637,
											"end": 9699,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9606,
											"end": 9699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9709,
											"end": 9726,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9729,
											"end": 9760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 9752,
											"end": 9760,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9606,
											"end": 9699,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9729,
											"end": 9760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 9729,
											"end": 9760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9729,
											"end": 9760,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 9729,
											"end": 9760,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9709,
											"end": 9760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9709,
											"end": 9760,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9790,
											"end": 9791,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9778,
											"end": 9787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9791,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4077,
											"end": 4079,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4059,
											"end": 4080,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4118,
											"name": "PUSH",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4096,
											"end": 4114,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4119,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4155,
											"end": 4189,
											"name": "PUSH",
											"source": 7,
											"value": "526577617264206D7573742062652067726561746572207468616E207A65726F"
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4128,
											"end": 4190,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4206,
											"end": 4224,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4199,
											"end": 4230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4247,
											"end": 4266,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4247,
											"end": 4266,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3875,
											"end": 4272,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 9770,
											"end": 9829,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9883,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9871,
											"end": 9887,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9859,
											"end": 9887,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 9859,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9859,
											"end": 9868,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9859,
											"end": 9887,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 9859,
											"end": 9887,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9859,
											"end": 9887,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 9859,
											"end": 9887,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9851,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9855,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 9839,
											"end": 9887,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9839,
											"end": 9887,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9927,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 9898,
											"end": 9927,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9928,
											"end": 9930,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 9928,
											"end": 9930,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9932,
											"end": 9941,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 9932,
											"end": 9941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 9898,
											"end": 9942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 9898,
											"end": 9942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9898,
											"end": 9942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9311,
											"end": 9949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9311,
											"end": 9949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9311,
											"end": 9949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9949,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10634,
											"end": 10648,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10670,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10674,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10689,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 10663,
											"end": 10689,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10663,
											"end": 10689,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10693,
											"end": 10696,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 10663,
											"end": 10696,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10718,
											"end": 10719,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10718,
											"end": 10719,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10576,
											"end": 10838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10796,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10800,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10815,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 10789,
											"end": 10815,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10789,
											"end": 10815,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10818,
											"end": 10821,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 10818,
											"end": 10821,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10785,
											"end": 10815,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 10785,
											"end": 10815,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10818,
											"end": 10821,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10785,
											"end": 10815,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 10785,
											"end": 10815,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10785,
											"end": 10815,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 10785,
											"end": 10815,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10779,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10783,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 10765,
											"end": 10816,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 10765,
											"end": 10816,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 10764,
											"end": 10821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 10764,
											"end": 10821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10757,
											"end": 10821,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10576,
											"end": 10838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 10660,
											"end": 10832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10576,
											"end": 10838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2034,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2201,
											"end": 2213,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2201,
											"end": 2213,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2201,
											"end": 2213,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2218,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2200,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2194,
											"end": 2214,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5040,
											"end": 5042,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5022,
											"end": 5043,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5079,
											"end": 5081,
											"name": "PUSH",
											"source": 7,
											"value": "F"
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5059,
											"end": 5077,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5052,
											"end": 5082,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365205761697420212121"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5091,
											"end": 5136,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5153,
											"end": 5171,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5153,
											"end": 5171,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 4838,
											"end": 5177,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 2186,
											"end": 2238,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2248,
											"end": 2263,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 2266,
											"end": 2274,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2277,
											"end": 2287,
											"name": "PUSH",
											"source": 6,
											"value": "3B9ACA00"
										},
										{
											"begin": 2266,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2266,
											"end": 2287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2266,
											"end": 2287,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 2266,
											"end": 2287,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2308,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2312,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2318,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2301,
											"end": 2318,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2318,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2248,
											"end": 2287,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2248,
											"end": 2287,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2301,
											"end": 2318,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2301,
											"end": 2318,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2387,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2391,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2404,
											"end": 2419,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 2404,
											"end": 2419,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 2344,
											"end": 2371,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2369,
											"end": 2371,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 2344,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2344,
											"end": 2371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2371,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 2344,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 2344,
											"end": 2376,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2374,
											"end": 2376,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 2344,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2344,
											"end": 2376,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2344,
											"end": 2376,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 2344,
											"end": 2376,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2343,
											"end": 2401,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 2343,
											"end": 2401,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2342,
											"end": 2419,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5384,
											"end": 5386,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5423,
											"end": 5425,
											"name": "PUSH",
											"source": 7,
											"value": "1A"
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5403,
											"end": 5421,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5396,
											"end": 5426,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5462,
											"end": 5490,
											"name": "PUSH",
											"source": 7,
											"value": "596F75722054696D6520506572696F6420436F6D706C6574652E000000000000"
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5435,
											"end": 5491,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5508,
											"end": 5526,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5508,
											"end": 5526,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5182,
											"end": 5532,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 2334,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2495,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2499,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2510,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2488,
											"end": 2510,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2510,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2524,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2524,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 5741,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5721,
											"end": 5742,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "PUSH",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5751,
											"end": 5781,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5790,
											"end": 5842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5537,
											"end": 5883,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 2463,
											"end": 2580,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2626,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2630,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2645,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2619,
											"end": 2645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2645,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2663,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2619,
											"end": 2663,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6090,
											"end": 6092,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6072,
											"end": 6093,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6129,
											"end": 6131,
											"name": "PUSH",
											"source": 7,
											"value": "1A"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6102,
											"end": 6132,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6168,
											"end": 6196,
											"name": "PUSH",
											"source": 7,
											"value": "456E746572205269676874204561726E50657273656E74616765000000000000"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6141,
											"end": 6197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5888,
											"end": 6238,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2594,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2772,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2776,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2790,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 2765,
											"end": 2800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2793,
											"end": 2800,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2793,
											"end": 2800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2765,
											"end": 2800,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2765,
											"end": 2800,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 2765,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2744,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2748,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2800,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2800,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2844,
											"end": 2850,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2840,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2818,
											"end": 2840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2840,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2840,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2840,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2850,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2910,
											"end": 2911,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2903,
											"end": 2909,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "PUSH",
											"source": 6,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 2903,
											"end": 2912,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2916,
											"end": 2920,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 2916,
											"end": 2920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2893,
											"end": 2912,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 2893,
											"end": 2912,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2893,
											"end": 2900,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2893,
											"end": 2912,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2893,
											"end": 2912,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2893,
											"end": 2912,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 2893,
											"end": 2912,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 2892,
											"end": 2920,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2892,
											"end": 2920,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2884,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2888,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2870,
											"end": 2920,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2920,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2814,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2971,
											"end": 2977,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2971,
											"end": 2977,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2971,
											"end": 2977,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2971,
											"end": 2977,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2956,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2975,
											"end": 2976,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2945,
											"end": 2967,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2967,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2945,
											"end": 2977,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2941,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 2941,
											"end": 3189,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3037,
											"end": 3038,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3030,
											"end": 3036,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "PUSH",
											"source": 6,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 3030,
											"end": 3039,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3043,
											"end": 3047,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 3043,
											"end": 3047,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3020,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 3020,
											"end": 3039,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3020,
											"end": 3027,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3020,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 3020,
											"end": 3039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2941,
											"end": 3189,
											"name": "tag",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 2941,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3079,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3094,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3072,
											"end": 3094,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3094,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3072,
											"end": 3104,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3068,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 3068,
											"end": 3189,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3164,
											"end": 3165,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3157,
											"end": 3163,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "PUSH",
											"source": 6,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 3157,
											"end": 3166,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3170,
											"end": 3174,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 3170,
											"end": 3174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3147,
											"end": 3154,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 3147,
											"end": 3166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3146,
											"end": 3174,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "tag",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 3146,
											"end": 3174,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3138,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 3124,
											"end": 3174,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "tag",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3124,
											"end": 3174,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3068,
											"end": 3189,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 3068,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3209,
											"end": 3221,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3209,
											"end": 3221,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3202,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 3202,
											"end": 3267,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3209,
											"end": 3221,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3240,
											"end": 3242,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3252,
											"end": 3256,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 3259,
											"end": 3266,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3202,
											"end": 3239,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 3202,
											"end": 3267,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3202,
											"end": 3267,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 3202,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3341,
											"end": 3342,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3337,
											"end": 3343,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3337,
											"end": 3343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3337,
											"end": 3340,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3337,
											"end": 3343,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3337,
											"end": 3343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3337,
											"end": 3343,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3387,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 3323,
											"end": 3387,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3385,
											"end": 3386,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3381,
											"end": 3387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3381,
											"end": 3387,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3381,
											"end": 3384,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3381,
											"end": 3387,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3381,
											"end": 3387,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3381,
											"end": 3387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3367,
											"end": 3387,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3367,
											"end": 3387,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3387,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 3323,
											"end": 3387,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3431,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3431,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 3323,
											"end": 3431,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3429,
											"end": 3430,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3425,
											"end": 3431,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3431,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3425,
											"end": 3428,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3425,
											"end": 3431,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3425,
											"end": 3431,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3425,
											"end": 3431,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3411,
											"end": 3431,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3411,
											"end": 3431,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3431,
											"name": "tag",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 3323,
											"end": 3431,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 5741,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5721,
											"end": 5742,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "PUSH",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5776,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5751,
											"end": 5781,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8ADCE8CAE440A4D2CED0E840A6E8C2D6CA9ADEDCE8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5797,
											"end": 5815,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5790,
											"end": 5842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5537,
											"end": 5883,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "tag",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 3298,
											"end": 3487,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3540,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3544,
											"end": 3547,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 3526,
											"end": 3547,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3571,
											"end": 3585,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3589,
											"end": 3591,
											"name": "PUSH",
											"source": 6,
											"value": "4B"
										},
										{
											"begin": 3571,
											"end": 3591,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "tag",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 3526,
											"end": 3591,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3615,
											"end": 3629,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3633,
											"end": 3635,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 3526,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6090,
											"end": 6092,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6072,
											"end": 6093,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6129,
											"end": 6131,
											"name": "PUSH",
											"source": 7,
											"value": "1A"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6109,
											"end": 6127,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6102,
											"end": 6132,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6168,
											"end": 6196,
											"name": "PUSH",
											"source": 7,
											"value": "456E746572205269676874204561726E50657273656E74616765000000000000"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6148,
											"end": 6166,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6141,
											"end": 6197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6214,
											"end": 6232,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5888,
											"end": 6238,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3501,
											"end": 3695,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3709,
											"end": 3725,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3746,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 3739,
											"end": 3742,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3739,
											"end": 3742,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3736,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 3729,
											"end": 3742,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3729,
											"end": 3742,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3728,
											"end": 3750,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3709,
											"end": 3750,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3709,
											"end": 3750,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3812,
											"end": 3820,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3802,
											"end": 3809,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3802,
											"end": 3820,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 3802,
											"end": 3820,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3838,
											"end": 3853,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3931,
											"end": 3935,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "DUP13",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3771,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3775,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3764,
											"end": 3949,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3993,
											"end": 3999,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3967,
											"end": 3999,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3967,
											"end": 3999,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4071,
											"end": 4072,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4064,
											"end": 4070,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "PUSH",
											"source": 6,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 4064,
											"end": 4073,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4077,
											"end": 4081,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 4077,
											"end": 4081,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4052,
											"end": 4060,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4049,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4042,
											"end": 4060,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4060,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4042,
											"end": 4060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 4041,
											"end": 4073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 4041,
											"end": 4073,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 4040,
											"end": 4081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 4040,
											"end": 4081,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4033,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4081,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 3963,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4113,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4117,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4136,
											"end": 4137,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4106,
											"end": 4128,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4128,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4106,
											"end": 4138,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4102,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 4102,
											"end": 4374,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4210,
											"end": 4211,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4203,
											"end": 4209,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "PUSH",
											"source": 6,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 4203,
											"end": 4212,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4216,
											"end": 4220,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 4216,
											"end": 4220,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4181,
											"end": 4199,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4191,
											"end": 4199,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4181,
											"end": 4188,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4181,
											"end": 4199,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4181,
											"end": 4199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4102,
											"end": 4374,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 4102,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4271,
											"end": 4277,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4271,
											"end": 4277,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4252,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4271,
											"end": 4277,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4271,
											"end": 4277,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4267,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4245,
											"end": 4267,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4267,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4245,
											"end": 4277,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4241,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 4241,
											"end": 4374,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4349,
											"end": 4350,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4342,
											"end": 4348,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "PUSH",
											"source": 6,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4355,
											"end": 4359,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 4355,
											"end": 4359,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4320,
											"end": 4338,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4330,
											"end": 4338,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4320,
											"end": 4327,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4320,
											"end": 4338,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4320,
											"end": 4338,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4320,
											"end": 4338,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4320,
											"end": 4338,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 4319,
											"end": 4351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4319,
											"end": 4351,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 4318,
											"end": 4359,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 4318,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4311,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4315,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4359,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4241,
											"end": 4374,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 4241,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4394,
											"end": 4406,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4394,
											"end": 4406,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4387,
											"end": 4452,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4387,
											"end": 4452,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4394,
											"end": 4406,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4425,
											"end": 4427,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4437,
											"end": 4441,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 4444,
											"end": 4451,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4387,
											"end": 4424,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 4387,
											"end": 4452,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4387,
											"end": 4452,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4387,
											"end": 4452,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3284,
											"end": 4463,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 2297,
											"end": 4463,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4478,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4486,
											"end": 4493,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4486,
											"end": 4493,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4482,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4486,
											"end": 4493,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4486,
											"end": 4493,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4472,
											"end": 4493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "tag",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4472,
											"end": 4493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4524,
											"end": 4531,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4520,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4503,
											"end": 4520,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4503,
											"end": 4531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4503,
											"end": 4531,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 10948,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11069,
											"end": 11072,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11069,
											"end": 11075,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11069,
											"end": 11075,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11069,
											"end": 11084,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11069,
											"end": 11084,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11069,
											"end": 11084,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11069,
											"end": 11084,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11094,
											"end": 11109,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11123,
											"end": 11124,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 11069,
											"end": 11075,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11119,
											"end": 11125,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11119,
											"end": 11134,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10948,
											"end": 11141,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 1922,
											"end": 1923,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 1895,
											"end": 1925,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 4734,
											"end": 9075,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4802,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4806,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4812,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4795,
											"end": 4812,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4812,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4795,
											"end": 4812,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 4795,
											"end": 4812,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6445,
											"end": 6447,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6448,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6484,
											"end": 6486,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6464,
											"end": 6482,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6457,
											"end": 6487,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4669727374205374616B6520546F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6503,
											"end": 6521,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6496,
											"end": 6544,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6561,
											"end": 6579,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6561,
											"end": 6579,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 6243,
											"end": 6585,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 4787,
											"end": 4835,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4845,
											"end": 4862,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4961,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4975,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4954,
											"end": 4975,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4975,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4975,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4845,
											"end": 4862,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4845,
											"end": 4862,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4979,
											"end": 4994,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 4979,
											"end": 4994,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 4918,
											"end": 4945,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4943,
											"end": 4945,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 4918,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 4918,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4945,
											"name": "tag",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 4918,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4948,
											"end": 4950,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 4918,
											"end": 4950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4917,
											"end": 4975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 4917,
											"end": 4975,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4916,
											"end": 4994,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5021,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5040,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5014,
											"end": 5040,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5014,
											"end": 5040,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5044,
											"end": 5047,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 6488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 5010,
											"end": 6488,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5228,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5216,
											"end": 5232,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5209,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5213,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5096,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 5067,
											"end": 5096,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5120,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5120,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5195,
											"end": 5232,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5195,
											"end": 5232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5195,
											"end": 5232,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5195,
											"end": 5232,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5149,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5153,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5167,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 5142,
											"end": 5233,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "tag",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 5142,
											"end": 5233,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5067,
											"end": 5251,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "tag",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "tag",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 5067,
											"end": 5251,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "tag",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5067,
											"end": 5251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 6488,
											"name": "tag",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 5010,
											"end": 6488,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5283,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5287,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5302,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5276,
											"end": 5302,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5276,
											"end": 5302,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5306,
											"end": 5308,
											"name": "PUSH",
											"source": 6,
											"value": "4B"
										},
										{
											"begin": 5276,
											"end": 5308,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5272,
											"end": 6488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 5272,
											"end": 6488,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5395,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5383,
											"end": 5399,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5376,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5380,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5429,
											"end": 5432,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5429,
											"end": 5432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 5362,
											"end": 5399,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5362,
											"end": 5399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5362,
											"end": 5399,
											"name": "tag",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 5362,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5361,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 5361,
											"end": 5405,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5403,
											"end": 5405,
											"name": "PUSH",
											"source": 6,
											"value": "4B"
										},
										{
											"begin": 5361,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 5361,
											"end": 5405,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5361,
											"end": 5405,
											"name": "tag",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 5361,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 5360,
											"end": 5432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "tag",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 5360,
											"end": 5432,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5532,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5536,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5550,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5328,
											"end": 5432,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5328,
											"end": 5432,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5479,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 5450,
											"end": 5479,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5501,
											"end": 5503,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5501,
											"end": 5503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 5525,
											"end": 5562,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5328,
											"end": 5432,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5328,
											"end": 5432,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 5525,
											"end": 5562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5525,
											"end": 5562,
											"name": "tag",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 5525,
											"end": 5562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5450,
											"end": 5580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "tag",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "tag",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 5450,
											"end": 5580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "tag",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 5450,
											"end": 5580,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5665,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5669,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5646,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5699,
											"end": 5702,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5699,
											"end": 5702,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5669,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "245"
										},
										{
											"begin": 5632,
											"end": 5669,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5669,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5632,
											"end": 5669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5669,
											"name": "tag",
											"source": 6,
											"value": "245"
										},
										{
											"begin": 5632,
											"end": 5669,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5631,
											"end": 5675,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 5631,
											"end": 5675,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5673,
											"end": 5675,
											"name": "PUSH",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 5631,
											"end": 5675,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 5631,
											"end": 5675,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5631,
											"end": 5675,
											"name": "tag",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 5631,
											"end": 5675,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "247"
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 5630,
											"end": 5702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "tag",
											"source": 6,
											"value": "247"
										},
										{
											"begin": 5630,
											"end": 5702,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5598,
											"end": 5702,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5598,
											"end": 5702,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5749,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 5720,
											"end": 5749,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5771,
											"end": 5813,
											"name": "PUSH",
											"source": 6,
											"value": "DEAD"
										},
										{
											"begin": 5771,
											"end": 5813,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5598,
											"end": 5702,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5598,
											"end": 5702,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5720,
											"end": 5862,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5720,
											"end": 5862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5272,
											"end": 6488,
											"name": "tag",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 5272,
											"end": 6488,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5894,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5898,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5913,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5887,
											"end": 5913,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5887,
											"end": 5913,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5917,
											"end": 5919,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 5887,
											"end": 5919,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5883,
											"end": 6488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "253"
										},
										{
											"begin": 5883,
											"end": 6488,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6006,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5994,
											"end": 6010,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5987,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 5991,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6043,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6040,
											"end": 6043,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 6010,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "254"
										},
										{
											"begin": 5973,
											"end": 6010,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 6010,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5973,
											"end": 6010,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5973,
											"end": 6010,
											"name": "tag",
											"source": 6,
											"value": "254"
										},
										{
											"begin": 5973,
											"end": 6010,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5972,
											"end": 6016,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 5972,
											"end": 6016,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6014,
											"end": 6016,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 5972,
											"end": 6016,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 5972,
											"end": 6016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5972,
											"end": 6016,
											"name": "tag",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 5972,
											"end": 6016,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 5971,
											"end": 6043,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "tag",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 5971,
											"end": 6043,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6068,
											"end": 6080,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6068,
											"end": 6080,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6068,
											"end": 6080,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6143,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6147,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6161,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5939,
											"end": 6043,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5939,
											"end": 6043,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6068,
											"end": 6080,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6068,
											"end": 6080,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6090,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 6061,
											"end": 6090,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6112,
											"end": 6114,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6112,
											"end": 6114,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 6136,
											"end": 6173,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5939,
											"end": 6043,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5939,
											"end": 6043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 6136,
											"end": 6173,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6136,
											"end": 6173,
											"name": "tag",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 6136,
											"end": 6173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 6061,
											"end": 6191,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "tag",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "tag",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "261"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 6061,
											"end": 6191,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "tag",
											"source": 6,
											"value": "261"
										},
										{
											"begin": 6061,
											"end": 6191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6276,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6280,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6257,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6261,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6310,
											"end": 6313,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6310,
											"end": 6313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 6243,
											"end": 6280,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 6243,
											"end": 6280,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6243,
											"end": 6280,
											"name": "tag",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 6243,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6242,
											"end": 6286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 6242,
											"end": 6286,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6284,
											"end": 6286,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 6242,
											"end": 6286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 6242,
											"end": 6286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5883,
											"end": 6488,
											"name": "tag",
											"source": 6,
											"value": "253"
										},
										{
											"begin": 5883,
											"end": 6488,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6667,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6671,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6681,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6660,
											"end": 6681,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6681,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6686,
											"end": 6688,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 6686,
											"end": 6688,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 6642,
											"end": 6681,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6657,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 6642,
											"end": 6681,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6681,
											"name": "tag",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 6642,
											"end": 6681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 6641,
											"end": 6689,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 6641,
											"end": 6689,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6787,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6791,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6802,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 6780,
											"end": 6802,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6802,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6622,
											"end": 6689,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6622,
											"end": 6689,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6780,
											"end": 6807,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 6780,
											"end": 6807,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6805,
											"end": 6807,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 6780,
											"end": 6807,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 6780,
											"end": 6807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6780,
											"end": 6807,
											"name": "tag",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 6780,
											"end": 6807,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6756,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6760,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 6742,
											"end": 6808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "tag",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 6742,
											"end": 6808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6877,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6881,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6896,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6870,
											"end": 6896,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6896,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6703,
											"end": 6808,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6703,
											"end": 6808,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6900,
											"end": 6903,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6870,
											"end": 6903,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6936,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 6959,
											"end": 6967,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6936,
											"end": 6956,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6936,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 6936,
											"end": 6967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6936,
											"end": 6967,
											"name": "tag",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 6936,
											"end": 6967,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7087,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7075,
											"end": 7091,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6923,
											"end": 6968,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6923,
											"end": 6968,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7063,
											"end": 7091,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 7063,
											"end": 7091,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6923,
											"end": 6968,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7063,
											"end": 7091,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 7063,
											"end": 7091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7063,
											"end": 7091,
											"name": "tag",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 7063,
											"end": 7091,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7021,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7025,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7039,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 7014,
											"end": 7092,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "tag",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 7014,
											"end": 7092,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6986,
											"end": 7092,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6986,
											"end": 7092,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7146,
											"end": 7150,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7135,
											"end": 7142,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7135,
											"end": 7142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7132,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "278"
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7127,
											"end": 7142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "tag",
											"source": 6,
											"value": "278"
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "279"
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 7126,
											"end": 7150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "tag",
											"source": 6,
											"value": "279"
										},
										{
											"begin": 7126,
											"end": 7150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7175,
											"end": 7187,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7175,
											"end": 7187,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7110,
											"end": 7150,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7110,
											"end": 7150,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7175,
											"end": 7187,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7197,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 7198,
											"end": 7200,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 7203,
											"end": 7224,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "280"
										},
										{
											"begin": 7110,
											"end": 7150,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7203,
											"end": 7208,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7203,
											"end": 7224,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 7203,
											"end": 7224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7203,
											"end": 7224,
											"name": "tag",
											"source": 6,
											"value": "280"
										},
										{
											"begin": 7203,
											"end": 7224,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 7168,
											"end": 7226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "tag",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "283"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "tag",
											"source": 6,
											"value": "283"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 7168,
											"end": 7226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "tag",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7168,
											"end": 7226,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "tag",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 6866,
											"end": 8851,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7325,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7329,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7344,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7318,
											"end": 7344,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7344,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7348,
											"end": 7350,
											"name": "PUSH",
											"source": 6,
											"value": "4B"
										},
										{
											"begin": 7318,
											"end": 7350,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7314,
											"end": 8851,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "286"
										},
										{
											"begin": 7314,
											"end": 8851,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7452,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7440,
											"end": 7456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7510,
											"end": 7513,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 7510,
											"end": 7513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7405,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "287"
										},
										{
											"begin": 7428,
											"end": 7436,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7405,
											"end": 7425,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7405,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7405,
											"end": 7436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7405,
											"end": 7436,
											"name": "tag",
											"source": 6,
											"value": "287"
										},
										{
											"begin": 7405,
											"end": 7436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "288"
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 7404,
											"end": 7456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "tag",
											"source": 6,
											"value": "288"
										},
										{
											"begin": 7404,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7403,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "289"
										},
										{
											"begin": 7403,
											"end": 7486,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7484,
											"end": 7486,
											"name": "PUSH",
											"source": 6,
											"value": "4B"
										},
										{
											"begin": 7403,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7403,
											"end": 7486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7403,
											"end": 7486,
											"name": "tag",
											"source": 6,
											"value": "289"
										},
										{
											"begin": 7403,
											"end": 7486,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 7402,
											"end": 7513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "tag",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 7402,
											"end": 7513,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7546,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7550,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7564,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7513,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7539,
											"end": 7576,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 7539,
											"end": 7576,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7513,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7576,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 7539,
											"end": 7576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7576,
											"name": "tag",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 7539,
											"end": 7576,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7531,
											"end": 7576,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7531,
											"end": 7576,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7630,
											"end": 7634,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7619,
											"end": 7626,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7619,
											"end": 7626,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7616,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7611,
											"end": 7626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "tag",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 7611,
											"end": 7626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 7610,
											"end": 7634,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "tag",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 7610,
											"end": 7634,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7659,
											"end": 7671,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7659,
											"end": 7671,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7594,
											"end": 7634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7594,
											"end": 7634,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7659,
											"end": 7671,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7681,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 7682,
											"end": 7684,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 7687,
											"end": 7708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "294"
										},
										{
											"begin": 7594,
											"end": 7634,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7687,
											"end": 7692,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7687,
											"end": 7708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 7687,
											"end": 7708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7687,
											"end": 7708,
											"name": "tag",
											"source": 6,
											"value": "294"
										},
										{
											"begin": 7687,
											"end": 7708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "295"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 7652,
											"end": 7710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "tag",
											"source": 6,
											"value": "295"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "tag",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 7652,
											"end": 7710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "tag",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 7652,
											"end": 7710,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7810,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7814,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7871,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 7868,
											"end": 7871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7794,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "299"
										},
										{
											"begin": 7786,
											"end": 7794,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7783,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7794,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7763,
											"end": 7794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7794,
											"name": "tag",
											"source": 6,
											"value": "299"
										},
										{
											"begin": 7763,
											"end": 7794,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "300"
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 7762,
											"end": 7814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "tag",
											"source": 6,
											"value": "300"
										},
										{
											"begin": 7762,
											"end": 7814,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7761,
											"end": 7844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 7761,
											"end": 7844,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7842,
											"end": 7844,
											"name": "PUSH",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 7761,
											"end": 7844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7761,
											"end": 7844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7761,
											"end": 7844,
											"name": "tag",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 7761,
											"end": 7844,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 7760,
											"end": 7871,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "tag",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 7760,
											"end": 7871,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7896,
											"end": 7908,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7896,
											"end": 7908,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7728,
											"end": 7871,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7728,
											"end": 7871,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7896,
											"end": 7908,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7896,
											"end": 7908,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 7918,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 7889,
											"end": 7918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7940,
											"end": 7982,
											"name": "PUSH",
											"source": 6,
											"value": "DEAD"
										},
										{
											"begin": 7940,
											"end": 7982,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7728,
											"end": 7871,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 7728,
											"end": 7871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8031,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 7889,
											"end": 8031,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7314,
											"end": 8851,
											"name": "tag",
											"source": 6,
											"value": "286"
										},
										{
											"begin": 7314,
											"end": 8851,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8130,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8149,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8123,
											"end": 8149,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8149,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8153,
											"end": 8155,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 8123,
											"end": 8155,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8119,
											"end": 8851,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 8119,
											"end": 8851,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8257,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8261,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8315,
											"end": 8318,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 8315,
											"end": 8318,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8210,
											"end": 8241,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 8233,
											"end": 8241,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8210,
											"end": 8230,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8210,
											"end": 8241,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 8210,
											"end": 8241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8210,
											"end": 8241,
											"name": "tag",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 8210,
											"end": 8241,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 8209,
											"end": 8261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "tag",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 8209,
											"end": 8261,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8291,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 8208,
											"end": 8291,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8289,
											"end": 8291,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 8208,
											"end": 8291,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 8208,
											"end": 8291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8291,
											"name": "tag",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 8208,
											"end": 8291,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "312"
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 8207,
											"end": 8318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "tag",
											"source": 6,
											"value": "312"
										},
										{
											"begin": 8207,
											"end": 8318,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8351,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8355,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8369,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8318,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8318,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8344,
											"end": 8381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "313"
										},
										{
											"begin": 8344,
											"end": 8381,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8318,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8318,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 8344,
											"end": 8381,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8344,
											"end": 8381,
											"name": "tag",
											"source": 6,
											"value": "313"
										},
										{
											"begin": 8344,
											"end": 8381,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8336,
											"end": 8381,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8336,
											"end": 8381,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8435,
											"end": 8439,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 8424,
											"end": 8431,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8424,
											"end": 8431,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8421,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "314"
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 8416,
											"end": 8431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "tag",
											"source": 6,
											"value": "314"
										},
										{
											"begin": 8416,
											"end": 8431,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "315"
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 8415,
											"end": 8439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "tag",
											"source": 6,
											"value": "315"
										},
										{
											"begin": 8415,
											"end": 8439,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8464,
											"end": 8476,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8464,
											"end": 8476,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8399,
											"end": 8439,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8399,
											"end": 8439,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8464,
											"end": 8476,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8486,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 8487,
											"end": 8489,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "316"
										},
										{
											"begin": 8399,
											"end": 8439,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8497,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 8492,
											"end": 8513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8513,
											"name": "tag",
											"source": 6,
											"value": "316"
										},
										{
											"begin": 8492,
											"end": 8513,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "317"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 8457,
											"end": 8515,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "tag",
											"source": 6,
											"value": "317"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "319"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "tag",
											"source": 6,
											"value": "319"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "320"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 8457,
											"end": 8515,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "tag",
											"source": 6,
											"value": "320"
										},
										{
											"begin": 8457,
											"end": 8515,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8615,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8603,
											"end": 8619,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8673,
											"end": 8676,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 8673,
											"end": 8676,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8568,
											"end": 8599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "321"
										},
										{
											"begin": 8591,
											"end": 8599,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8568,
											"end": 8588,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8568,
											"end": 8599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 8568,
											"end": 8599,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8568,
											"end": 8599,
											"name": "tag",
											"source": 6,
											"value": "321"
										},
										{
											"begin": 8568,
											"end": 8599,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "322"
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 8567,
											"end": 8619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "tag",
											"source": 6,
											"value": "322"
										},
										{
											"begin": 8567,
											"end": 8619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8566,
											"end": 8649,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 8566,
											"end": 8649,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8649,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 8566,
											"end": 8649,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 8566,
											"end": 8649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8566,
											"end": 8649,
											"name": "tag",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 8566,
											"end": 8649,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "324"
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 8565,
											"end": 8676,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "tag",
											"source": 6,
											"value": "324"
										},
										{
											"begin": 8565,
											"end": 8676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8701,
											"end": 8713,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8701,
											"end": 8713,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8676,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8676,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8701,
											"end": 8713,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8701,
											"end": 8713,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8723,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 8694,
											"end": 8723,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "325"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8745,
											"end": 8787,
											"name": "PUSH",
											"source": 6,
											"value": "DEAD"
										},
										{
											"begin": 8745,
											"end": 8787,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8676,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8676,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 8694,
											"end": 8836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "tag",
											"source": 6,
											"value": "325"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "327"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "tag",
											"source": 6,
											"value": "327"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "328"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 8694,
											"end": 8836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "tag",
											"source": 6,
											"value": "328"
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8694,
											"end": 8836,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8119,
											"end": 8851,
											"name": "tag",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 8119,
											"end": 8851,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6504,
											"end": 8861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6504,
											"end": 8861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6504,
											"end": 8861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6504,
											"end": 8861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "tag",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 4899,
											"end": 8861,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8890,
											"end": 8895,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8877,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8881,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8887,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8870,
											"end": 8887,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8887,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8895,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8895,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8870,
											"end": 8895,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8895,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8870,
											"end": 8895,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8912,
											"end": 8924,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8912,
											"end": 8928,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8912,
											"end": 8928,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8912,
											"end": 8928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8912,
											"end": 8928,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8912,
											"end": 8928,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8905,
											"end": 8928,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8905,
											"end": 8928,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8905,
											"end": 8928,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8945,
											"end": 8959,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 8945,
											"end": 8963,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8945,
											"end": 8963,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8945,
											"end": 8963,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8945,
											"end": 8963,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8945,
											"end": 8963,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8938,
											"end": 8963,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8938,
											"end": 8963,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8938,
											"end": 8963,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8987,
											"end": 9012,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8979,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8987,
											"end": 9012,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8987,
											"end": 9012,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 8983,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "329"
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8987,
											"end": 9012,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8987,
											"end": 9012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 8973,
											"end": 9012,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "tag",
											"source": 6,
											"value": "329"
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8973,
											"end": 9012,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9050,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9054,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9068,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9039,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9068,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9068,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9039,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9039,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "330"
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9068,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9043,
											"end": 9068,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 9022,
											"end": 9068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "tag",
											"source": 6,
											"value": "330"
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9068,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4734,
											"end": 9075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1580,
											"end": 1590,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1579,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 1573,
											"end": 1591,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1602,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1602,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1591,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "334"
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1602,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1602,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 1573,
											"end": 1602,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "334"
										},
										{
											"begin": 1573,
											"end": 1602,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1573,
											"end": 1602,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1619,
											"end": 1631,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1619,
											"end": 1631,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1612,
											"end": 1731,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "335"
										},
										{
											"begin": 1612,
											"end": 1731,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1619,
											"end": 1631,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1663,
											"end": 1673,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1695,
											"end": 1699,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1721,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1612,
											"end": 1649,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 1612,
											"end": 1731,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1612,
											"end": 1731,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "335"
										},
										{
											"begin": 1612,
											"end": 1731,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1506,
											"end": 1738,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 11252,
											"end": 11485,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11395,
											"end": 11401,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 11395,
											"end": 11404,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11395,
											"end": 11404,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11395,
											"end": 11404,
											"name": "PUSH",
											"source": 6,
											"value": "BBC70DB1B6C7AFD11E79C0FB0051300458F1A3ACB8EE9789D9B6B26C61AD9BC7"
										},
										{
											"begin": 11395,
											"end": 11416,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11395,
											"end": 11416,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11395,
											"end": 11416,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11395,
											"end": 11416,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11426,
											"end": 11435,
											"name": "PUSH",
											"source": 6,
											"value": "BFF4442B8ED600BEEB8E26B1279A0F0D14C6EDFAEC26D968EE13C86F7D4C2BA8"
										},
										{
											"begin": 11426,
											"end": 11447,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11464,
											"end": 11465,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 11395,
											"end": 11404,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11457,
											"end": 11466,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11457,
											"end": 11466,
											"name": "PUSH",
											"source": 6,
											"value": "A856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759"
										},
										{
											"begin": 11457,
											"end": 11478,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11485,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10009,
											"end": 10023,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10097,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10101,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10111,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 10090,
											"end": 10111,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10111,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10111,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10076,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 10054,
											"end": 10076,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10076,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10076,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10076,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10127,
											"end": 10142,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10127,
											"end": 10142,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10111,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "340"
										},
										{
											"begin": 10054,
											"end": 10081,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10079,
											"end": 10081,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 10054,
											"end": 10081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 10054,
											"end": 10081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10081,
											"name": "tag",
											"source": 6,
											"value": "340"
										},
										{
											"begin": 10054,
											"end": 10081,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "341"
										},
										{
											"begin": 10054,
											"end": 10086,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10084,
											"end": 10086,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 10054,
											"end": 10086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 10054,
											"end": 10086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10054,
											"end": 10086,
											"name": "tag",
											"source": 6,
											"value": "341"
										},
										{
											"begin": 10054,
											"end": 10086,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 10053,
											"end": 10111,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "tag",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 10053,
											"end": 10111,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10052,
											"end": 10142,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10035,
											"end": 10565,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10035,
											"end": 10565,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "343"
										},
										{
											"begin": 10035,
											"end": 10565,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10206,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10189,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10193,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 10175,
											"end": 10210,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10194,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10175,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 10175,
											"end": 10210,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10035,
											"end": 10565,
											"name": "tag",
											"source": 6,
											"value": "343"
										},
										{
											"begin": 10035,
											"end": 10565,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10242,
											"end": 10258,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10287,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10301,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 10280,
											"end": 10301,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10301,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10306,
											"end": 10308,
											"name": "PUSH",
											"source": 6,
											"value": "3C"
										},
										{
											"begin": 10306,
											"end": 10308,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10262,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "346"
										},
										{
											"begin": 10262,
											"end": 10301,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10262,
											"end": 10277,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10262,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 10262,
											"end": 10301,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10262,
											"end": 10301,
											"name": "tag",
											"source": 6,
											"value": "346"
										},
										{
											"begin": 10262,
											"end": 10301,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "347"
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 10261,
											"end": 10309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "tag",
											"source": 6,
											"value": "347"
										},
										{
											"begin": 10261,
											"end": 10309,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10323,
											"end": 10351,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10399,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10403,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10414,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 10392,
											"end": 10414,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10414,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10242,
											"end": 10309,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10242,
											"end": 10309,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10323,
											"end": 10351,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10419,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "348"
										},
										{
											"begin": 10392,
											"end": 10419,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10417,
											"end": 10419,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 10392,
											"end": 10419,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 10392,
											"end": 10419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10419,
											"name": "tag",
											"source": 6,
											"value": "348"
										},
										{
											"begin": 10392,
											"end": 10419,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10368,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10372,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 10354,
											"end": 10420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "tag",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 10354,
											"end": 10420,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10434,
											"end": 10451,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10518,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10506,
											"end": 10522,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10323,
											"end": 10420,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10323,
											"end": 10420,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10434,
											"end": 10451,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10486,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "350"
										},
										{
											"begin": 10478,
											"end": 10486,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10323,
											"end": 10420,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10486,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 10455,
											"end": 10486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10486,
											"name": "tag",
											"source": 6,
											"value": "350"
										},
										{
											"begin": 10455,
											"end": 10486,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "351"
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 10454,
											"end": 10522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "tag",
											"source": 6,
											"value": "351"
										},
										{
											"begin": 10454,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10434,
											"end": 10522,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 10571,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9955,
											"end": 10571,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6792,
											"end": 6794,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6774,
											"end": 6795,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6831,
											"end": 6833,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6811,
											"end": 6829,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6804,
											"end": 6834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6870,
											"end": 6904,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6850,
											"end": 6868,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6843,
											"end": 6905,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6921,
											"end": 6939,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6914,
											"end": 6950,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6967,
											"end": 6986,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6967,
											"end": 6986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 6590,
											"end": 6992,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "335"
										},
										{
											"begin": 2263,
											"end": 2271,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2244,
											"end": 2272,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7255,
											"end": 7270,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7237,
											"end": 7271,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7307,
											"end": 7322,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7307,
											"end": 7322,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7287,
											"end": 7305,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7280,
											"end": 7323,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7332,
											"end": 7366,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7172,
											"end": 7190,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "360"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "363"
										},
										{
											"begin": 1112,
											"end": 1208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "360"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7579,
											"end": 7581,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7561,
											"end": 7582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7591,
											"end": 7621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7657,
											"end": 7691,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7637,
											"end": 7655,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7630,
											"end": 7692,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7709,
											"end": 7727,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 7709,
											"end": 7727,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 7377,
											"end": 7733,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "363"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "373"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "374"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "373"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "377"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "376"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 4359,
											"end": 4389,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "376"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "377"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7940,
											"end": 7942,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7922,
											"end": 7943,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7979,
											"end": 7981,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7959,
											"end": 7977,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7952,
											"end": 7982,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8018,
											"end": 8052,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7991,
											"end": 8053,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8069,
											"end": 8087,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8062,
											"end": 8102,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8119,
											"end": 8138,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 8119,
											"end": 8138,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 7738,
											"end": 8144,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 3,
											"value": "377"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3817,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 4,
											"value": "374"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "382"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "383"
										},
										{
											"begin": 4037,
											"end": 4089,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 4,
											"value": "382"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3873,
											"end": 4096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 4,
											"value": "383"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "385"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8351,
											"end": 8353,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8333,
											"end": 8354,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8390,
											"end": 8392,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 8388,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8363,
											"end": 8393,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8429,
											"end": 8463,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8409,
											"end": 8427,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8402,
											"end": 8464,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8480,
											"end": 8498,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8473,
											"end": 8509,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8526,
											"end": 8545,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 8526,
											"end": 8545,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 8149,
											"end": 8551,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 4,
											"value": "385"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "388"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "389"
										},
										{
											"begin": 5282,
											"end": 5313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 4,
											"value": "388"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "392"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "391"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 4,
											"value": "392"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 4,
											"value": "391"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "393"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "394"
										},
										{
											"begin": 5330,
											"end": 5399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 4,
											"value": "393"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 4,
											"value": "394"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "396"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "400"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "400"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9305,
											"end": 9307,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9287,
											"end": 9308,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9344,
											"end": 9346,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9317,
											"end": 9347,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9383,
											"end": 9414,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9363,
											"end": 9381,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9356,
											"end": 9415,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9432,
											"end": 9450,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 9432,
											"end": 9450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 9103,
											"end": 9456,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 4,
											"value": "400"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "382"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 4,
											"value": "396"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "382"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "408"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 4,
											"value": "408"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "411"
										},
										{
											"begin": 9119,
											"end": 9139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 7,
											"value": "412"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "419"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 7,
											"value": "419"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "412"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 192,
											"end": 378,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 565,
											"end": 956,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 565,
											"end": 956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 651,
											"end": 657,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 659,
											"end": 665,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 667,
											"end": 673,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 675,
											"end": 681,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 716,
											"end": 725,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 707,
											"end": 714,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 703,
											"end": 726,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 699,
											"end": 732,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 696,
											"end": 749,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 696,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 696,
											"end": 749,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 745,
											"end": 746,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 742,
											"end": 743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 735,
											"end": 747,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 696,
											"end": 749,
											"name": "tag",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 696,
											"end": 749,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 768,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "424"
										},
										{
											"begin": 787,
											"end": 796,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 768,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "412"
										},
										{
											"begin": 768,
											"end": 797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 768,
											"end": 797,
											"name": "tag",
											"source": 7,
											"value": "424"
										},
										{
											"begin": 768,
											"end": 797,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 758,
											"end": 797,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 844,
											"end": 846,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 829,
											"end": 847,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 829,
											"end": 847,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 816,
											"end": 848,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 816,
											"end": 848,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 895,
											"end": 897,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 880,
											"end": 898,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 880,
											"end": 898,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 867,
											"end": 899,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 867,
											"end": 899,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 946,
											"end": 948,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 931,
											"end": 949,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 918,
											"end": 950,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 918,
											"end": 950,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 565,
											"end": 956,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 565,
											"end": 956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1020,
											"end": 1026,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1073,
											"end": 1075,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1052,
											"end": 1059,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1048,
											"end": 1071,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1044,
											"end": 1076,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "426"
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1089,
											"end": 1090,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1086,
											"end": 1087,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1079,
											"end": 1091,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "tag",
											"source": 7,
											"value": "426"
										},
										{
											"begin": 1041,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1112,
											"end": 1135,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1135,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 961,
											"end": 1141,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 961,
											"end": 1141,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1223,
											"end": 1229,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1231,
											"end": 1237,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1239,
											"end": 1245,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1294,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1280,
											"end": 1289,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1271,
											"end": 1278,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1267,
											"end": 1290,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1263,
											"end": 1295,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "428"
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1308,
											"end": 1309,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1305,
											"end": 1306,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "tag",
											"source": 7,
											"value": "428"
										},
										{
											"begin": 1260,
											"end": 1312,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1354,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1401,
											"end": 1403,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1404,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1386,
											"end": 1404,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1405,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1405,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1452,
											"end": 1454,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1146,
											"end": 1462,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1146,
											"end": 1462,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1467,
											"end": 1715,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1467,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1535,
											"end": 1541,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1543,
											"end": 1549,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1596,
											"end": 1598,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1584,
											"end": 1593,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1582,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1571,
											"end": 1594,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1567,
											"end": 1599,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "430"
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1613,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1609,
											"end": 1610,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1602,
											"end": 1614,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "tag",
											"source": 7,
											"value": "430"
										},
										{
											"begin": 1564,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1635,
											"end": 1658,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1705,
											"end": 1707,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1690,
											"end": 1708,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1677,
											"end": 1709,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1677,
											"end": 1709,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1467,
											"end": 1715,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2659,
											"end": 2786,
											"name": "tag",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 2659,
											"end": 2786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2720,
											"end": 2730,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 2715,
											"end": 2718,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2711,
											"end": 2731,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2708,
											"end": 2709,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2701,
											"end": 2732,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2751,
											"end": 2755,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 2748,
											"end": 2749,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2741,
											"end": 2756,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2775,
											"end": 2779,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2772,
											"end": 2773,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2765,
											"end": 2780,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2791,
											"end": 2959,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 2791,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2864,
											"end": 2873,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2912,
											"end": 2927,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2906,
											"end": 2928,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2906,
											"end": 2928,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2892,
											"end": 2929,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2882,
											"end": 2953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 2882,
											"end": 2953,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 2933,
											"end": 2951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2964,
											"end": 3089,
											"name": "tag",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 2964,
											"end": 3089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3029,
											"end": 3038,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3060,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3063,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3063,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 3063,
											"end": 3081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3520,
											"end": 3648,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 3520,
											"end": 3648,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3587,
											"end": 3596,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3608,
											"end": 3619,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3605,
											"end": 3642,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3622,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3622,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 3622,
											"end": 3640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3870,
											"name": "tag",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 3653,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3693,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3719,
											"end": 3720,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3763,
											"end": 3773,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 3758,
											"end": 3761,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3754,
											"end": 3774,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3751,
											"end": 3752,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3744,
											"end": 3775,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 3795,
											"end": 3796,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3788,
											"end": 3803,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3830,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3823,
											"end": 3824,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3816,
											"end": 3831,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "tag",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 3709,
											"end": 3841,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3855,
											"end": 3864,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3855,
											"end": 3864,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3870,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4277,
											"end": 4551,
											"name": "tag",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 4277,
											"end": 4551,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4469,
											"end": 4501,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4451,
											"end": 4502,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4451,
											"end": 4502,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4533,
											"end": 4535,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4518,
											"end": 4536,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4518,
											"end": 4536,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4511,
											"end": 4545,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4439,
											"end": 4441,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4424,
											"end": 4442,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4424,
											"end": 4442,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4277,
											"end": 4551,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4556,
											"end": 4833,
											"name": "tag",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 4556,
											"end": 4833,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4623,
											"end": 4629,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4676,
											"end": 4678,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4664,
											"end": 4673,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4655,
											"end": 4662,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4651,
											"end": 4674,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4647,
											"end": 4679,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "450"
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4692,
											"end": 4693,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4689,
											"end": 4690,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4682,
											"end": 4694,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "tag",
											"source": 7,
											"value": "450"
										},
										{
											"begin": 4644,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4724,
											"end": 4733,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4718,
											"end": 4734,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4777,
											"end": 4782,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4770,
											"end": 4783,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4763,
											"end": 4784,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4756,
											"end": 4761,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4753,
											"end": 4785,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4743,
											"end": 4803,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 4743,
											"end": 4803,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4799,
											"end": 4800,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4797,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4789,
											"end": 4801,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8556,
											"end": 8806,
											"name": "tag",
											"source": 7,
											"value": "414"
										},
										{
											"begin": 8556,
											"end": 8806,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8641,
											"end": 8642,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "tag",
											"source": 7,
											"value": "463"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8665,
											"end": 8671,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8662,
											"end": 8663,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8659,
											"end": 8672,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "465"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8741,
											"end": 8752,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8735,
											"end": 8753,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8722,
											"end": 8733,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8715,
											"end": 8754,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8687,
											"end": 8689,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8680,
											"end": 8690,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "463"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "tag",
											"source": 7,
											"value": "465"
										},
										{
											"begin": 8651,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8798,
											"end": 8799,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8780,
											"end": 8796,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8780,
											"end": 8796,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8773,
											"end": 8800,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8556,
											"end": 8806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "tag",
											"source": 7,
											"value": "389"
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8940,
											"end": 8943,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8978,
											"end": 8984,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8972,
											"end": 8985,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "467"
										},
										{
											"begin": 9053,
											"end": 9059,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9048,
											"end": 9051,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9041,
											"end": 9045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9033,
											"end": 9039,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 9029,
											"end": 9046,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "414"
										},
										{
											"begin": 8994,
											"end": 9060,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "tag",
											"source": 7,
											"value": "467"
										},
										{
											"begin": 8994,
											"end": 9060,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9076,
											"end": 9092,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8811,
											"end": 9098,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8811,
											"end": 9098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "tag",
											"source": 7,
											"value": "411"
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9610,
											"end": 9612,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9599,
											"end": 9608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9573,
											"end": 9577,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9642,
											"end": 9648,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9636,
											"end": 9649,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9685,
											"end": 9691,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9680,
											"end": 9682,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9669,
											"end": 9678,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9665,
											"end": 9683,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9658,
											"end": 9692,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "470"
										},
										{
											"begin": 9773,
											"end": 9779,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9768,
											"end": 9770,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9757,
											"end": 9766,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9753,
											"end": 9771,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9748,
											"end": 9750,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9740,
											"end": 9746,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 9736,
											"end": 9751,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "414"
										},
										{
											"begin": 9701,
											"end": 9780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "tag",
											"source": 7,
											"value": "470"
										},
										{
											"begin": 9701,
											"end": 9780,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9841,
											"end": 9843,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 9820,
											"end": 9835,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9816,
											"end": 9845,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9846,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9848,
											"end": 9850,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9797,
											"end": 9851,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9797,
											"end": 9851,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9461,
											"end": 9857,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9857,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										}
									],
									".data": {
										"0ADA41EDF8798B24CF95700AE04A399923583F100F59BCDA0E41724A1960BA8B": "6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3",
										"0C4BCF2D962D2967567161E2C07EE166D0A7FBAC816B34859338E95768FE2AD4": "c575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7",
										"F5918152DFFD4C0C585CA2588CA9B8191BD01A7FBFF2737F8E5B9361E056218E": "92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"contracts/Staking/staking.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"APY(uint256)": "186cb65b",
							"APYPer(uint256)": "897b3a68",
							"AdminAddToken(uint256)": "c0cd40ee",
							"BurnAmount(address)": "22b72666",
							"ClaimRewards(address)": "0178be5f",
							"DepositTokens(address,uint256,uint256,uint256)": "10c404da",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"InterestAmount(address)": "662b12c9",
							"RewardAmount(address)": "777b4cd8",
							"SetAPY(uint256,uint256,uint256)": "21736665",
							"SetRewardPersentage(uint256,uint256,uint256)": "d6f80a25",
							"Tokens(address)": "0deef63a",
							"WithdrawTokens(address)": "9131a05a",
							"getTaxPenalty()": "2e886f1f",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setTexAndPenalty(uint256,uint256)": "264b4af6",
							"totalStakedTokens()": "3ae73259",
							"transferOwnership(address)": "f2fde38b",
							"viewBurnRewards(address)": "032ad8fb",
							"viewRewards(address)": "da40ef80"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"APYPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Month1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month3\",\"type\":\"uint256\"}],\"name\":\"SetAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Month1Per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month2Per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month3Per\",\"type\":\"uint256\"}],\"name\":\"SetRewardPersentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"setTexAndPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"viewBurnRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"viewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/staking.sol\":\"TokenStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Staking/staking.sol\":{\"keccak256\":\"0x2dbfa105fa6883ee300be1a1cd646c310b03ce4ec550cd2d01e7b5efcb6f08eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ace1c802465d7f656ac4292a705a1323312294fd0fe158c82e774fce06b0e6a\",\"dweb:/ipfs/QmUWAWFSGZYHLHeBaXvn21op4qwAfHkf7J3bdkmC8W6bfs\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 871,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 873,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "ownerAddress",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 875,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "totalStakedTokens",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 877,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "Check",
								"offset": 0,
								"slot": "4",
								"type": "t_bool"
							},
							{
								"astId": 879,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "Tax",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 881,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "penalty",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 897,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "Details",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Staker)892_storage)"
							},
							{
								"astId": 901,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "InterestAmount",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 905,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "APY",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 909,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "APYPer",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 913,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "Tokens",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 917,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "RewardAmount",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 921,
								"contract": "contracts/Staking/staking.sol:TokenStaking",
								"label": "BurnAmount",
								"offset": 0,
								"slot": "13",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)892_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct TokenStaking.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)892_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)892_storage": {
								"encoding": "inplace",
								"label": "struct TokenStaking.Staker",
								"members": [
									{
										"astId": 883,
										"contract": "contracts/Staking/staking.sol:TokenStaking",
										"label": "depositTokens",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 885,
										"contract": "contracts/Staking/staking.sol:TokenStaking",
										"label": "stakeTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 887,
										"contract": "contracts/Staking/staking.sol:TokenStaking",
										"label": "StakeMonth",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 889,
										"contract": "contracts/Staking/staking.sol:TokenStaking",
										"label": "EarnPersentage",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 891,
										"contract": "contracts/Staking/staking.sol:TokenStaking",
										"label": "check",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							859
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 860,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 859,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								859
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 849,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 849,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1875:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2141:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							837
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 838,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nameLocations": [
											"737:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 837,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "931:8:3",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "940:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "906:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nameLocations": [
															"794:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1168:12:3",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1181:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1143:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nameLocations": [
															"1009:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1852:9:3",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2037:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2045:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2012:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nameLocations": [
															"1505:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2239:9:3",
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2346:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2354:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2321:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nameLocations": [
															"2124:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2579:9:3",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2828:7:3",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2836:8:3",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2803:18:3",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nameLocations": [
															"2440:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3145:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3174:6:3",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3259:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nameLocations": [
															"2921:12:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4207:12:3",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 597,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4286:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4363:6:3",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nameLocations": [
															"3776:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							837
						]
					},
					"id": 838,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 510,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 837,
							"linearizedBaseContracts": [
								837
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 524,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 518,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 513,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1473:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1478:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 517,
												"id": 523,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 515,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 837,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 536,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$837",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$837",
																				"typeString": "library Address"
																			}
																		],
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 534,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 537,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 538,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2515:7:4",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 539,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 533,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 543,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													545,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 545,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 558,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 544,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 552,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 550,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 546,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2606:4:4",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 548,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 554,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 526,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 837,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 576,
										"nodeType": "Block",
										"src": "3555:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 570,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "3594:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 571,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "3602:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 569,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															617,
															661
														],
														"referencedDeclaration": 661,
														"src": "3572:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 575,
												"nodeType": "Return",
												"src": "3565:79:4"
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 837,
									"src": "3466:185:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "4020:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 590,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 580,
															"src": "4059:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 591,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "4067:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 593,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "4076:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 589,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															617,
															661
														],
														"referencedDeclaration": 661,
														"src": "4037:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 588,
												"id": 595,
												"nodeType": "Return",
												"src": "4030:59:4"
											}
										]
									},
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "3904:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "3928:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 581,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "3955:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 583,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:4"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "4006:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 586,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:4"
									},
									"scope": 837,
									"src": "3873:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 616,
										"nodeType": "Block",
										"src": "4601:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 610,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 600,
															"src": "4640:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 611,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 602,
															"src": "4648:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 612,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "4654:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 609,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															617,
															661
														],
														"referencedDeclaration": 661,
														"src": "4618:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 608,
												"id": 615,
												"nodeType": "Return",
												"src": "4611:94:4"
											}
										]
									},
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4498:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4522:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 601,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4549:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:4"
									},
									"returnParameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4587:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 606,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:4"
									},
									"scope": 837,
									"src": "4458:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 660,
										"nodeType": "Block",
										"src": "5139:267:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 634,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$837",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$837",
																				"typeString": "library Address"
																			}
																		],
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 632,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 635,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 636,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5171:7:4",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 637,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 624,
																"src": "5182:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 631,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 641,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:4"
											},
											{
												"assignments": [
													643,
													645
												],
												"declarations": [
													{
														"constant": false,
														"id": 643,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 660,
														"src": "5241:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 642,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 645,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 660,
														"src": "5255:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 644,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 652,
												"initialValue": {
													"arguments": [
														{
															"id": 650,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "5308:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 646,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 620,
																"src": "5282:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 647,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5289:4:4",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 649,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 648,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 624,
																"src": "5301:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 654,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 620,
															"src": "5357:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 655,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "5365:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 656,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "5374:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 657,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "5386:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 653,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "5330:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 630,
												"id": 659,
												"nodeType": "Return",
												"src": "5323:76:4"
											}
										]
									},
									"documentation": {
										"id": 618,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "5000:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 619,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "5024:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 621,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "5051:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "5074:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 625,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:4"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "5125:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 628,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:4"
									},
									"scope": 837,
									"src": "4960:446:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 677,
										"nodeType": "Block",
										"src": "5683:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 672,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 664,
															"src": "5719:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 673,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "5727:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 671,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															678,
															707
														],
														"referencedDeclaration": 707,
														"src": "5700:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 670,
												"id": 676,
												"nodeType": "Return",
												"src": "5693:80:4"
											}
										]
									},
									"documentation": {
										"id": 662,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 678,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5611:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5627:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 665,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:4"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5669:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 668,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:4"
									},
									"scope": 837,
									"src": "5583:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "6122:168:4",
										"statements": [
											{
												"assignments": [
													691,
													693
												],
												"declarations": [
													{
														"constant": false,
														"id": 691,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 706,
														"src": "6133:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 690,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 693,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 706,
														"src": "6147:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 692,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 698,
												"initialValue": {
													"arguments": [
														{
															"id": 696,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 683,
															"src": "6192:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 694,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "6174:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6181:10:4",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 700,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "6241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 691,
															"src": "6249:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 702,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "6258:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 703,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "6270:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 699,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "6214:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 689,
												"id": 705,
												"nodeType": "Return",
												"src": "6207:76:4"
											}
										]
									},
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "6001:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "6025:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "6052:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 684,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:4"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "6108:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 687,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:4"
									},
									"scope": 837,
									"src": "5964:326:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "6566:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 718,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "6604:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 719,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "6612:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 717,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															724,
															753
														],
														"referencedDeclaration": 753,
														"src": "6583:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 716,
												"id": 722,
												"nodeType": "Return",
												"src": "6576:84:4"
											}
										]
									},
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "6499:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "6515:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 711,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:4"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "6552:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 714,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:4"
									},
									"scope": 837,
									"src": "6469:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "7008:170:4",
										"statements": [
											{
												"assignments": [
													737,
													739
												],
												"declarations": [
													{
														"constant": false,
														"id": 737,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 752,
														"src": "7019:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 736,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 739,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 752,
														"src": "7033:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 738,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 744,
												"initialValue": {
													"arguments": [
														{
															"id": 742,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "7080:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 740,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "7060:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7067:12:4",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 746,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "7129:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 747,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "7137:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 748,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "7146:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 749,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "7158:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 745,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "7102:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 735,
												"id": 751,
												"nodeType": "Return",
												"src": "7095:76:4"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "6892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "6916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "6943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 730,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:4"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "6994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:4"
									},
									"scope": 837,
									"src": "6853:325:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 791,
										"nodeType": "Block",
										"src": "7660:434:4",
										"statements": [
											{
												"condition": {
													"id": 767,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 758,
													"src": "7674:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 789,
													"nodeType": "Block",
													"src": "8030:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 785,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 760,
																		"src": "8052:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 786,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 762,
																		"src": "8064:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 784,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 836,
																	"src": "8044:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 788,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:4"
														}
													]
												},
												"id": 790,
												"nodeType": "IfStatement",
												"src": "7670:418:4",
												"trueBody": {
													"id": 783,
													"nodeType": "Block",
													"src": "7683:341:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 768,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 760,
																		"src": "7701:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 769,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7712:6:4",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 780,
															"nodeType": "IfStatement",
															"src": "7697:286:4",
															"trueBody": {
																"id": 779,
																"nodeType": "Block",
																"src": "7725:258:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 774,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 756,
																							"src": "7927:6:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 773,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 525,
																						"src": "7916:10:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 775,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 776,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 772,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 777,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 778,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:4"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 781,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 760,
																"src": "8003:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 766,
															"id": 782,
															"nodeType": "Return",
															"src": "7996:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:4",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "7511:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "7535:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 757,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "7557:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 759,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "7590:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 761,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:4"
									},
									"returnParameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "7646:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 764,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:4"
									},
									"scope": 837,
									"src": "7466:628:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 815,
										"nodeType": "Block",
										"src": "8475:135:4",
										"statements": [
											{
												"condition": {
													"id": 804,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 795,
													"src": "8489:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 813,
													"nodeType": "Block",
													"src": "8546:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 809,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 797,
																		"src": "8568:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 810,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "8580:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 808,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 836,
																	"src": "8560:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 811,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 812,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:4"
														}
													]
												},
												"id": 814,
												"nodeType": "IfStatement",
												"src": "8485:119:4",
												"trueBody": {
													"id": 807,
													"nodeType": "Block",
													"src": "8498:42:4",
													"statements": [
														{
															"expression": {
																"id": 805,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 797,
																"src": "8519:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 803,
															"id": 806,
															"nodeType": "Return",
															"src": "8512:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:4",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 816,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "8350:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 794,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "8372:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 796,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "8405:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 798,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:4"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "8461:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 801,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:4"
									},
									"scope": 837,
									"src": "8315:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "8699:457:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 823,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "8775:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8786:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 825,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 833,
													"nodeType": "Block",
													"src": "9105:45:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 830,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 820,
																		"src": "9126:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 829,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 832,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:4"
														}
													]
												},
												"id": 834,
												"nodeType": "IfStatement",
												"src": "8771:379:4",
												"trueBody": {
													"id": 828,
													"nodeType": "Block",
													"src": "8798:301:4",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:4",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:4",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:4"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:4"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:4",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:4"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:4"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:4"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 818,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:4",
																	"valueSize": 1
																},
																{
																	"declaration": 818,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:4",
																	"valueSize": 1
																}
															],
															"id": 827,
															"nodeType": "InlineAssembly",
															"src": "8947:142:4"
														}
													]
												}
											}
										]
									},
									"id": 836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "8633:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 817,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "8658:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 819,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:4"
									},
									"returnParameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:4"
									},
									"scope": 837,
									"src": "8616:540:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 838,
							"src": "194:8964:4",
							"usedErrors": []
						}
					],
					"src": "101:9058:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							859
						]
					},
					"id": 860,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 839,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 840,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 859,
							"linearizedBaseContracts": [
								859
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 848,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 845,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 844,
												"id": 847,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 859,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 857,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 854,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 853,
												"id": 856,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 851,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 859,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 860,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Staking/staking.sol": {
				"ast": {
					"absolutePath": "contracts/Staking/staking.sol",
					"exportedSymbols": {
						"Address": [
							837
						],
						"Context": [
							859
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						],
						"TokenStaking": [
							2051
						]
					},
					"id": 2052,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 861,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 862,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2052,
							"sourceUnit": 113,
							"src": "81:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 863,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2052,
							"sourceUnit": 508,
							"src": "134:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 864,
										"name": "Ownable",
										"nameLocations": [
											"226:7:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "226:7:6"
									},
									"id": 865,
									"nodeType": "InheritanceSpecifier",
									"src": "226:7:6"
								}
							],
							"canonicalName": "TokenStaking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2051,
							"linearizedBaseContracts": [
								2051,
								112,
								859
							],
							"name": "TokenStaking",
							"nameLocation": "210:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 869,
									"libraryName": {
										"id": 866,
										"name": "SafeERC20",
										"nameLocations": [
											"246:9:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "246:9:6"
									},
									"nodeType": "UsingForDirective",
									"src": "240:27:6",
									"typeName": {
										"id": 868,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 867,
											"name": "IERC20",
											"nameLocations": [
												"260:6:6"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "260:6:6"
										},
										"referencedDeclaration": 190,
										"src": "260:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 871,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "287:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "272:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 870,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "272:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 873,
									"mutability": "mutable",
									"name": "ownerAddress",
									"nameLocation": "313:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "305:20:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 872,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "305:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "3ae73259",
									"id": 875,
									"mutability": "mutable",
									"name": "totalStakedTokens",
									"nameLocation": "346:17:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "331:32:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 874,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "331:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 877,
									"mutability": "mutable",
									"name": "Check",
									"nameLocation": "374:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "369:10:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 876,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "369:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 879,
									"mutability": "mutable",
									"name": "Tax",
									"nameLocation": "393:3:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "385:11:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 878,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "385:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 881,
									"mutability": "mutable",
									"name": "penalty",
									"nameLocation": "410:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "402:15:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 880,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "402:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "TokenStaking.Staker",
									"id": 892,
									"members": [
										{
											"constant": false,
											"id": 883,
											"mutability": "mutable",
											"name": "depositTokens",
											"nameLocation": "455:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 892,
											"src": "447:21:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 882,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "447:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 885,
											"mutability": "mutable",
											"name": "stakeTime",
											"nameLocation": "486:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 892,
											"src": "478:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 884,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "478:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 887,
											"mutability": "mutable",
											"name": "StakeMonth",
											"nameLocation": "513:10:6",
											"nodeType": "VariableDeclaration",
											"scope": 892,
											"src": "505:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 886,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "505:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 889,
											"mutability": "mutable",
											"name": "EarnPersentage",
											"nameLocation": "541:14:6",
											"nodeType": "VariableDeclaration",
											"scope": 892,
											"src": "533:22:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 888,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "533:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 891,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "570:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 892,
											"src": "565:10:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 890,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "565:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "430:6:6",
									"nodeType": "StructDefinition",
									"scope": 2051,
									"src": "423:159:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 897,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "621:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "587:41:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
										"typeString": "mapping(address => struct TokenStaking.Staker)"
									},
									"typeName": {
										"id": 896,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 893,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "595:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "587:26:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
											"typeString": "mapping(address => struct TokenStaking.Staker)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 895,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 894,
												"name": "Staker",
												"nameLocations": [
													"606:6:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 892,
												"src": "606:6:6"
											},
											"referencedDeclaration": 892,
											"src": "606:6:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$892_storage_ptr",
												"typeString": "struct TokenStaking.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "662b12c9",
									"id": 901,
									"mutability": "mutable",
									"name": "InterestAmount",
									"nameLocation": "669:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "634:49:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 900,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 898,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "642:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "634:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 899,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "653:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "186cb65b",
									"id": 905,
									"mutability": "mutable",
									"name": "APY",
									"nameLocation": "724:3:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "689:38:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 904,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 902,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "697:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "689:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 903,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "708:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "897b3a68",
									"id": 909,
									"mutability": "mutable",
									"name": "APYPer",
									"nameLocation": "768:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "733:41:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 908,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 906,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "741:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "733:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 907,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "752:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0deef63a",
									"id": 913,
									"mutability": "mutable",
									"name": "Tokens",
									"nameLocation": "815:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "780:41:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 912,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 910,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "788:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "780:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 911,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "799:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "777b4cd8",
									"id": 917,
									"mutability": "mutable",
									"name": "RewardAmount",
									"nameLocation": "862:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "827:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 916,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 914,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "835:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "827:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 915,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "846:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "22b72666",
									"id": 921,
									"mutability": "mutable",
									"name": "BurnAmount",
									"nameLocation": "915:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 2051,
									"src": "880:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 920,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 918,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "888:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "880:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 919,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "899:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 935,
										"nodeType": "Block",
										"src": "1199:80:6",
										"statements": [
											{
												"expression": {
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 926,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 871,
														"src": "1209:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 927,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 923,
														"src": "1224:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1209:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 929,
												"nodeType": "ExpressionStatement",
												"src": "1209:28:6"
											},
											{
												"expression": {
													"id": 933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 930,
														"name": "ownerAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "1247:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 931,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1262:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 932,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1266:6:6",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1262:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1247:25:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 934,
												"nodeType": "ExpressionStatement",
												"src": "1247:25:6"
											}
										]
									},
									"id": 936,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "1184:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "1176:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1175:23:6"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1199:0:6"
									},
									"scope": 2051,
									"src": "1164:115:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 963,
										"nodeType": "Block",
										"src": "1563:175:6",
										"statements": [
											{
												"expression": {
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 943,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "1573:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 946,
														"indexExpression": {
															"expression": {
																"id": 944,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1580:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1584:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1580:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1573:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 947,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 938,
														"src": "1595:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1573:29:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "1573:29:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 954,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1663:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1667:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1663:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 958,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1695:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TokenStaking_$2051",
																		"typeString": "contract TokenStaking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TokenStaking_$2051",
																		"typeString": "contract TokenStaking"
																	}
																],
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1687:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 956,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1687:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1687:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 960,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 938,
															"src": "1714:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 951,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "1619:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 950,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1612:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1612:20:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 953,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1633:16:6",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "1612:37:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1612:119:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 962,
												"nodeType": "ExpressionStatement",
												"src": "1612:119:6"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 964,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 941,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 940,
												"name": "onlyOwner",
												"nameLocations": [
													"1553:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1553:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1553:9:6"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1515:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1537:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "1529:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1529:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1528:17:6"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1563:0:6"
									},
									"scope": 2051,
									"src": "1506:232:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1292,
										"nodeType": "Block",
										"src": "2176:2362:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 976,
																	"name": "Tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 913,
																	"src": "2194:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 978,
																"indexExpression": {
																	"id": 977,
																	"name": "ownerAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 873,
																	"src": "2201:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2194:20:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2217:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2194:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365205761697420212121",
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2220:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad",
																"typeString": "literal_string \"Please Wait !!!\""
															},
															"value": "Please Wait !!!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c7072ab51593e2fdd356026a0d6eb0b9890af6a80ff40f313bc4c100b131b7ad",
																"typeString": "literal_string \"Please Wait !!!\""
															}
														],
														"id": 975,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2186:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2186:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 983,
												"nodeType": "ExpressionStatement",
												"src": "2186:52:6"
											},
											{
												"assignments": [
													985
												],
												"declarations": [
													{
														"constant": false,
														"id": 985,
														"mutability": "mutable",
														"name": "_amount",
														"nameLocation": "2256:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1292,
														"src": "2248:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 984,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2248:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 989,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 986,
														"name": "_payment",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 968,
														"src": "2266:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "31303030303030303030",
														"id": 987,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2277:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000_by_1",
															"typeString": "int_const 1000000000"
														},
														"value": "1000000000"
													},
													"src": "2266:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2248:39:6"
											},
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 990,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "2301:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
															}
														},
														"id": 992,
														"indexExpression": {
															"id": 991,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "2309:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2301:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$892_storage",
															"typeString": "struct TokenStaking.Staker storage ref"
														}
													},
													"id": 993,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2313:5:6",
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 891,
													"src": "2301:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1280,
													"nodeType": "Block",
													"src": "3284:1179:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1135,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1131,
																					"name": "StakeMonth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 970,
																					"src": "3323:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"baseExpression": {
																						"id": 1132,
																						"name": "APY",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 905,
																						"src": "3337:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																							"typeString": "mapping(uint256 => uint256)"
																						}
																					},
																					"id": 1134,
																					"indexExpression": {
																						"hexValue": "31",
																						"id": 1133,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3341:1:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3337:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3323:20:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1140,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1136,
																					"name": "StakeMonth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 970,
																					"src": "3367:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"baseExpression": {
																						"id": 1137,
																						"name": "APY",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 905,
																						"src": "3381:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																							"typeString": "mapping(uint256 => uint256)"
																						}
																					},
																					"id": 1139,
																					"indexExpression": {
																						"hexValue": "32",
																						"id": 1138,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3385:1:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_2_by_1",
																							"typeString": "int_const 2"
																						},
																						"value": "2"
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3381:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3367:20:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3323:64:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1142,
																				"name": "StakeMonth",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 970,
																				"src": "3411:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"baseExpression": {
																					"id": 1143,
																					"name": "APY",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 905,
																					"src": "3425:3:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																						"typeString": "mapping(uint256 => uint256)"
																					}
																				},
																				"id": 1145,
																				"indexExpression": {
																					"hexValue": "33",
																					"id": 1144,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3429:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_3_by_1",
																						"typeString": "int_const 3"
																					},
																					"value": "3"
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3425:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3411:20:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3323:108:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"id": 1148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3449:24:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		},
																		"value": "Enter Right StakeMonth"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		}
																	],
																	"id": 1130,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3298:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3298:189:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1150,
															"nodeType": "ExpressionStatement",
															"src": "3298:189:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1154,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1152,
																					"name": "EarnPersentage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 972,
																					"src": "3526:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "313030",
																					"id": 1153,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3544:3:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_100_by_1",
																						"typeString": "int_const 100"
																					},
																					"value": "100"
																				},
																				"src": "3526:21:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1157,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1155,
																					"name": "EarnPersentage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 972,
																					"src": "3571:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "3735",
																					"id": 1156,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3589:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_75_by_1",
																						"typeString": "int_const 75"
																					},
																					"value": "75"
																				},
																				"src": "3571:20:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3526:65:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1159,
																				"name": "EarnPersentage",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 972,
																				"src": "3615:14:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "3530",
																				"id": 1160,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3633:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_50_by_1",
																					"typeString": "int_const 50"
																				},
																				"value": "50"
																			},
																			"src": "3615:20:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3526:109:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"id": 1163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3653:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		},
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		}
																	],
																	"id": 1151,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3501:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3501:194:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1165,
															"nodeType": "ExpressionStatement",
															"src": "3501:194:6"
														},
														{
															"assignments": [
																1167
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1167,
																	"mutability": "mutable",
																	"name": "AdminFee",
																	"nameLocation": "3717:8:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1280,
																	"src": "3709:16:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1166,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3709:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1174,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1173,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1168,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 985,
																				"src": "3729:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1169,
																				"name": "Tax",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 879,
																				"src": "3739:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3729:13:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1171,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3728:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1172,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3746:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "3728:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3709:41:6"
														},
														{
															"expression": {
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1175,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 897,
																		"src": "3764:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																			"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																		}
																	},
																	"id": 1177,
																	"indexExpression": {
																		"id": 1176,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 966,
																		"src": "3772:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3764:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$892_storage",
																		"typeString": "struct TokenStaking.Staker storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1179,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 985,
																				"src": "3802:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1180,
																				"name": "AdminFee",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1167,
																				"src": "3812:8:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3802:18:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"id": 1182,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "3838:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3844:9:6",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "3838:15:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1184,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 970,
																			"src": "3871:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1185,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 972,
																			"src": "3899:14:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "74727565",
																			"id": 1186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3931:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1178,
																		"name": "Staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 892,
																		"src": "3778:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Staker_$892_storage_ptr_$",
																			"typeString": "type(struct TokenStaking.Staker storage pointer)"
																		}
																	},
																	"id": 1187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3778:171:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$892_memory_ptr",
																		"typeString": "struct TokenStaking.Staker memory"
																	}
																},
																"src": "3764:185:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$892_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1189,
															"nodeType": "ExpressionStatement",
															"src": "3764:185:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1190,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "3967:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1192,
																		"indexExpression": {
																			"id": 1191,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 966,
																			"src": "3975:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3967:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1193,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3979:10:6",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 887,
																	"src": "3967:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1194,
																		"name": "APY",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 905,
																		"src": "3993:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1196,
																	"indexExpression": {
																		"hexValue": "31",
																		"id": 1195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3997:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3993:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3967:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1215,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "4106:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1217,
																			"indexExpression": {
																				"id": 1216,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 966,
																				"src": "4114:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4106:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$892_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1218,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4118:10:6",
																		"memberName": "StakeMonth",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 887,
																		"src": "4106:22:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1219,
																			"name": "APY",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 905,
																			"src": "4132:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																				"typeString": "mapping(uint256 => uint256)"
																			}
																		},
																		"id": 1221,
																		"indexExpression": {
																			"hexValue": "32",
																			"id": 1220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4136:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4132:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4106:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1240,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "4245:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1242,
																				"indexExpression": {
																					"id": 1241,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "4253:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4245:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1243,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4257:10:6",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 887,
																			"src": "4245:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1244,
																				"name": "APY",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 905,
																				"src": "4271:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																					"typeString": "mapping(uint256 => uint256)"
																				}
																			},
																			"id": 1246,
																			"indexExpression": {
																				"hexValue": "33",
																				"id": 1245,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4275:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_3_by_1",
																					"typeString": "int_const 3"
																				},
																				"value": "3"
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4271:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4245:32:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1265,
																	"nodeType": "IfStatement",
																	"src": "4241:133:6",
																	"trueBody": {
																		"id": 1264,
																		"nodeType": "Block",
																		"src": "4279:95:6",
																		"statements": [
																			{
																				"expression": {
																					"id": 1262,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1248,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 901,
																							"src": "4297:14:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1250,
																						"indexExpression": {
																							"id": 1249,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 966,
																							"src": "4312:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "4297:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1261,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1258,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1253,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"id": 1251,
																													"name": "_amount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 985,
																													"src": "4320:7:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"id": 1252,
																													"name": "AdminFee",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1167,
																													"src": "4330:8:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "4320:18:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1254,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "4319:20:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"baseExpression": {
																											"id": 1255,
																											"name": "APYPer",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 909,
																											"src": "4342:6:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																												"typeString": "mapping(uint256 => uint256)"
																											}
																										},
																										"id": 1257,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1256,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "4349:1:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "4342:9:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "4319:32:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1259,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4318:34:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1260,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4355:4:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "4318:41:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "4297:62:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1263,
																				"nodeType": "ExpressionStatement",
																				"src": "4297:62:6"
																			}
																		]
																	}
																},
																"id": 1266,
																"nodeType": "IfStatement",
																"src": "4102:272:6",
																"trueBody": {
																	"id": 1239,
																	"nodeType": "Block",
																	"src": "4140:95:6",
																	"statements": [
																		{
																			"expression": {
																				"id": 1237,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1223,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 901,
																						"src": "4158:14:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1225,
																					"indexExpression": {
																						"id": 1224,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 966,
																						"src": "4173:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "4158:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1236,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1233,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1228,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"id": 1226,
																												"name": "_amount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 985,
																												"src": "4181:7:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"id": 1227,
																												"name": "AdminFee",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1167,
																												"src": "4191:8:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "4181:18:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1229,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "4180:20:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1230,
																										"name": "APYPer",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 909,
																										"src": "4203:6:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																											"typeString": "mapping(uint256 => uint256)"
																										}
																									},
																									"id": 1232,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1231,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4210:1:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "4203:9:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "4180:32:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1234,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "4179:34:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1235,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4216:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "4179:41:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "4158:62:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1238,
																			"nodeType": "ExpressionStatement",
																			"src": "4158:62:6"
																		}
																	]
																}
															},
															"id": 1267,
															"nodeType": "IfStatement",
															"src": "3963:411:6",
															"trueBody": {
																"id": 1214,
																"nodeType": "Block",
																"src": "4001:95:6",
																"statements": [
																	{
																		"expression": {
																			"id": 1212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1198,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 901,
																					"src": "4019:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1200,
																				"indexExpression": {
																					"id": 1199,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "4034:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "4019:18:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1211,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1208,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1203,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"id": 1201,
																											"name": "_amount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 985,
																											"src": "4042:7:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "-",
																										"rightExpression": {
																											"id": 1202,
																											"name": "AdminFee",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1167,
																											"src": "4052:8:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "4042:18:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1204,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "4041:20:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1205,
																									"name": "APYPer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 909,
																									"src": "4064:6:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																										"typeString": "mapping(uint256 => uint256)"
																									}
																								},
																								"id": 1207,
																								"indexExpression": {
																									"hexValue": "31",
																									"id": 1206,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4071:1:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4064:9:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "4041:32:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1209,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "4040:34:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1210,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4077:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "4040:41:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4019:62:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1213,
																		"nodeType": "ExpressionStatement",
																		"src": "4019:62:6"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1272,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 966,
																		"src": "4425:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1275,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "4437:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$2051",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$2051",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4429:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1273,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4429:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4429:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1277,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "4444:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1269,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 871,
																				"src": "4394:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1268,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4387:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4387:20:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4408:16:6",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "4387:37:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4387:65:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1279,
															"nodeType": "ExpressionStatement",
															"src": "4387:65:6"
														}
													]
												},
												"id": 1281,
												"nodeType": "IfStatement",
												"src": "2297:2166:6",
												"trueBody": {
													"id": 1129,
													"nodeType": "Block",
													"src": "2320:958:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1012,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1008,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1002,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1000,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 995,
																												"name": "Details",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 897,
																												"src": "2344:7:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																													"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																												}
																											},
																											"id": 997,
																											"indexExpression": {
																												"id": 996,
																												"name": "to",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 966,
																												"src": "2352:2:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "2344:11:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Staker_$892_storage",
																												"typeString": "struct TokenStaking.Staker storage ref"
																											}
																										},
																										"id": 998,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "2356:10:6",
																										"memberName": "StakeMonth",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 887,
																										"src": "2344:22:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3130",
																										"id": 999,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "2369:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_10_by_1",
																											"typeString": "int_const 10"
																										},
																										"value": "10"
																									},
																									"src": "2344:27:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3630",
																									"id": 1001,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "2374:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_60_by_1",
																										"typeString": "int_const 60"
																									},
																									"value": "60"
																								},
																								"src": "2344:32:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1003,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2343:34:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1004,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 897,
																								"src": "2380:7:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1006,
																							"indexExpression": {
																								"id": 1005,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 966,
																								"src": "2388:2:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "2380:11:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$892_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1007,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "2392:9:6",
																						"memberName": "stakeTime",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 885,
																						"src": "2380:21:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2343:58:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1009,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2342:60:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"expression": {
																				"id": 1010,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "2404:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1011,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2410:9:6",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "2404:15:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2342:77:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"id": 1013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2420:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		},
																		"value": "Your Time Period Complete."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		}
																	],
																	"id": 994,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2334:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2334:115:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1015,
															"nodeType": "ExpressionStatement",
															"src": "2334:115:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1022,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1017,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "2488:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1019,
																				"indexExpression": {
																					"id": 1018,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "2496:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2488:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1020,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2500:10:6",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 887,
																			"src": "2488:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1021,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 970,
																			"src": "2514:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2488:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"id": 1023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2542:24:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		},
																		"value": "Enter Right StakeMonth"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		}
																	],
																	"id": 1016,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2463:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2463:117:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1025,
															"nodeType": "ExpressionStatement",
															"src": "2463:117:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1032,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1027,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "2619:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1029,
																				"indexExpression": {
																					"id": 1028,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "2627:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2619:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1030,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2631:14:6",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 889,
																			"src": "2619:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1031,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 972,
																			"src": "2649:14:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2619:44:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"id": 1033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2681:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		},
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		}
																	],
																	"id": 1026,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2594:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2594:129:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1035,
															"nodeType": "ExpressionStatement",
															"src": "2594:129:6"
														},
														{
															"expression": {
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1036,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "2737:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1038,
																		"indexExpression": {
																			"id": 1037,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 966,
																			"src": "2745:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2737:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1039,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "2749:13:6",
																	"memberName": "depositTokens",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 883,
																	"src": "2737:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1040,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "2765:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1042,
																			"indexExpression": {
																				"id": 1041,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 966,
																				"src": "2773:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2765:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$892_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1043,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2777:13:6",
																		"memberName": "depositTokens",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 883,
																		"src": "2765:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1044,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "2793:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2765:35:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2737:63:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1047,
															"nodeType": "ExpressionStatement",
															"src": "2737:63:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1048,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "2818:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1050,
																		"indexExpression": {
																			"id": 1049,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 966,
																			"src": "2826:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2818:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1051,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2830:10:6",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 887,
																	"src": "2818:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1052,
																		"name": "APY",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 905,
																		"src": "2844:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1054,
																	"indexExpression": {
																		"hexValue": "31",
																		"id": 1053,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2848:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2844:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2818:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1070,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "2945:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1072,
																			"indexExpression": {
																				"id": 1071,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 966,
																				"src": "2953:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2945:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$892_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1073,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2957:10:6",
																		"memberName": "StakeMonth",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 887,
																		"src": "2945:22:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1074,
																			"name": "APY",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 905,
																			"src": "2971:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																				"typeString": "mapping(uint256 => uint256)"
																			}
																		},
																		"id": 1076,
																		"indexExpression": {
																			"hexValue": "32",
																			"id": 1075,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2975:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2971:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2945:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1099,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1092,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "3072:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1094,
																				"indexExpression": {
																					"id": 1093,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "3080:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3072:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1095,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3084:10:6",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 887,
																			"src": "3072:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1096,
																				"name": "APY",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 905,
																				"src": "3098:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																					"typeString": "mapping(uint256 => uint256)"
																				}
																			},
																			"id": 1098,
																			"indexExpression": {
																				"hexValue": "33",
																				"id": 1097,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3102:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_3_by_1",
																					"typeString": "int_const 3"
																				},
																				"value": "3"
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3098:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3072:32:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1114,
																	"nodeType": "IfStatement",
																	"src": "3068:121:6",
																	"trueBody": {
																		"id": 1113,
																		"nodeType": "Block",
																		"src": "3106:83:6",
																		"statements": [
																			{
																				"expression": {
																					"id": 1111,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"id": 1100,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 901,
																							"src": "3124:14:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 1102,
																						"indexExpression": {
																							"id": 1101,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 966,
																							"src": "3139:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "3124:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "+=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1110,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1107,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1103,
																										"name": "_amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 985,
																										"src": "3147:7:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"baseExpression": {
																											"id": 1104,
																											"name": "APYPer",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 909,
																											"src": "3157:6:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																												"typeString": "mapping(uint256 => uint256)"
																											}
																										},
																										"id": 1106,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1105,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3164:1:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3157:9:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "3147:19:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1108,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3146:21:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1109,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3170:4:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "3146:28:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3124:50:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1112,
																				"nodeType": "ExpressionStatement",
																				"src": "3124:50:6"
																			}
																		]
																	}
																},
																"id": 1115,
																"nodeType": "IfStatement",
																"src": "2941:248:6",
																"trueBody": {
																	"id": 1091,
																	"nodeType": "Block",
																	"src": "2979:83:6",
																	"statements": [
																		{
																			"expression": {
																				"id": 1089,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"baseExpression": {
																						"id": 1078,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 901,
																						"src": "2997:14:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1080,
																					"indexExpression": {
																						"id": 1079,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 966,
																						"src": "3012:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"nodeType": "IndexAccess",
																					"src": "2997:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "+=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1088,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1085,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1081,
																									"name": "_amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 985,
																									"src": "3020:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1082,
																										"name": "APYPer",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 909,
																										"src": "3030:6:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																											"typeString": "mapping(uint256 => uint256)"
																										}
																									},
																									"id": 1084,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1083,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3037:1:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3030:9:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3020:19:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1086,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3019:21:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1087,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3043:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "3019:28:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "2997:50:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1090,
																			"nodeType": "ExpressionStatement",
																			"src": "2997:50:6"
																		}
																	]
																}
															},
															"id": 1116,
															"nodeType": "IfStatement",
															"src": "2814:375:6",
															"trueBody": {
																"id": 1069,
																"nodeType": "Block",
																"src": "2852:83:6",
																"statements": [
																	{
																		"expression": {
																			"id": 1067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1056,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 901,
																					"src": "2870:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1058,
																				"indexExpression": {
																					"id": 1057,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "2885:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "2870:18:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1063,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1059,
																								"name": "_amount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 985,
																								"src": "2893:7:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1060,
																									"name": "APYPer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 909,
																									"src": "2903:6:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																										"typeString": "mapping(uint256 => uint256)"
																									}
																								},
																								"id": 1062,
																								"indexExpression": {
																									"hexValue": "31",
																									"id": 1061,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "2910:1:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "2903:9:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "2893:19:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1064,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2892:21:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1065,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2916:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "2892:28:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2870:50:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1068,
																		"nodeType": "ExpressionStatement",
																		"src": "2870:50:6"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1121,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 966,
																		"src": "3240:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1124,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3252:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$2051",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$2051",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3244:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1122,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3244:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3244:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1126,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "3259:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1118,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 871,
																				"src": "3209:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1117,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3202:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3202:20:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3223:16:6",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "3202:37:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:65:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1128,
															"nodeType": "ExpressionStatement",
															"src": "3202:65:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1282,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "4472:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1284,
														"indexExpression": {
															"id": 1283,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "4479:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4472:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1285,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 985,
														"src": "4486:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4472:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "4472:21:6"
											},
											{
												"expression": {
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1288,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "4503:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1289,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 985,
														"src": "4524:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4503:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1291,
												"nodeType": "ExpressionStatement",
												"src": "4503:28:6"
											}
										]
									},
									"functionSelector": "10c404da",
									"id": 1293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DepositTokens",
									"nameLocation": "2043:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2074:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2066:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2066:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "_payment",
												"nameLocation": "2094:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2086:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2086:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "StakeMonth",
												"nameLocation": "2120:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2112:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "EarnPersentage",
												"nameLocation": "2148:14:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2140:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2140:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:112:6"
									},
									"returnParameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2176:0:6"
									},
									"scope": 2051,
									"src": "2034:2504:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1760,
										"nodeType": "Block",
										"src": "4777:4298:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1299,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 897,
																	"src": "4795:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																		"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																	}
																},
																"id": 1301,
																"indexExpression": {
																	"id": 1300,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1295,
																	"src": "4803:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4795:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$892_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4807:5:6",
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 891,
															"src": "4795:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4669727374205374616b6520546f6b656e73",
															"id": 1303,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4814:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															},
															"value": "First Stake Tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															}
														],
														"id": 1298,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4787:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4787:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1305,
												"nodeType": "ExpressionStatement",
												"src": "4787:48:6"
											},
											{
												"assignments": [
													1307
												],
												"declarations": [
													{
														"constant": false,
														"id": 1307,
														"mutability": "mutable",
														"name": "EarnToken",
														"nameLocation": "4853:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1760,
														"src": "4845:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1306,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4845:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1308,
												"nodeType": "VariableDeclarationStatement",
												"src": "4845:17:6"
											},
											{
												"assignments": [
													1310
												],
												"declarations": [
													{
														"constant": false,
														"id": 1310,
														"mutability": "mutable",
														"name": "BurnToken",
														"nameLocation": "4880:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1760,
														"src": "4872:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1309,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4872:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1311,
												"nodeType": "VariableDeclarationStatement",
												"src": "4872:17:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1319,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1317,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1312,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 897,
																							"src": "4918:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1314,
																						"indexExpression": {
																							"id": 1313,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1295,
																							"src": "4926:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "4918:11:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$892_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1315,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4930:10:6",
																					"memberName": "StakeMonth",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 887,
																					"src": "4918:22:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3130",
																					"id": 1316,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4943:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"src": "4918:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1318,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4948:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "4918:32:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1320,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4917:34:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1321,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "4954:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1323,
																		"indexExpression": {
																			"id": 1322,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1295,
																			"src": "4962:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4954:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1324,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4966:9:6",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 885,
																	"src": "4954:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4917:58:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1326,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4916:60:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1327,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "4979:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4985:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "4979:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4916:78:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1725,
													"nodeType": "Block",
													"src": "6504:2357:6",
													"statements": [
														{
															"assignments": [
																1482
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1482,
																	"mutability": "mutable",
																	"name": "InterestAmountperday",
																	"nameLocation": "6526:20:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1725,
																	"src": "6518:28:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1481,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6518:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1483,
															"nodeType": "VariableDeclarationStatement",
															"src": "6518:28:6"
														},
														{
															"assignments": [
																1485
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1485,
																	"mutability": "mutable",
																	"name": "Total",
																	"nameLocation": "6568:5:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1725,
																	"src": "6560:13:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1484,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6560:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1486,
															"nodeType": "VariableDeclarationStatement",
															"src": "6560:13:6"
														},
														{
															"assignments": [
																1488
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1488,
																	"mutability": "mutable",
																	"name": "PenaltyResult",
																	"nameLocation": "6595:13:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1725,
																	"src": "6587:21:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1487,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6587:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1489,
															"nodeType": "VariableDeclarationStatement",
															"src": "6587:21:6"
														},
														{
															"assignments": [
																1491
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1491,
																	"mutability": "mutable",
																	"name": "Stakdays",
																	"nameLocation": "6630:8:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1725,
																	"src": "6622:16:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1490,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6622:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1503,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1492,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6642:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1493,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "6648:9:6",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6642:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1494,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "6660:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 1496,
																					"indexExpression": {
																						"id": 1495,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1295,
																						"src": "6668:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6660:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$892_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 1497,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "6672:9:6",
																				"memberName": "stakeTime",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 885,
																				"src": "6660:21:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6642:39:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1499,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6641:41:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"hexValue": "3630",
																			"id": 1500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6686:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_60_by_1",
																				"typeString": "int_const 60"
																			},
																			"value": "60"
																		}
																	],
																	"id": 1501,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6685:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_60_by_1",
																		"typeString": "int_const 60"
																	}
																},
																"src": "6641:48:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6622:67:6"
														},
														{
															"expression": {
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1504,
																	"name": "InterestAmountperday",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1482,
																	"src": "6703:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"baseExpression": {
																			"id": 1505,
																			"name": "InterestAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 901,
																			"src": "6742:14:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 1507,
																		"indexExpression": {
																			"id": 1506,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1295,
																			"src": "6757:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6742:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1513,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1508,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 897,
																							"src": "6780:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1510,
																						"indexExpression": {
																							"id": 1509,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1295,
																							"src": "6788:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "6780:11:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$892_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1511,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6792:10:6",
																					"memberName": "StakeMonth",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 887,
																					"src": "6780:22:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3130",
																					"id": 1512,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6805:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"src": "6780:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1514,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6779:29:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6742:66:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6703:105:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1517,
															"nodeType": "ExpressionStatement",
															"src": "6703:105:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1518,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "6870:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1520,
																		"indexExpression": {
																			"id": 1519,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1295,
																			"src": "6878:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6870:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1521,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6882:14:6",
																	"memberName": "EarnPersentage",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 889,
																	"src": "6870:26:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6900:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "6870:33:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1566,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "7318:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1568,
																			"indexExpression": {
																				"id": 1567,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1295,
																				"src": "7326:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7318:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$892_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1569,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7330:14:6",
																		"memberName": "EarnPersentage",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 889,
																		"src": "7318:26:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3735",
																		"id": 1570,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7348:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_75_by_1",
																			"typeString": "int_const 75"
																		},
																		"value": "75"
																	},
																	"src": "7318:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1644,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "8123:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1646,
																				"indexExpression": {
																					"id": 1645,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1295,
																					"src": "8131:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8123:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1647,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8135:14:6",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 889,
																			"src": "8123:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "3530",
																			"id": 1648,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8153:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_50_by_1",
																				"typeString": "int_const 50"
																			},
																			"value": "50"
																		},
																		"src": "8123:32:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1722,
																	"nodeType": "IfStatement",
																	"src": "8119:732:6",
																	"trueBody": {
																		"id": 1721,
																		"nodeType": "Block",
																		"src": "8157:694:6",
																		"statements": [
																			{
																				"expression": {
																					"id": 1665,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1650,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1307,
																						"src": "8175:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1664,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1661,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1658,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"components": [
																														{
																															"commonType": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															},
																															"id": 1653,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"leftExpression": {
																																"id": 1651,
																																"name": "InterestAmountperday",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1482,
																																"src": "8210:20:6",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"nodeType": "BinaryOperation",
																															"operator": "*",
																															"rightExpression": {
																																"id": 1652,
																																"name": "Stakdays",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1491,
																																"src": "8233:8:6",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"src": "8210:31:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														}
																													],
																													"id": 1654,
																													"isConstant": false,
																													"isInlineArray": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "TupleExpression",
																													"src": "8209:33:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1655,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 917,
																														"src": "8245:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1657,
																													"indexExpression": {
																														"id": 1656,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "8258:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "8245:16:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "8209:52:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1659,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "8208:54:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1660,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "8289:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "8208:83:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1662,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8207:85:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1663,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8315:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "8207:111:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8175:143:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1666,
																				"nodeType": "ExpressionStatement",
																				"src": "8175:143:6"
																			},
																			{
																				"expression": {
																					"id": 1674,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1667,
																						"name": "Total",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1485,
																						"src": "8336:5:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1673,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1668,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 897,
																									"src": "8344:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1670,
																								"indexExpression": {
																									"id": 1669,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1295,
																									"src": "8352:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "8344:11:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$892_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1671,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "8356:13:6",
																							"memberName": "depositTokens",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 883,
																							"src": "8344:25:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"id": 1672,
																							"name": "EarnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1307,
																							"src": "8372:9:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "8344:37:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8336:45:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1675,
																				"nodeType": "ExpressionStatement",
																				"src": "8336:45:6"
																			},
																			{
																				"expression": {
																					"id": 1683,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1676,
																						"name": "PenaltyResult",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1488,
																						"src": "8399:13:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1682,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1679,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1677,
																										"name": "Total",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1485,
																										"src": "8416:5:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"id": 1678,
																										"name": "penalty",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 881,
																										"src": "8424:7:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "8416:15:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1680,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8415:17:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "31303030",
																							"id": 1681,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8435:4:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1000_by_1",
																								"typeString": "int_const 1000"
																							},
																							"value": "1000"
																						},
																						"src": "8415:24:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8399:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1684,
																				"nodeType": "ExpressionStatement",
																				"src": "8399:40:6"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"id": 1689,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1295,
																							"src": "8487:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1692,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1690,
																										"name": "Total",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1485,
																										"src": "8492:5:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "-",
																									"rightExpression": {
																										"id": 1691,
																										"name": "PenaltyResult",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1488,
																										"src": "8500:13:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "8492:21:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1693,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8491:23:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1686,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 871,
																									"src": "8464:12:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1685,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "8457:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1687,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "8457:20:6",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1688,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "8478:8:6",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "8457:29:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1694,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8457:58:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1695,
																				"nodeType": "ExpressionStatement",
																				"src": "8457:58:6"
																			},
																			{
																				"expression": {
																					"id": 1711,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1696,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1310,
																						"src": "8533:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1710,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1707,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1704,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"components": [
																														{
																															"commonType": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															},
																															"id": 1699,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"leftExpression": {
																																"id": 1697,
																																"name": "InterestAmountperday",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1482,
																																"src": "8568:20:6",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"nodeType": "BinaryOperation",
																															"operator": "*",
																															"rightExpression": {
																																"id": 1698,
																																"name": "Stakdays",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 1491,
																																"src": "8591:8:6",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"src": "8568:31:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														}
																													],
																													"id": 1700,
																													"isConstant": false,
																													"isInlineArray": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "TupleExpression",
																													"src": "8567:33:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1701,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 917,
																														"src": "8603:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1703,
																													"indexExpression": {
																														"id": 1702,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "8616:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "8603:16:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "8567:52:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1705,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "8566:54:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1706,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "8647:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "8566:83:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1708,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "8565:85:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1709,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8673:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "8565:111:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8533:143:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1712,
																				"nodeType": "ExpressionStatement",
																				"src": "8533:143:6"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																							"id": 1717,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8745:42:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							"value": "0x000000000000000000000000000000000000dEaD"
																						},
																						{
																							"id": 1718,
																							"name": "BurnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1310,
																							"src": "8809:9:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1714,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 871,
																									"src": "8701:12:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1713,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "8694:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1715,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "8694:20:6",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1716,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "8715:8:6",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "8694:29:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1719,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8694:142:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1720,
																				"nodeType": "ExpressionStatement",
																				"src": "8694:142:6"
																			}
																		]
																	}
																},
																"id": 1723,
																"nodeType": "IfStatement",
																"src": "7314:1537:6",
																"trueBody": {
																	"id": 1643,
																	"nodeType": "Block",
																	"src": "7352:694:6",
																	"statements": [
																		{
																			"expression": {
																				"id": 1587,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1572,
																					"name": "EarnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1307,
																					"src": "7370:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1586,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1583,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1580,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"components": [
																													{
																														"commonType": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														},
																														"id": 1575,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"leftExpression": {
																															"id": 1573,
																															"name": "InterestAmountperday",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1482,
																															"src": "7405:20:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"nodeType": "BinaryOperation",
																														"operator": "*",
																														"rightExpression": {
																															"id": 1574,
																															"name": "Stakdays",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1491,
																															"src": "7428:8:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"src": "7405:31:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														}
																													}
																												],
																												"id": 1576,
																												"isConstant": false,
																												"isInlineArray": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "TupleExpression",
																												"src": "7404:33:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1577,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 917,
																													"src": "7440:12:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1579,
																												"indexExpression": {
																													"id": 1578,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "7453:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "7440:16:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "7404:52:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1581,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "7403:54:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3735",
																									"id": 1582,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "7484:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_75_by_1",
																										"typeString": "int_const 75"
																									},
																									"value": "75"
																								},
																								"src": "7403:83:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1584,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7402:85:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1585,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7510:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "7402:111:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7370:143:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1588,
																			"nodeType": "ExpressionStatement",
																			"src": "7370:143:6"
																		},
																		{
																			"expression": {
																				"id": 1596,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1589,
																					"name": "Total",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1485,
																					"src": "7531:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1595,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1590,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 897,
																								"src": "7539:7:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1592,
																							"indexExpression": {
																								"id": 1591,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1295,
																								"src": "7547:2:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "7539:11:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$892_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1593,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "7551:13:6",
																						"memberName": "depositTokens",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 883,
																						"src": "7539:25:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"id": 1594,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1307,
																						"src": "7567:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7539:37:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7531:45:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1597,
																			"nodeType": "ExpressionStatement",
																			"src": "7531:45:6"
																		},
																		{
																			"expression": {
																				"id": 1605,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1598,
																					"name": "PenaltyResult",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1488,
																					"src": "7594:13:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1604,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1601,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1599,
																									"name": "Total",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1485,
																									"src": "7611:5:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"id": 1600,
																									"name": "penalty",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 881,
																									"src": "7619:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "7611:15:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1602,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7610:17:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "31303030",
																						"id": 1603,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7630:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000_by_1",
																							"typeString": "int_const 1000"
																						},
																						"value": "1000"
																					},
																					"src": "7610:24:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7594:40:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1606,
																			"nodeType": "ExpressionStatement",
																			"src": "7594:40:6"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1611,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1295,
																						"src": "7682:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1614,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1612,
																									"name": "Total",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1485,
																									"src": "7687:5:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 1613,
																									"name": "PenaltyResult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1488,
																									"src": "7695:13:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "7687:21:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1615,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7686:23:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1608,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 871,
																								"src": "7659:12:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1607,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "7652:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1609,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "7652:20:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1610,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7673:8:6",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "7652:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1616,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7652:58:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1617,
																			"nodeType": "ExpressionStatement",
																			"src": "7652:58:6"
																		},
																		{
																			"expression": {
																				"id": 1633,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1618,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1310,
																					"src": "7728:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1632,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1629,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1626,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"components": [
																													{
																														"commonType": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														},
																														"id": 1621,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"leftExpression": {
																															"id": 1619,
																															"name": "InterestAmountperday",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1482,
																															"src": "7763:20:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"nodeType": "BinaryOperation",
																														"operator": "*",
																														"rightExpression": {
																															"id": 1620,
																															"name": "Stakdays",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 1491,
																															"src": "7786:8:6",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"src": "7763:31:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														}
																													}
																												],
																												"id": 1622,
																												"isConstant": false,
																												"isInlineArray": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "TupleExpression",
																												"src": "7762:33:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1623,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 917,
																													"src": "7798:12:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1625,
																												"indexExpression": {
																													"id": 1624,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "7811:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "7798:16:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "7762:52:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1627,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "7761:54:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3235",
																									"id": 1628,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "7842:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_25_by_1",
																										"typeString": "int_const 25"
																									},
																									"value": "25"
																								},
																								"src": "7761:83:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1630,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "7760:85:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1631,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7868:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "7760:111:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7728:143:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1634,
																			"nodeType": "ExpressionStatement",
																			"src": "7728:143:6"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																						"id": 1639,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7940:42:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"value": "0x000000000000000000000000000000000000dEaD"
																					},
																					{
																						"id": 1640,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1310,
																						"src": "8004:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1636,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 871,
																								"src": "7896:12:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1635,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "7889:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1637,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "7889:20:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1638,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7910:8:6",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "7889:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1641,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7889:142:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1642,
																			"nodeType": "ExpressionStatement",
																			"src": "7889:142:6"
																		}
																	]
																}
															},
															"id": 1724,
															"nodeType": "IfStatement",
															"src": "6866:1985:6",
															"trueBody": {
																"id": 1565,
																"nodeType": "Block",
																"src": "6905:336:6",
																"statements": [
																	{
																		"expression": {
																			"id": 1529,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1524,
																				"name": "EarnToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1307,
																				"src": "6923:9:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1527,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1525,
																							"name": "InterestAmountperday",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1482,
																							"src": "6936:20:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1526,
																							"name": "Stakdays",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1491,
																							"src": "6959:8:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "6936:31:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1528,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6935:33:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6923:45:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1530,
																		"nodeType": "ExpressionStatement",
																		"src": "6923:45:6"
																	},
																	{
																		"expression": {
																			"id": 1543,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1531,
																				"name": "Total",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1485,
																				"src": "6986:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1532,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 897,
																							"src": "7014:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1534,
																						"indexExpression": {
																							"id": 1533,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1295,
																							"src": "7022:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "7014:11:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$892_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1535,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7026:13:6",
																					"memberName": "depositTokens",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 883,
																					"src": "7014:25:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1540,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1536,
																								"name": "EarnToken",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1307,
																								"src": "7063:9:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"baseExpression": {
																									"id": 1537,
																									"name": "RewardAmount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 917,
																									"src": "7075:12:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																										"typeString": "mapping(address => uint256)"
																									}
																								},
																								"id": 1539,
																								"indexExpression": {
																									"id": 1538,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1295,
																									"src": "7088:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "7075:16:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7063:28:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1541,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7062:30:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7014:78:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6986:106:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1544,
																		"nodeType": "ExpressionStatement",
																		"src": "6986:106:6"
																	},
																	{
																		"expression": {
																			"id": 1552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1545,
																				"name": "PenaltyResult",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1488,
																				"src": "7110:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1551,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1548,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1546,
																								"name": "Total",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1485,
																								"src": "7127:5:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1547,
																								"name": "penalty",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 881,
																								"src": "7135:7:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7127:15:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1549,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7126:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1550,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7146:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7126:24:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7110:40:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1553,
																		"nodeType": "ExpressionStatement",
																		"src": "7110:40:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1558,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1295,
																					"src": "7198:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1561,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1559,
																								"name": "Total",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1485,
																								"src": "7203:5:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"id": 1560,
																								"name": "PenaltyResult",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1488,
																								"src": "7211:13:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7203:21:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1562,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7202:23:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1555,
																							"name": "ERC20Address",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 871,
																							"src": "7175:12:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1554,
																						"name": "IERC20",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 190,
																						"src": "7168:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																							"typeString": "type(contract IERC20)"
																						}
																					},
																					"id": 1556,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7168:20:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1557,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "7189:8:6",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 157,
																				"src": "7168:29:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7168:58:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1564,
																		"nodeType": "ExpressionStatement",
																		"src": "7168:58:6"
																	}
																]
															}
														}
													]
												},
												"id": 1726,
												"nodeType": "IfStatement",
												"src": "4899:3962:6",
												"trueBody": {
													"id": 1480,
													"nodeType": "Block",
													"src": "4996:1502:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1330,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "5014:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1332,
																		"indexExpression": {
																			"id": 1331,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1295,
																			"src": "5022:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5014:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1333,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5026:14:6",
																	"memberName": "EarnPersentage",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 889,
																	"src": "5014:26:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5044:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5014:33:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1357,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "5276:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1359,
																			"indexExpression": {
																				"id": 1358,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1295,
																				"src": "5284:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5276:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$892_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1360,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5288:14:6",
																		"memberName": "EarnPersentage",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 889,
																		"src": "5276:26:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3735",
																		"id": 1361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5306:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_75_by_1",
																			"typeString": "int_const 75"
																		},
																		"value": "75"
																	},
																	"src": "5276:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1417,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "5887:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1419,
																				"indexExpression": {
																					"id": 1418,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1295,
																					"src": "5895:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "5887:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1420,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5899:14:6",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 889,
																			"src": "5887:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "3530",
																			"id": 1421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5917:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_50_by_1",
																				"typeString": "int_const 50"
																			},
																			"value": "50"
																		},
																		"src": "5887:32:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1477,
																	"nodeType": "IfStatement",
																	"src": "5883:605:6",
																	"trueBody": {
																		"id": 1476,
																		"nodeType": "Block",
																		"src": "5921:567:6",
																		"statements": [
																			{
																				"expression": {
																					"id": 1437,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1423,
																						"name": "EarnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1307,
																						"src": "5939:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1433,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1430,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"baseExpression": {
																														"id": 1424,
																														"name": "InterestAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 901,
																														"src": "5973:14:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1426,
																													"indexExpression": {
																														"id": 1425,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "5988:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5973:18:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1427,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 917,
																														"src": "5994:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1429,
																													"indexExpression": {
																														"id": 1428,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "6007:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5994:16:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "5973:37:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1431,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "5972:39:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1432,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6014:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "5972:44:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1434,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "5971:46:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1435,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6040:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "5971:72:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5939:104:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1438,
																				"nodeType": "ExpressionStatement",
																				"src": "5939:104:6"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"id": 1443,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1295,
																							"src": "6112:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1449,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1444,
																										"name": "Details",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 897,
																										"src": "6136:7:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																											"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																										}
																									},
																									"id": 1446,
																									"indexExpression": {
																										"id": 1445,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1295,
																										"src": "6144:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "6136:11:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Staker_$892_storage",
																										"typeString": "struct TokenStaking.Staker storage ref"
																									}
																								},
																								"id": 1447,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "6148:13:6",
																								"memberName": "depositTokens",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 883,
																								"src": "6136:25:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"id": 1448,
																								"name": "EarnToken",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1307,
																								"src": "6164:9:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "6136:37:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1440,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 871,
																									"src": "6068:12:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1439,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "6061:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1441,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6061:20:6",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1442,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "6082:8:6",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "6061:29:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1450,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6061:130:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1451,
																				"nodeType": "ExpressionStatement",
																				"src": "6061:130:6"
																			},
																			{
																				"expression": {
																					"id": 1466,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1452,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1310,
																						"src": "6209:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1465,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1462,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1459,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"baseExpression": {
																														"id": 1453,
																														"name": "InterestAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 901,
																														"src": "6243:14:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1455,
																													"indexExpression": {
																														"id": 1454,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "6258:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6243:18:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "-",
																												"rightExpression": {
																													"baseExpression": {
																														"id": 1456,
																														"name": "RewardAmount",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 917,
																														"src": "6264:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																															"typeString": "mapping(address => uint256)"
																														}
																													},
																													"id": 1458,
																													"indexExpression": {
																														"id": 1457,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1295,
																														"src": "6277:2:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6264:16:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "6243:37:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 1460,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "6242:39:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3530",
																										"id": 1461,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6284:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_50_by_1",
																											"typeString": "int_const 50"
																										},
																										"value": "50"
																									},
																									"src": "6242:44:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1463,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "6241:46:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1464,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6310:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "6241:72:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6209:104:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1467,
																				"nodeType": "ExpressionStatement",
																				"src": "6209:104:6"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																							"id": 1472,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "6382:42:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							"value": "0x000000000000000000000000000000000000dEaD"
																						},
																						{
																							"id": 1473,
																							"name": "BurnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1310,
																							"src": "6446:9:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"id": 1469,
																									"name": "ERC20Address",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 871,
																									"src": "6338:12:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1468,
																								"name": "IERC20",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 190,
																								"src": "6331:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																									"typeString": "type(contract IERC20)"
																								}
																							},
																							"id": 1470,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6331:20:6",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IERC20_$190",
																								"typeString": "contract IERC20"
																							}
																						},
																						"id": 1471,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "6352:8:6",
																						"memberName": "transfer",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 157,
																						"src": "6331:29:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																							"typeString": "function (address,uint256) external returns (bool)"
																						}
																					},
																					"id": 1474,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6331:142:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1475,
																				"nodeType": "ExpressionStatement",
																				"src": "6331:142:6"
																			}
																		]
																	}
																},
																"id": 1478,
																"nodeType": "IfStatement",
																"src": "5272:1216:6",
																"trueBody": {
																	"id": 1416,
																	"nodeType": "Block",
																	"src": "5310:567:6",
																	"statements": [
																		{
																			"expression": {
																				"id": 1377,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1363,
																					"name": "EarnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1307,
																					"src": "5328:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1376,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1373,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1370,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"baseExpression": {
																													"id": 1364,
																													"name": "InterestAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 901,
																													"src": "5362:14:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1366,
																												"indexExpression": {
																													"id": 1365,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "5377:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5362:18:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1367,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 917,
																													"src": "5383:12:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1369,
																												"indexExpression": {
																													"id": 1368,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "5396:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5383:16:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5362:37:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1371,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5361:39:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3735",
																									"id": 1372,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "5403:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_75_by_1",
																										"typeString": "int_const 75"
																									},
																									"value": "75"
																								},
																								"src": "5361:44:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1374,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5360:46:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1375,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5429:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "5360:72:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5328:104:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1378,
																			"nodeType": "ExpressionStatement",
																			"src": "5328:104:6"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1383,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1295,
																						"src": "5501:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1389,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1384,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 897,
																									"src": "5525:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1386,
																								"indexExpression": {
																									"id": 1385,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1295,
																									"src": "5533:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5525:11:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$892_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1387,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "5537:13:6",
																							"memberName": "depositTokens",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 883,
																							"src": "5525:25:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"id": 1388,
																							"name": "EarnToken",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1307,
																							"src": "5553:9:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5525:37:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1380,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 871,
																								"src": "5457:12:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1379,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "5450:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1381,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5450:20:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1382,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5471:8:6",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "5450:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1390,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5450:130:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1391,
																			"nodeType": "ExpressionStatement",
																			"src": "5450:130:6"
																		},
																		{
																			"expression": {
																				"id": 1406,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1392,
																					"name": "BurnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1310,
																					"src": "5598:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1402,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1399,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"baseExpression": {
																													"id": 1393,
																													"name": "InterestAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 901,
																													"src": "5632:14:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1395,
																												"indexExpression": {
																													"id": 1394,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "5647:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5632:18:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "-",
																											"rightExpression": {
																												"baseExpression": {
																													"id": 1396,
																													"name": "RewardAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 917,
																													"src": "5653:12:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																														"typeString": "mapping(address => uint256)"
																													}
																												},
																												"id": 1398,
																												"indexExpression": {
																													"id": 1397,
																													"name": "to",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1295,
																													"src": "5666:2:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5653:16:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5632:37:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1400,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5631:39:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3235",
																									"id": 1401,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "5673:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_25_by_1",
																										"typeString": "int_const 25"
																									},
																									"value": "25"
																								},
																								"src": "5631:44:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1403,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5630:46:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1404,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5699:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "5630:72:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5598:104:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1407,
																			"nodeType": "ExpressionStatement",
																			"src": "5598:104:6"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																						"id": 1412,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5771:42:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"value": "0x000000000000000000000000000000000000dEaD"
																					},
																					{
																						"id": 1413,
																						"name": "BurnToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1310,
																						"src": "5835:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"arguments": [
																							{
																								"id": 1409,
																								"name": "ERC20Address",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 871,
																								"src": "5727:12:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1408,
																							"name": "IERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 190,
																							"src": "5720:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																								"typeString": "type(contract IERC20)"
																							}
																						},
																						"id": 1410,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5720:20:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$190",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 1411,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "5741:8:6",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "5720:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1414,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5720:142:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1415,
																			"nodeType": "ExpressionStatement",
																			"src": "5720:142:6"
																		}
																	]
																}
															},
															"id": 1479,
															"nodeType": "IfStatement",
															"src": "5010:1478:6",
															"trueBody": {
																"id": 1356,
																"nodeType": "Block",
																"src": "5049:217:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1340,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1295,
																					"src": "5118:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1353,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1341,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 897,
																								"src": "5142:7:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1343,
																							"indexExpression": {
																								"id": 1342,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1295,
																								"src": "5150:2:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "5142:11:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$892_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1344,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "5154:13:6",
																						"memberName": "depositTokens",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 883,
																						"src": "5142:25:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1351,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"baseExpression": {
																										"id": 1345,
																										"name": "InterestAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 901,
																										"src": "5195:14:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																											"typeString": "mapping(address => uint256)"
																										}
																									},
																									"id": 1347,
																									"indexExpression": {
																										"id": 1346,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1295,
																										"src": "5210:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5195:18:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"baseExpression": {
																										"id": 1348,
																										"name": "RewardAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 917,
																										"src": "5216:12:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																											"typeString": "mapping(address => uint256)"
																										}
																									},
																									"id": 1350,
																									"indexExpression": {
																										"id": 1349,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1295,
																										"src": "5229:2:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5216:16:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "5195:37:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1352,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5194:39:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5142:91:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1337,
																							"name": "ERC20Address",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 871,
																							"src": "5074:12:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1336,
																						"name": "IERC20",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 190,
																						"src": "5067:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																							"typeString": "type(contract IERC20)"
																						}
																					},
																					"id": 1338,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "5067:20:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1339,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5088:8:6",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 157,
																				"src": "5067:29:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5067:184:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1355,
																		"nodeType": "ExpressionStatement",
																		"src": "5067:184:6"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"id": 1732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1727,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "8870:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1729,
															"indexExpression": {
																"id": 1728,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1295,
																"src": "8878:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8870:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$892_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1730,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8882:5:6",
														"memberName": "check",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 891,
														"src": "8870:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8890:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "8870:25:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1733,
												"nodeType": "ExpressionStatement",
												"src": "8870:25:6"
											},
											{
												"expression": {
													"id": 1737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8905:23:6",
													"subExpression": {
														"baseExpression": {
															"id": 1734,
															"name": "RewardAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 917,
															"src": "8912:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1736,
														"indexExpression": {
															"id": 1735,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "8925:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8912:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1738,
												"nodeType": "ExpressionStatement",
												"src": "8905:23:6"
											},
											{
												"expression": {
													"id": 1742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8938:25:6",
													"subExpression": {
														"baseExpression": {
															"id": 1739,
															"name": "InterestAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 901,
															"src": "8945:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1741,
														"indexExpression": {
															"id": 1740,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "8960:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8945:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1743,
												"nodeType": "ExpressionStatement",
												"src": "8938:25:6"
											},
											{
												"expression": {
													"id": 1751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1744,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "8973:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1746,
														"indexExpression": {
															"id": 1745,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "8980:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8973:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1747,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "8987:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1749,
															"indexExpression": {
																"id": 1748,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1295,
																"src": "8995:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8987:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$892_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1750,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8999:13:6",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 883,
														"src": "8987:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8973:39:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1752,
												"nodeType": "ExpressionStatement",
												"src": "8973:39:6"
											},
											{
												"expression": {
													"id": 1758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1753,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "9022:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1754,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "9043:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1756,
															"indexExpression": {
																"id": 1755,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1295,
																"src": "9051:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9043:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$892_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1757,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9055:13:6",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 883,
														"src": "9043:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9022:46:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1759,
												"nodeType": "ExpressionStatement",
												"src": "9022:46:6"
											}
										]
									},
									"functionSelector": "9131a05a",
									"id": 1761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "WithdrawTokens",
									"nameLocation": "4743:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4766:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1761,
												"src": "4758:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4758:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4757:12:6"
									},
									"returnParameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4777:0:6"
									},
									"scope": 2051,
									"src": "4734:4341:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1847,
										"nodeType": "Block",
										"src": "9311:638:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1774,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1772,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1767,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 897,
																									"src": "9344:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1769,
																								"indexExpression": {
																									"id": 1768,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1763,
																									"src": "9352:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "9344:11:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$892_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1770,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "9356:10:6",
																							"memberName": "StakeMonth",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 887,
																							"src": "9344:22:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3130",
																							"id": 1771,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "9369:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_10_by_1",
																								"typeString": "int_const 10"
																							},
																							"value": "10"
																						},
																						"src": "9344:27:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3630",
																						"id": 1773,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9374:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_60_by_1",
																							"typeString": "int_const 60"
																						},
																						"value": "60"
																					},
																					"src": "9344:32:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1775,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "9343:34:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1776,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 897,
																					"src": "9380:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1778,
																				"indexExpression": {
																					"id": 1777,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1763,
																					"src": "9388:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "9380:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$892_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1779,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "9392:9:6",
																			"memberName": "stakeTime",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 885,
																			"src": "9380:21:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "9343:58:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1781,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9342:60:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"id": 1782,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "9421:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1783,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9427:9:6",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "9421:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9342:94:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7572205374616b652054696d6520436f6d706c6574652c20506c656173652043616c6c2057697468647261772046756e6374696f6e2021",
															"id": 1785,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9450:59:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b",
																"typeString": "literal_string \"Your Stake Time Complete, Please Call Withdraw Function !\""
															},
															"value": "Your Stake Time Complete, Please Call Withdraw Function !"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_72b97df0ca51f5ba11debc5400804b0205732717e518b4d8c7f5c23ff921960b",
																"typeString": "literal_string \"Your Stake Time Complete, Please Call Withdraw Function !\""
															}
														],
														"id": 1766,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9321:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9321:198:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1787,
												"nodeType": "ExpressionStatement",
												"src": "9321:198:6"
											},
											{
												"assignments": [
													1789
												],
												"declarations": [
													{
														"constant": false,
														"id": 1789,
														"mutability": "mutable",
														"name": "Stakdays",
														"nameLocation": "9537:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1847,
														"src": "9529:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1788,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9529:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1801,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1796,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1790,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9549:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9555:9:6",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9549:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1792,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "9567:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1794,
																		"indexExpression": {
																			"id": 1793,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "9575:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9567:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1795,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9579:9:6",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 885,
																	"src": "9567:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9549:39:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1797,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9548:41:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"hexValue": "3630",
																"id": 1798,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9593:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															}
														],
														"id": 1799,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9592:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_60_by_1",
															"typeString": "int_const 60"
														}
													},
													"src": "9548:48:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9529:67:6"
											},
											{
												"assignments": [
													1803
												],
												"declarations": [
													{
														"constant": false,
														"id": 1803,
														"mutability": "mutable",
														"name": "InterestAmountperday",
														"nameLocation": "9614:20:6",
														"nodeType": "VariableDeclaration",
														"scope": 1847,
														"src": "9606:28:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1802,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9606:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1815,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1804,
															"name": "InterestAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 901,
															"src": "9637:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1806,
														"indexExpression": {
															"id": 1805,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1763,
															"src": "9652:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9637:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1812,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1807,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "9671:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1809,
																		"indexExpression": {
																			"id": 1808,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "9679:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9671:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1810,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9683:10:6",
																	"memberName": "StakeMonth",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 887,
																	"src": "9671:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3130",
																	"id": 1811,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9696:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "9671:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1813,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9670:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9637:62:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9606:93:6"
											},
											{
												"assignments": [
													1817
												],
												"declarations": [
													{
														"constant": false,
														"id": 1817,
														"mutability": "mutable",
														"name": "EarnToken",
														"nameLocation": "9717:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1847,
														"src": "9709:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1816,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9709:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1821,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1818,
														"name": "InterestAmountperday",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1803,
														"src": "9729:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1819,
														"name": "Stakdays",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1789,
														"src": "9752:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9729:31:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9709:51:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1823,
																"name": "EarnToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "9778:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9790:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9778:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526577617264206d7573742062652067726561746572207468616e207a65726f2e",
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9793:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7",
																"typeString": "literal_string \"Reward must be greater than zero.\""
															},
															"value": "Reward must be greater than zero."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_46548614461d52f1fcdc636371521b46a91c57064e9f88048a8ba242ea65a1c7",
																"typeString": "literal_string \"Reward must be greater than zero.\""
															}
														],
														"id": 1822,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9770:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9770:59:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1828,
												"nodeType": "ExpressionStatement",
												"src": "9770:59:6"
											},
											{
												"expression": {
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1829,
															"name": "RewardAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 917,
															"src": "9839:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1831,
														"indexExpression": {
															"id": 1830,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1763,
															"src": "9852:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9839:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1836,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1832,
															"name": "EarnToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "9859:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"baseExpression": {
																"id": 1833,
																"name": "RewardAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 917,
																"src": "9871:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1835,
															"indexExpression": {
																"id": 1834,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1763,
																"src": "9884:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9871:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9859:28:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9839:48:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1838,
												"nodeType": "ExpressionStatement",
												"src": "9839:48:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1843,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1763,
															"src": "9928:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1844,
															"name": "EarnToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "9932:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1840,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "9905:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1839,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "9898:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9898:20:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9919:8:6",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 157,
														"src": "9898:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9898:44:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1846,
												"nodeType": "ExpressionStatement",
												"src": "9898:44:6"
											}
										]
									},
									"functionSelector": "0178be5f",
									"id": 1848,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ClaimRewards",
									"nameLocation": "9279:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9300:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "9292:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9292:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9291:12:6"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9311:0:6"
									},
									"scope": 2051,
									"src": "9270:679:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1927,
										"nodeType": "Block",
										"src": "10025:546:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1868,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1860,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1855,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 897,
																							"src": "10054:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1857,
																						"indexExpression": {
																							"id": 1856,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1850,
																							"src": "10062:2:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "10054:11:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$892_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1858,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10066:10:6",
																					"memberName": "StakeMonth",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 887,
																					"src": "10054:22:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3130",
																					"id": 1859,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "10079:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"src": "10054:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1861,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10084:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "10054:32:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1863,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10053:34:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1864,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 897,
																			"src": "10090:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1866,
																		"indexExpression": {
																			"id": 1865,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1850,
																			"src": "10098:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10090:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$892_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1867,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10102:9:6",
																	"memberName": "stakeTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 885,
																	"src": "10090:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10053:58:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1869,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10052:60:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1870,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "10127:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10133:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "10127:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10052:90:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1925,
													"nodeType": "Block",
													"src": "10228:337:6",
													"statements": [
														{
															"assignments": [
																1884
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1884,
																	"mutability": "mutable",
																	"name": "Stakdays",
																	"nameLocation": "10250:8:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1925,
																	"src": "10242:16:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1883,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10242:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1896,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1891,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1885,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "10262:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1886,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10268:9:6",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "10262:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1887,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "10280:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 1889,
																					"indexExpression": {
																						"id": 1888,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1850,
																						"src": "10288:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "10280:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$892_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 1890,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10292:9:6",
																				"memberName": "stakeTime",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 885,
																				"src": "10280:21:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10262:39:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1892,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10261:41:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"hexValue": "3630",
																			"id": 1893,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10306:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_60_by_1",
																				"typeString": "int_const 60"
																			},
																			"value": "60"
																		}
																	],
																	"id": 1894,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10305:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_60_by_1",
																		"typeString": "int_const 60"
																	}
																},
																"src": "10261:48:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10242:67:6"
														},
														{
															"assignments": [
																1898
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1898,
																	"mutability": "mutable",
																	"name": "InterestAmountperday",
																	"nameLocation": "10331:20:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1925,
																	"src": "10323:28:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1897,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10323:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1910,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1909,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 1899,
																		"name": "InterestAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 901,
																		"src": "10354:14:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1901,
																	"indexExpression": {
																		"id": 1900,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1850,
																		"src": "10369:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10354:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1907,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1902,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "10392:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																							"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																						}
																					},
																					"id": 1904,
																					"indexExpression": {
																						"id": 1903,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1850,
																						"src": "10400:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "10392:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$892_storage",
																						"typeString": "struct TokenStaking.Staker storage ref"
																					}
																				},
																				"id": 1905,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10404:10:6",
																				"memberName": "StakeMonth",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 887,
																				"src": "10392:22:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3130",
																				"id": 1906,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10417:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"src": "10392:27:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1908,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10391:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10354:66:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10323:97:6"
														},
														{
															"assignments": [
																1912
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1912,
																	"mutability": "mutable",
																	"name": "EarnToken",
																	"nameLocation": "10442:9:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1925,
																	"src": "10434:17:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1911,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10434:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1921,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1920,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1913,
																				"name": "InterestAmountperday",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1898,
																				"src": "10455:20:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1914,
																				"name": "Stakdays",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1884,
																				"src": "10478:8:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10455:31:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1916,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10454:33:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1917,
																		"name": "RewardAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 917,
																		"src": "10506:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1919,
																	"indexExpression": {
																		"id": 1918,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1850,
																		"src": "10519:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10506:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10454:68:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10434:88:6"
														},
														{
															"expression": {
																"components": [
																	{
																		"id": 1922,
																		"name": "EarnToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1912,
																		"src": "10544:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1923,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10543:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1854,
															"id": 1924,
															"nodeType": "Return",
															"src": "10536:18:6"
														}
													]
												},
												"id": 1926,
												"nodeType": "IfStatement",
												"src": "10035:530:6",
												"trueBody": {
													"id": 1882,
													"nodeType": "Block",
													"src": "10153:69:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1879,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1873,
																				"name": "InterestAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 901,
																				"src": "10175:14:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1875,
																			"indexExpression": {
																				"id": 1874,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1850,
																				"src": "10190:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "10175:18:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1876,
																				"name": "RewardAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 917,
																				"src": "10194:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1878,
																			"indexExpression": {
																				"id": 1877,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1850,
																				"src": "10207:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "10194:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "10175:35:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1880,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10174:37:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1854,
															"id": 1881,
															"nodeType": "Return",
															"src": "10167:44:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "da40ef80",
									"id": 1928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewRewards",
									"nameLocation": "9964:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9984:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "9976:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9976:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9975:12:6"
									},
									"returnParameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1853,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "10017:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "10009:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10009:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10008:16:6"
									},
									"scope": 2051,
									"src": "9955:616:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1961,
										"nodeType": "Block",
										"src": "10650:188:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1935,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "10663:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1937,
															"indexExpression": {
																"id": 1936,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1930,
																"src": "10671:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10663:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$892_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1938,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10675:14:6",
														"memberName": "EarnPersentage",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 889,
														"src": "10663:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1939,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10693:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "10663:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1959,
													"nodeType": "Block",
													"src": "10743:89:6",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1954,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"baseExpression": {
																					"id": 1944,
																					"name": "InterestAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 901,
																					"src": "10765:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1946,
																				"indexExpression": {
																					"id": 1945,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1930,
																					"src": "10780:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10765:18:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1952,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"hexValue": "313030",
																							"id": 1947,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "10785:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1948,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 897,
																									"src": "10789:7:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$892_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1950,
																								"indexExpression": {
																									"id": 1949,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1930,
																									"src": "10797:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "10789:11:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$892_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1951,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "10801:14:6",
																							"memberName": "EarnPersentage",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 889,
																							"src": "10789:26:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "10785:30:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1953,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "10784:32:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10765:51:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1955,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10764:53:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1956,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10818:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "10764:57:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1934,
															"id": 1958,
															"nodeType": "Return",
															"src": "10757:64:6"
														}
													]
												},
												"id": 1960,
												"nodeType": "IfStatement",
												"src": "10660:172:6",
												"trueBody": {
													"id": 1943,
													"nodeType": "Block",
													"src": "10697:33:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1941,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10718:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1934,
															"id": 1942,
															"nodeType": "Return",
															"src": "10711:8:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "032ad8fb",
									"id": 1962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewBurnRewards",
									"nameLocation": "10585:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10609:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "10601:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1929,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10601:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10600:12:6"
									},
									"returnParameters": {
										"id": 1934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "10642:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "10634:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10634:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10633:16:6"
									},
									"scope": 2051,
									"src": "10576:262:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1991,
										"nodeType": "Block",
										"src": "11059:82:6",
										"statements": [
											{
												"expression": {
													"id": 1977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1973,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "11069:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1975,
														"indexExpression": {
															"hexValue": "31",
															"id": 1974,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11069:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1976,
														"name": "Month1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1964,
														"src": "11078:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11069:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1978,
												"nodeType": "ExpressionStatement",
												"src": "11069:15:6"
											},
											{
												"expression": {
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1979,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "11094:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1981,
														"indexExpression": {
															"hexValue": "32",
															"id": 1980,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11098:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11094:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1982,
														"name": "Month2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1966,
														"src": "11103:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11094:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1984,
												"nodeType": "ExpressionStatement",
												"src": "11094:15:6"
											},
											{
												"expression": {
													"id": 1989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1985,
															"name": "APY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "11119:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1987,
														"indexExpression": {
															"hexValue": "33",
															"id": 1986,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11123:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11119:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1988,
														"name": "Month3",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1968,
														"src": "11128:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11119:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1990,
												"nodeType": "ExpressionStatement",
												"src": "11119:15:6"
											}
										]
									},
									"functionSelector": "21736665",
									"id": 1992,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1971,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1970,
												"name": "onlyOwner",
												"nameLocations": [
													"11049:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11049:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11049:9:6"
										}
									],
									"name": "SetAPY",
									"nameLocation": "10957:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "Month1",
												"nameLocation": "10981:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "10973:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10973:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "Month2",
												"nameLocation": "11005:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "10997:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10997:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "Month3",
												"nameLocation": "11029:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "11021:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11021:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10963:78:6"
									},
									"returnParameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11059:0:6"
									},
									"scope": 2051,
									"src": "10948:193:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2021,
										"nodeType": "Block",
										"src": "11385:100:6",
										"statements": [
											{
												"expression": {
													"id": 2007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2003,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "11395:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2005,
														"indexExpression": {
															"hexValue": "31",
															"id": 2004,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11402:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11395:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2006,
														"name": "Month1Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1994,
														"src": "11407:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11395:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2008,
												"nodeType": "ExpressionStatement",
												"src": "11395:21:6"
											},
											{
												"expression": {
													"id": 2013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2009,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "11426:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2011,
														"indexExpression": {
															"hexValue": "32",
															"id": 2010,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11433:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11426:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2012,
														"name": "Month2Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1996,
														"src": "11438:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11426:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2014,
												"nodeType": "ExpressionStatement",
												"src": "11426:21:6"
											},
											{
												"expression": {
													"id": 2019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2015,
															"name": "APYPer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "11457:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2017,
														"indexExpression": {
															"hexValue": "33",
															"id": 2016,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11464:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11457:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2018,
														"name": "Month3Per",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1998,
														"src": "11469:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11457:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2020,
												"nodeType": "ExpressionStatement",
												"src": "11457:21:6"
											}
										]
									},
									"functionSelector": "d6f80a25",
									"id": 2022,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2001,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2000,
												"name": "onlyOwner",
												"nameLocations": [
													"11375:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11375:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11375:9:6"
										}
									],
									"name": "SetRewardPersentage",
									"nameLocation": "11261:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1994,
												"mutability": "mutable",
												"name": "Month1Per",
												"nameLocation": "11298:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "11290:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11290:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "Month2Per",
												"nameLocation": "11325:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "11317:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11317:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "Month3Per",
												"nameLocation": "11352:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "11344:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11344:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:87:6"
									},
									"returnParameters": {
										"id": 2002,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11385:0:6"
									},
									"scope": 2051,
									"src": "11252:233:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2037,
										"nodeType": "Block",
										"src": "11684:57:6",
										"statements": [
											{
												"expression": {
													"id": 2031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2029,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 879,
														"src": "11694:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2030,
														"name": "taxFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2024,
														"src": "11700:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11694:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2032,
												"nodeType": "ExpressionStatement",
												"src": "11694:12:6"
											},
											{
												"expression": {
													"id": 2035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2033,
														"name": "penalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 881,
														"src": "11716:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2034,
														"name": "_penalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2026,
														"src": "11726:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11716:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2036,
												"nodeType": "ExpressionStatement",
												"src": "11716:18:6"
											}
										]
									},
									"functionSelector": "264b4af6",
									"id": 2038,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setTexAndPenalty",
									"nameLocation": "11626:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2024,
												"mutability": "mutable",
												"name": "taxFee",
												"nameLocation": "11651:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "11643:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2023,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11643:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "_penalty",
												"nameLocation": "11667:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "11659:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2025,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11659:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11642:34:6"
									},
									"returnParameters": {
										"id": 2028,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11684:0:6"
									},
									"scope": 2051,
									"src": "11617:124:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2049,
										"nodeType": "Block",
										"src": "11819:38:6",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"id": 2045,
															"name": "Tax",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "11837:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2046,
															"name": "penalty",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 881,
															"src": "11842:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2047,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "11836:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 2044,
												"id": 2048,
												"nodeType": "Return",
												"src": "11829:21:6"
											}
										]
									},
									"functionSelector": "2e886f1f",
									"id": 2050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTaxPenalty",
									"nameLocation": "11756:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11769:2:6"
									},
									"returnParameters": {
										"id": 2044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "tax",
												"nameLocation": "11801:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "11793:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11793:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "pen",
												"nameLocation": "11814:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "11806:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11806:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11792:26:6"
									},
									"scope": 2051,
									"src": "11747:110:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2052,
							"src": "201:11658:6",
							"usedErrors": []
						}
					],
					"src": "56:11803:6"
				},
				"id": 6
			}
		}
	}
}
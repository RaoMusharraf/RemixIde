{
	"id": "2431d1200e87f235ccc8119a1cff3d78",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Staking/StakingFinal.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ncontract TokenStaking is Ownable{\n    using SafeERC20 for IERC20;\n    address public ERC20Address;\n    uint public totalStakedTokens;\n    struct Staker {\n        uint256 depositTokens;\n        uint256 stakeTime;\n        uint256 StakeMonth;\n        uint256 EarnPersentage;\n        bool check; \n    }\n    mapping (address => Staker) public Details;\n    mapping (address => uint ) public Tokens;\n\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n    1. This function is called when contract is first deployed.\n    2. It takes three parameters:\n        a. ERC20 Token Address (Address of ERC20 Token Contract)\n    */\n    constructor(address _ERC20Address) {\n        ERC20Address = _ERC20Address;\n    }\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint _amount) public onlyOwner{\n        Tokens[msg.sender] +=_amount;\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Admin WithDraw Token Function~~~~~~~~~~~~~~~\n    1. Admin withdraws his/her desired amount of token from contract.\n    2. Only Owner can call this function\n    */\n    function AdminWithDrawToken(uint amount) public onlyOwner{\n        Tokens[msg.sender] -= amount;\n        IERC20(ERC20Address).safeTransfer(msg.sender, amount);\n    }\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has one parameter.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function DepositTokens(address to,uint256 _amount,uint256 StakeMonth,uint256 EarnPersentage) public {\n        if(Details[to].check){\n            require(((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) > block.timestamp,\"Your Time Period Complete.\");\n            require(Details[to].StakeMonth == StakeMonth,\"Enter Right StakeMonth\");\n            require(Details[to].EarnPersentage == EarnPersentage,\"Enter Right EarnPersentage\");\n            Details[to].depositTokens = Details[to].depositTokens + _amount;\n            IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount);         \n        }else{\n            Details[to] = Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true);\n            IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount);        \n        }\n        Tokens[to] += _amount;\n        totalStakedTokens += _amount;\n    }\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function WithdrawTokens(address to) public {\n        require(Details[to].check,\"First Stake Tokens\");\n        require(((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) < block.timestamp,\"Please Wait\");\n        uint InterestAmount;\n        uint EarnToken;\n        uint BurnToken;\n        uint AdminFee = (Details[to].depositTokens*25)/1000;\n        uint OwnerRemainingTokens = Details[to].depositTokens - AdminFee;\n        if(Details[to].StakeMonth == 3){\n            InterestAmount =  (Details[to].depositTokens*20)/100;\n        }else if(Details[to].StakeMonth == 6){\n            InterestAmount =  (Details[to].depositTokens*225)/1000;\n        }else if(Details[to].StakeMonth == 12){\n            InterestAmount =  (Details[to].depositTokens*25)/100;\n        }\n        if(Details[to].EarnPersentage == 100){\n            IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + InterestAmount);\n        }else if(Details[to].EarnPersentage == 75){\n            EarnToken = (InterestAmount*75)/100;\n            IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + EarnToken);\n            BurnToken = (InterestAmount*25)/100;\n            IERC20(ERC20Address).transfer(0x000000000000000000000000000000000000dEaD, BurnToken);\n        }else if(Details[to].EarnPersentage == 50){\n            EarnToken = (InterestAmount*50)/100;\n            IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + EarnToken);\n            BurnToken = (InterestAmount*50)/100;\n            IERC20(ERC20Address).transfer(0x000000000000000000000000000000000000dEaD, BurnToken);\n        }\n        Details[to].check = false;\n        Tokens[to] -= Details[to].depositTokens;\n        totalStakedTokens -= Details[to].depositTokens;\n        \n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bbcb1fd435e5744a5b541c709a8f7209eca403ec3ecfbdbe7bdc2822cdbb6f3d64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbcb1fd435e5744a5b541c709a8f7209eca403ec3ecfbdbe7bdc2822cdbb6f3d64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xCB 0x1F 0xD4 CALLDATALOAD 0xE5 PUSH21 0x4A5B541C709A8F7209ECA403EC3ECFBDBE7BDC2822 0xCD 0xBB PUSH16 0x3D64736F6C6343000812003300000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbcb1fd435e5744a5b541c709a8f7209eca403ec3ecfbdbe7bdc2822cdbb6f3d64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xCB 0x1F 0xD4 CALLDATALOAD 0xE5 PUSH21 0x4A5B541C709A8F7209ECA403EC3ECFBDBE7BDC2822 0xCD 0xBB PUSH16 0x3D64736F6C6343000812003300000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bbcb1fd435e5744a5b541c709a8f7209eca403ec3ecfbdbe7bdc2822cdbb6f3d64736f6c63430008120033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122056388b4bd61a0a82b1b5642110ef2e3e47829ce58d55205c0109152159a2901a64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122056388b4bd61a0a82b1b5642110ef2e3e47829ce58d55205c0109152159a2901a64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP CODESIZE DUP12 0x4B 0xD6 BYTE EXP DUP3 0xB1 0xB5 PUSH5 0x2110EF2E3E SELFBALANCE DUP3 SWAP13 0xE5 DUP14 SSTORE KECCAK256 0x5C ADD MULMOD ISZERO 0x21 MSIZE LOG2 SWAP1 BYTE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122056388b4bd61a0a82b1b5642110ef2e3e47829ce58d55205c0109152159a2901a64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP CODESIZE DUP12 0x4B 0xD6 BYTE EXP DUP3 0xB1 0xB5 PUSH5 0x2110EF2E3E SELFBALANCE DUP3 SWAP13 0xE5 DUP14 SSTORE KECCAK256 0x5C ADD MULMOD ISZERO 0x21 MSIZE LOG2 SWAP1 BYTE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122056388b4bd61a0a82b1b5642110ef2e3e47829ce58d55205c0109152159a2901a64736f6c63430008120033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Staking/StakingFinal.sol": {
				"TokenStaking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AdminWithDrawToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								}
							],
							"name": "DepositTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "depositTokens",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakeTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "StakeMonth",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "EarnPersentage",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Tokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "WithdrawTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalStakedTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Staking/StakingFinal.sol\":281:4861  contract TokenStaking is Ownable{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Staking/StakingFinal.sol\":911:991  constructor(address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_8\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_9)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_10)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_7:\n    /* \"contracts/Staking/StakingFinal.sol\":971:984  _ERC20Address */\n  dup1\n    /* \"contracts/Staking/StakingFinal.sol\":956:968  ERC20Address */\n  0x01\n  0x00\n    /* \"contracts/Staking/StakingFinal.sol\":956:984  ERC20Address = _ERC20Address */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking/StakingFinal.sol\":911:991  constructor(address _ERC20Address) {... */\n  pop\n    /* \"contracts/Staking/StakingFinal.sol\":281:4861  contract TokenStaking is Ownable{... */\n  jump(tag_12)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_9:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_16:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_18:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_19:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_28\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_18\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_20:\n    /* \"#utility.yul\":641:665   */\n  tag_30\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_19\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_31\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_31:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_21:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_33\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_20\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_36\n  tag_16\n  jump\t// in\ntag_36:\n    /* \"#utility.yul\":932:1051   */\ntag_35:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_37\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_21\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Staking/StakingFinal.sol\":281:4861  contract TokenStaking is Ownable{... */\ntag_12:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Staking/StakingFinal.sol\":281:4861  contract TokenStaking is Ownable{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x9131a05a\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x9131a05a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa6021ace\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa88e132f\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x0deef63a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x10c404da\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3ae73259\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Staking/StakingFinal.sol\":632:672  mapping (address => uint ) public Tokens */\n    tag_3:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking/StakingFinal.sol\":2048:2936  function DepositTokens(address to,uint256 _amount,uint256 StakeMonth,uint256 EarnPersentage) public {... */\n    tag_4:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":384:413  uint public totalStakedTokens */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_7:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking/StakingFinal.sol\":3131:4859  function WithdrawTokens(address to) public {... */\n    tag_8:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_35:\n      tag_36\n      jump\t// in\n    tag_34:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":351:378  address public ERC20Address */\n    tag_9:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking/StakingFinal.sol\":1590:1755  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_10:\n      tag_40\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_41\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":1217:1398  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_11:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_45:\n      tag_46\n      jump\t// in\n    tag_44:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":584:626  mapping (address => Staker) public Details */\n    tag_12:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_48:\n      tag_49\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_50\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_13:\n      tag_52\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n    tag_52:\n      stop\n        /* \"contracts/Staking/StakingFinal.sol\":632:672  mapping (address => uint ) public Tokens */\n    tag_18:\n      mstore(0x20, 0x04)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":2048:2936  function DepositTokens(address to,uint256 _amount,uint256 StakeMonth,uint256 EarnPersentage) public {... */\n    tag_24:\n        /* \"contracts/Staking/StakingFinal.sol\":2161:2168  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2161:2172  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2169:2171  to */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":2161:2172  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2161:2178  Details[to].check */\n      0x04\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":2158:2861  if(Details[to].check){... */\n      iszero\n      tag_56\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":2266:2281  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":2241:2248  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2241:2252  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2249:2251  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2241:2252  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2241:2262  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2235:2237  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":2232:2234  60 */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":2229:2231  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":2226:2228  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2210  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2214  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2211:2213  to */\n      dup12\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2214  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2225  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2228  Details[to].StakeMonth*30 */\n      tag_57\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_57:\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2231  Details[to].StakeMonth*30*24 */\n      tag_59\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_59:\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2234  Details[to].StakeMonth*30*24*60 */\n      tag_60\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_60:\n        /* \"contracts/Staking/StakingFinal.sol\":2203:2237  Details[to].StakeMonth*30*24*60*60 */\n      tag_61\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_61:\n        /* \"contracts/Staking/StakingFinal.sol\":2202:2262  (Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime */\n      tag_62\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_62:\n        /* \"contracts/Staking/StakingFinal.sol\":2201:2281  ((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) > block.timestamp */\n      gt\n        /* \"contracts/Staking/StakingFinal.sol\":2193:2311  require(((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) > block.timestamp,\"Your Time Period Complete.\") */\n      tag_64\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_65\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_64:\n        /* \"contracts/Staking/StakingFinal.sol\":2359:2369  StakeMonth */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":2333:2340  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2333:2344  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2341:2343  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2333:2344  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2333:2355  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2333:2369  Details[to].StakeMonth == StakeMonth */\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":2325:2395  require(Details[to].StakeMonth == StakeMonth,\"Enter Right StakeMonth\") */\n      tag_67\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_68\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_67:\n        /* \"contracts/Staking/StakingFinal.sol\":2447:2461  EarnPersentage */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":2417:2424  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2417:2428  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2425:2427  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2417:2428  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2417:2443  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2417:2461  Details[to].EarnPersentage == EarnPersentage */\n      eq\n        /* \"contracts/Staking/StakingFinal.sol\":2409:2491  require(Details[to].EarnPersentage == EarnPersentage,\"Enter Right EarnPersentage\") */\n      tag_70\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_71\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_70:\n        /* \"contracts/Staking/StakingFinal.sol\":2561:2568  _amount */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":2533:2540  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2533:2544  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2541:2543  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2533:2544  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2533:2558  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":2533:2568  Details[to].depositTokens + _amount */\n      tag_73\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_73:\n        /* \"contracts/Staking/StakingFinal.sol\":2505:2512  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2505:2516  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2513:2515  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2505:2516  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2505:2530  Details[to].depositTokens */\n      0x00\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2505:2568  Details[to].depositTokens = Details[to].depositTokens + _amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2582:2648  IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount) */\n      tag_74\n        /* \"contracts/Staking/StakingFinal.sol\":2620:2622  to */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":2632:2636  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":2640:2647  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":2589:2601  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":2582:2619  IERC20(ERC20Address).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_75\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2582:2648  IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_74:\n        /* \"contracts/Staking/StakingFinal.sol\":2158:2861  if(Details[to].check){... */\n      jump(tag_76)\n    tag_56:\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":2707:2714  _amount */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2715:2730  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2731:2741  StakeMonth */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2742:2756  EarnPersentage */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking/StakingFinal.sol\":2757:2761  true */\n      0x01\n        /* \"contracts/Staking/StakingFinal.sol\":2700:2762  Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2686:2693  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":2686:2697  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2694:2696  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2686:2697  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":2686:2762  Details[to] = Staker(_amount,block.timestamp,StakeMonth,EarnPersentage,true) */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      sstore\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      sstore\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      sstore\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2776:2842  IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount) */\n      tag_77\n        /* \"contracts/Staking/StakingFinal.sol\":2814:2816  to */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":2826:2830  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":2834:2841  _amount */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":2783:2795  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":2776:2813  IERC20(ERC20Address).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_75\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":2776:2842  IERC20(ERC20Address).safeTransferFrom(to, address(this) , _amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_77:\n        /* \"contracts/Staking/StakingFinal.sol\":2158:2861  if(Details[to].check){... */\n    tag_76:\n        /* \"contracts/Staking/StakingFinal.sol\":2884:2891  _amount */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":2870:2876  Tokens */\n      0x04\n        /* \"contracts/Staking/StakingFinal.sol\":2870:2880  Tokens[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2877:2879  to */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":2870:2880  Tokens[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2870:2891  Tokens[to] += _amount */\n      dup3\n      dup3\n      sload\n      tag_78\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_78:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2922:2929  _amount */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":2901:2918  totalStakedTokens */\n      0x02\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":2901:2929  totalStakedTokens += _amount */\n      dup3\n      dup3\n      sload\n      tag_79\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_79:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":2048:2936  function DepositTokens(address to,uint256 _amount,uint256 StakeMonth,uint256 EarnPersentage) public {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":384:413  uint public totalStakedTokens */\n    tag_26:\n      sload(0x02)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_81\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_82\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_81:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_84\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_85\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_31:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":3131:4859  function WithdrawTokens(address to) public {... */\n    tag_36:\n        /* \"contracts/Staking/StakingFinal.sol\":3192:3199  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3192:3203  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3200:3202  to */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":3192:3203  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3192:3209  Details[to].check */\n      0x04\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":3184:3231  require(Details[to].check,\"First Stake Tokens\") */\n      tag_88\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_89\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_88:\n        /* \"contracts/Staking/StakingFinal.sol\":3314:3329  block.timestamp */\n      timestamp\n        /* \"contracts/Staking/StakingFinal.sol\":3289:3296  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3289:3300  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3297:3299  to */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":3289:3300  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3289:3310  Details[to].stakeTime */\n      0x01\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3283:3285  60 */\n      0x3c\n        /* \"contracts/Staking/StakingFinal.sol\":3280:3282  60 */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3277:3279  24 */\n      0x18\n        /* \"contracts/Staking/StakingFinal.sol\":3274:3276  30 */\n      0x1e\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3258  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3262  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3259:3261  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3262  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3273  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3276  Details[to].StakeMonth*30 */\n      tag_91\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_91:\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3279  Details[to].StakeMonth*30*24 */\n      tag_92\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_92:\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3282  Details[to].StakeMonth*30*24*60 */\n      tag_93\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_93:\n        /* \"contracts/Staking/StakingFinal.sol\":3251:3285  Details[to].StakeMonth*30*24*60*60 */\n      tag_94\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_94:\n        /* \"contracts/Staking/StakingFinal.sol\":3250:3310  (Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime */\n      tag_95\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_95:\n        /* \"contracts/Staking/StakingFinal.sol\":3249:3329  ((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) < block.timestamp */\n      lt\n        /* \"contracts/Staking/StakingFinal.sol\":3241:3344  require(((Details[to].StakeMonth*30*24*60*60) + Details[to].stakeTime) < block.timestamp,\"Please Wait\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"contracts/Staking/StakingFinal.sol\":3354:3373  uint InterestAmount */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3383:3397  uint EarnToken */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3407:3421  uint BurnToken */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3431:3444  uint AdminFee */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3478:3482  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":3474:3476  25 */\n      0x19\n        /* \"contracts/Staking/StakingFinal.sol\":3448:3455  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3448:3459  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3456:3458  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3448:3459  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3448:3473  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3448:3476  Details[to].depositTokens*25 */\n      tag_99\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_99:\n        /* \"contracts/Staking/StakingFinal.sol\":3447:3482  (Details[to].depositTokens*25)/1000 */\n      tag_100\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n        /* \"contracts/Staking/StakingFinal.sol\":3431:3482  uint AdminFee = (Details[to].depositTokens*25)/1000 */\n      swap1\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3492:3517  uint OwnerRemainingTokens */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3548:3556  AdminFee */\n      dup2\n        /* \"contracts/Staking/StakingFinal.sol\":3520:3527  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3520:3531  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3528:3530  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3520:3531  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3520:3545  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3520:3556  Details[to].depositTokens - AdminFee */\n      tag_102\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n        /* \"contracts/Staking/StakingFinal.sol\":3492:3556  uint OwnerRemainingTokens = Details[to].depositTokens - AdminFee */\n      swap1\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3595:3596  3 */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3569:3576  Details */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":3569:3580  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3577:3579  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3569:3580  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3569:3591  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3569:3596  Details[to].StakeMonth == 3 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3566:3903  if(Details[to].StakeMonth == 3){... */\n      tag_104\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3660:3663  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":3656:3658  20 */\n      0x14\n        /* \"contracts/Staking/StakingFinal.sol\":3630:3637  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3630:3641  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3638:3640  to */\n      dup10\n        /* \"contracts/Staking/StakingFinal.sol\":3630:3641  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3630:3655  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3630:3658  Details[to].depositTokens*20 */\n      tag_105\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_105:\n        /* \"contracts/Staking/StakingFinal.sol\":3629:3663  (Details[to].depositTokens*20)/100 */\n      tag_106\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_106:\n        /* \"contracts/Staking/StakingFinal.sol\":3611:3663  InterestAmount =  (Details[to].depositTokens*20)/100 */\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3566:3903  if(Details[to].StakeMonth == 3){... */\n      jump(tag_107)\n    tag_104:\n        /* \"contracts/Staking/StakingFinal.sol\":3708:3709  6 */\n      0x06\n        /* \"contracts/Staking/StakingFinal.sol\":3682:3689  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3682:3693  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3690:3692  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3682:3693  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3682:3704  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3682:3709  Details[to].StakeMonth == 6 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3679:3903  if(Details[to].StakeMonth == 6){... */\n      tag_108\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3774:3778  1000 */\n      0x03e8\n        /* \"contracts/Staking/StakingFinal.sol\":3769:3772  225 */\n      0xe1\n        /* \"contracts/Staking/StakingFinal.sol\":3743:3750  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3743:3754  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3751:3753  to */\n      dup10\n        /* \"contracts/Staking/StakingFinal.sol\":3743:3754  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3743:3768  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3743:3772  Details[to].depositTokens*225 */\n      tag_109\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_109:\n        /* \"contracts/Staking/StakingFinal.sol\":3742:3778  (Details[to].depositTokens*225)/1000 */\n      tag_110\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_110:\n        /* \"contracts/Staking/StakingFinal.sol\":3724:3778  InterestAmount =  (Details[to].depositTokens*225)/1000 */\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3679:3903  if(Details[to].StakeMonth == 6){... */\n      jump(tag_111)\n    tag_108:\n        /* \"contracts/Staking/StakingFinal.sol\":3823:3825  12 */\n      0x0c\n        /* \"contracts/Staking/StakingFinal.sol\":3797:3804  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3797:3808  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3805:3807  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3797:3808  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3797:3819  Details[to].StakeMonth */\n      0x02\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3797:3825  Details[to].StakeMonth == 12 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3794:3903  if(Details[to].StakeMonth == 12){... */\n      tag_112\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3889:3892  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":3885:3887  25 */\n      0x19\n        /* \"contracts/Staking/StakingFinal.sol\":3859:3866  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3859:3870  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3867:3869  to */\n      dup10\n        /* \"contracts/Staking/StakingFinal.sol\":3859:3870  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3859:3884  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3859:3887  Details[to].depositTokens*25 */\n      tag_113\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_113:\n        /* \"contracts/Staking/StakingFinal.sol\":3858:3892  (Details[to].depositTokens*25)/100 */\n      tag_114\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_114:\n        /* \"contracts/Staking/StakingFinal.sol\":3840:3892  InterestAmount =  (Details[to].depositTokens*25)/100 */\n      swap5\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3794:3903  if(Details[to].StakeMonth == 12){... */\n    tag_112:\n        /* \"contracts/Staking/StakingFinal.sol\":3679:3903  if(Details[to].StakeMonth == 6){... */\n    tag_111:\n        /* \"contracts/Staking/StakingFinal.sol\":3566:3903  if(Details[to].StakeMonth == 3){... */\n    tag_107:\n        /* \"contracts/Staking/StakingFinal.sol\":3945:3948  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":3915:3922  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":3915:3926  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":3923:3925  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":3915:3926  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":3915:3941  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":3915:3948  Details[to].EarnPersentage == 100 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":3912:4704  if(Details[to].EarnPersentage == 100){... */\n      tag_115\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":3970:3982  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":3963:3992  IERC20(ERC20Address).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":3993:3995  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4020:4034  InterestAmount */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":3997:4017  OwnerRemainingTokens */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":3997:4034  OwnerRemainingTokens + InterestAmount */\n      tag_116\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_116:\n        /* \"contracts/Staking/StakingFinal.sol\":3963:4035  IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + InterestAmount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_117\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_121\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_121:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3912:4704  if(Details[to].EarnPersentage == 100){... */\n      jump(tag_123)\n    tag_115:\n        /* \"contracts/Staking/StakingFinal.sol\":4084:4086  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":4054:4061  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4054:4065  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4062:4064  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":4054:4065  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4054:4080  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4054:4086  Details[to].EarnPersentage == 75 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":4051:4704  if(Details[to].EarnPersentage == 75){... */\n      tag_124\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":4133:4136  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":4129:4131  75 */\n      0x4b\n        /* \"contracts/Staking/StakingFinal.sol\":4114:4128  InterestAmount */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4114:4131  InterestAmount*75 */\n      tag_125\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_125:\n        /* \"contracts/Staking/StakingFinal.sol\":4113:4136  (InterestAmount*75)/100 */\n      tag_126\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_126:\n        /* \"contracts/Staking/StakingFinal.sol\":4101:4136  EarnToken = (InterestAmount*75)/100 */\n      swap4\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4157:4169  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4150:4179  IERC20(ERC20Address).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":4180:4182  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4207:4216  EarnToken */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4184:4204  OwnerRemainingTokens */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":4184:4216  OwnerRemainingTokens + EarnToken */\n      tag_127\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_127:\n        /* \"contracts/Staking/StakingFinal.sol\":4150:4217  IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + EarnToken) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_128:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_130\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_130:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_131\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_131:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4263:4266  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":4259:4261  25 */\n      0x19\n        /* \"contracts/Staking/StakingFinal.sol\":4244:4258  InterestAmount */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4244:4261  InterestAmount*25 */\n      tag_132\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_132:\n        /* \"contracts/Staking/StakingFinal.sol\":4243:4266  (InterestAmount*25)/100 */\n      tag_133\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_133:\n        /* \"contracts/Staking/StakingFinal.sol\":4231:4266  BurnToken = (InterestAmount*25)/100 */\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4287:4299  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4280:4309  IERC20(ERC20Address).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":4310:4352  0x000000000000000000000000000000000000dEaD */\n      0xdead\n        /* \"contracts/Staking/StakingFinal.sol\":4354:4363  BurnToken */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4280:4364  IERC20(ERC20Address).transfer(0x000000000000000000000000000000000000dEaD, BurnToken) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_134\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_134:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_136\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_136:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_137\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_137:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4051:4704  if(Details[to].EarnPersentage == 75){... */\n      jump(tag_138)\n    tag_124:\n        /* \"contracts/Staking/StakingFinal.sol\":4413:4415  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":4383:4390  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4383:4394  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4391:4393  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":4383:4394  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4383:4409  Details[to].EarnPersentage */\n      0x03\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4383:4415  Details[to].EarnPersentage == 50 */\n      sub\n        /* \"contracts/Staking/StakingFinal.sol\":4380:4704  if(Details[to].EarnPersentage == 50){... */\n      tag_139\n      jumpi\n        /* \"contracts/Staking/StakingFinal.sol\":4462:4465  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":4458:4460  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":4443:4457  InterestAmount */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4443:4460  InterestAmount*50 */\n      tag_140\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_140:\n        /* \"contracts/Staking/StakingFinal.sol\":4442:4465  (InterestAmount*50)/100 */\n      tag_141\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_141:\n        /* \"contracts/Staking/StakingFinal.sol\":4430:4465  EarnToken = (InterestAmount*50)/100 */\n      swap4\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4486:4498  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4479:4508  IERC20(ERC20Address).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":4509:4511  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4536:4545  EarnToken */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4513:4533  OwnerRemainingTokens */\n      dup5\n        /* \"contracts/Staking/StakingFinal.sol\":4513:4545  OwnerRemainingTokens + EarnToken */\n      tag_142\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_142:\n        /* \"contracts/Staking/StakingFinal.sol\":4479:4546  IERC20(ERC20Address).transfer(to, OwnerRemainingTokens + EarnToken) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_143:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_145\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_145:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_146\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_146:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4592:4595  100 */\n      0x64\n        /* \"contracts/Staking/StakingFinal.sol\":4588:4590  50 */\n      0x32\n        /* \"contracts/Staking/StakingFinal.sol\":4573:4587  InterestAmount */\n      dup7\n        /* \"contracts/Staking/StakingFinal.sol\":4573:4590  InterestAmount*50 */\n      tag_147\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_147:\n        /* \"contracts/Staking/StakingFinal.sol\":4572:4595  (InterestAmount*50)/100 */\n      tag_148\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_148:\n        /* \"contracts/Staking/StakingFinal.sol\":4560:4595  BurnToken = (InterestAmount*50)/100 */\n      swap3\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4616:4628  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":4609:4638  IERC20(ERC20Address).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Staking/StakingFinal.sol\":4639:4681  0x000000000000000000000000000000000000dEaD */\n      0xdead\n        /* \"contracts/Staking/StakingFinal.sol\":4683:4692  BurnToken */\n      dup6\n        /* \"contracts/Staking/StakingFinal.sol\":4609:4693  IERC20(ERC20Address).transfer(0x000000000000000000000000000000000000dEaD, BurnToken) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_149\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_149:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_151\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_151:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_152\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_152:\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4380:4704  if(Details[to].EarnPersentage == 50){... */\n    tag_139:\n        /* \"contracts/Staking/StakingFinal.sol\":4051:4704  if(Details[to].EarnPersentage == 75){... */\n    tag_138:\n        /* \"contracts/Staking/StakingFinal.sol\":3912:4704  if(Details[to].EarnPersentage == 100){... */\n    tag_123:\n        /* \"contracts/Staking/StakingFinal.sol\":4733:4738  false */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4713:4720  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4713:4724  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4721:4723  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":4713:4724  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4713:4730  Details[to].check */\n      0x04\n      add\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4713:4738  Details[to].check = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4762:4769  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4762:4773  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4770:4772  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4762:4773  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4762:4787  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4748:4754  Tokens */\n      0x04\n        /* \"contracts/Staking/StakingFinal.sol\":4748:4758  Tokens[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4755:4757  to */\n      dup9\n        /* \"contracts/Staking/StakingFinal.sol\":4748:4758  Tokens[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4748:4787  Tokens[to] -= Details[to].depositTokens */\n      dup3\n      dup3\n      sload\n      tag_153\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_153:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":4818:4825  Details */\n      0x03\n        /* \"contracts/Staking/StakingFinal.sol\":4818:4829  Details[to] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4826:4828  to */\n      dup8\n        /* \"contracts/Staking/StakingFinal.sol\":4818:4829  Details[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking/StakingFinal.sol\":4818:4843  Details[to].depositTokens */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking/StakingFinal.sol\":4797:4814  totalStakedTokens */\n      0x02\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":4797:4843  totalStakedTokens -= Details[to].depositTokens */\n      dup3\n      dup3\n      sload\n      tag_154\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_154:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3174:4859  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":3131:4859  function WithdrawTokens(address to) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":351:378  address public ERC20Address */\n    tag_38:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":1590:1755  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_43:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_156\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_82\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_156:\n        /* \"contracts/Staking/StakingFinal.sol\":1679:1685  amount */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":1657:1663  Tokens */\n      0x04\n        /* \"contracts/Staking/StakingFinal.sol\":1657:1675  Tokens[msg.sender] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":1664:1674  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1657:1675  Tokens[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":1657:1685  Tokens[msg.sender] -= amount */\n      dup3\n      dup3\n      sload\n      tag_158\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_158:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":1695:1748  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      tag_159\n        /* \"contracts/Staking/StakingFinal.sol\":1729:1739  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1741:1747  amount */\n      dup3\n        /* \"contracts/Staking/StakingFinal.sol\":1702:1714  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":1695:1728  IERC20(ERC20Address).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_160\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":1695:1748  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_159:\n        /* \"contracts/Staking/StakingFinal.sol\":1590:1755  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":1217:1398  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_46:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_162\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_82\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_162:\n        /* \"contracts/Staking/StakingFinal.sol\":1301:1308  _amount */\n      dup1\n        /* \"contracts/Staking/StakingFinal.sol\":1280:1286  Tokens */\n      0x04\n        /* \"contracts/Staking/StakingFinal.sol\":1280:1298  Tokens[msg.sender] */\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":1287:1297  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1280:1298  Tokens[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Staking/StakingFinal.sol\":1280:1308  Tokens[msg.sender] +=_amount */\n      dup3\n      dup3\n      sload\n      tag_164\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_164:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking/StakingFinal.sol\":1318:1391  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      tag_165\n        /* \"contracts/Staking/StakingFinal.sol\":1356:1366  msg.sender */\n      caller\n        /* \"contracts/Staking/StakingFinal.sol\":1376:1380  this */\n      address\n        /* \"contracts/Staking/StakingFinal.sol\":1383:1390  _amount */\n      dup4\n        /* \"contracts/Staking/StakingFinal.sol\":1325:1337  ERC20Address */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking/StakingFinal.sol\":1318:1355  IERC20(ERC20Address).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_75\n      swap1\n        /* \"contracts/Staking/StakingFinal.sol\":1318:1391  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_165:\n        /* \"contracts/Staking/StakingFinal.sol\":1217:1398  function AdminAddToken(uint _amount) public onlyOwner{... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking/StakingFinal.sol\":584:626  mapping (address => Staker) public Details */\n    tag_49:\n      mstore(0x20, 0x03)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      sload\n      swap1\n      dup1\n      0x01\n      add\n      sload\n      swap1\n      dup1\n      0x02\n      add\n      sload\n      swap1\n      dup1\n      0x03\n      add\n      sload\n      swap1\n      dup1\n      0x04\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      swap1\n      pop\n      dup6\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_82\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_170\n      swap1\n      tag_171\n      jump\t// in\n    tag_170:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_169:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_172\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_85\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_172:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_75:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_174\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1191:1195  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1197:1199  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1201:1206  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_175\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_174:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_82:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_179\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_180\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_179:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_181\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_31\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_181:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_183\n      swap1\n      tag_184\n      jump\t// in\n    tag_183:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_85:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_160:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_187\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":950:952  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":954:959  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_188\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_188:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:894  _callOptionalReturn */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_187:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_190\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_191\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4295:4296  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4285  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      iszero\n      tag_192\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_193\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_194\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_195\n      swap1\n      tag_196\n      jump\t// in\n    tag_195:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_194:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n    tag_192:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3817:4453  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_180:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_191:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_199\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_200\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_199:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_200:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_202\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_203\n      swap1\n      tag_204\n      jump\t// in\n    tag_203:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_202:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_205\n      swap2\n      swap1\n      tag_206\n      jump\t// in\n    tag_205:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_209\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_208)\n    tag_209:\n      0x60\n      swap2\n      pop\n    tag_208:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_210\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_211\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_210:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_211:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_213\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_214\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7934  isContract(target) */\n      tag_215\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7927:7933  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7926  isContract */\n      tag_216\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7934  isContract(target) */\n      jump\t// in\n    tag_215:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_217\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_218\n      swap1\n      tag_219\n      jump\t// in\n    tag_218:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_217:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n    tag_214:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      swap1\n      pop\n      jump(tag_212)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_213:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_221\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8051  _revert */\n      tag_222\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_212:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_216:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8616:9156  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8795:8796  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8785  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      iszero\n      tag_225\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_225:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_227\n      swap2\n      swap1\n      tag_228\n      jump\t// in\n    tag_227:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":88:205   */\n    tag_230:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_232:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_233:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_281\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_232\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_234:\n        /* \"#utility.yul\":641:665   */\n      tag_283\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_233\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_284\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_284:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_235:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_286\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_234\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:1170   */\n    tag_17:\n        /* \"#utility.yul\":900:906   */\n      0x00\n        /* \"#utility.yul\":949:951   */\n      0x20\n        /* \"#utility.yul\":937:946   */\n      dup3\n        /* \"#utility.yul\":928:935   */\n      dup5\n        /* \"#utility.yul\":924:947   */\n      sub\n        /* \"#utility.yul\":920:952   */\n      slt\n        /* \"#utility.yul\":917:1036   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":955:1034   */\n      tag_289\n      tag_230\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":917:1036   */\n    tag_288:\n        /* \"#utility.yul\":1075:1076   */\n      0x00\n        /* \"#utility.yul\":1100:1153   */\n      tag_290\n        /* \"#utility.yul\":1145:1152   */\n      dup5\n        /* \"#utility.yul\":1136:1142   */\n      dup3\n        /* \"#utility.yul\":1125:1134   */\n      dup6\n        /* \"#utility.yul\":1121:1143   */\n      add\n        /* \"#utility.yul\":1100:1153   */\n      tag_235\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":1090:1153   */\n      swap2\n      pop\n        /* \"#utility.yul\":1046:1163   */\n      pop\n        /* \"#utility.yul\":841:1170   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1176:1253   */\n    tag_236:\n        /* \"#utility.yul\":1213:1220   */\n      0x00\n        /* \"#utility.yul\":1242:1247   */\n      dup2\n        /* \"#utility.yul\":1231:1247   */\n      swap1\n      pop\n        /* \"#utility.yul\":1176:1253   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1259:1377   */\n    tag_237:\n        /* \"#utility.yul\":1346:1370   */\n      tag_293\n        /* \"#utility.yul\":1364:1369   */\n      dup2\n        /* \"#utility.yul\":1346:1370   */\n      tag_236\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":1341:1344   */\n      dup3\n        /* \"#utility.yul\":1334:1371   */\n      mstore\n        /* \"#utility.yul\":1259:1377   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1383:1605   */\n    tag_20:\n        /* \"#utility.yul\":1476:1480   */\n      0x00\n        /* \"#utility.yul\":1514:1516   */\n      0x20\n        /* \"#utility.yul\":1503:1512   */\n      dup3\n        /* \"#utility.yul\":1499:1517   */\n      add\n        /* \"#utility.yul\":1491:1517   */\n      swap1\n      pop\n        /* \"#utility.yul\":1527:1598   */\n      tag_295\n        /* \"#utility.yul\":1595:1596   */\n      0x00\n        /* \"#utility.yul\":1584:1593   */\n      dup4\n        /* \"#utility.yul\":1580:1597   */\n      add\n        /* \"#utility.yul\":1571:1577   */\n      dup5\n        /* \"#utility.yul\":1527:1598   */\n      tag_237\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":1383:1605   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1611:1733   */\n    tag_238:\n        /* \"#utility.yul\":1684:1708   */\n      tag_297\n        /* \"#utility.yul\":1702:1707   */\n      dup2\n        /* \"#utility.yul\":1684:1708   */\n      tag_236\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":1677:1682   */\n      dup2\n        /* \"#utility.yul\":1674:1709   */\n      eq\n        /* \"#utility.yul\":1664:1727   */\n      tag_298\n      jumpi\n        /* \"#utility.yul\":1723:1724   */\n      0x00\n        /* \"#utility.yul\":1720:1721   */\n      dup1\n        /* \"#utility.yul\":1713:1725   */\n      revert\n        /* \"#utility.yul\":1664:1727   */\n    tag_298:\n        /* \"#utility.yul\":1611:1733   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1739:1878   */\n    tag_239:\n        /* \"#utility.yul\":1785:1790   */\n      0x00\n        /* \"#utility.yul\":1823:1829   */\n      dup2\n        /* \"#utility.yul\":1810:1830   */\n      calldataload\n        /* \"#utility.yul\":1801:1830   */\n      swap1\n      pop\n        /* \"#utility.yul\":1839:1872   */\n      tag_300\n        /* \"#utility.yul\":1866:1871   */\n      dup2\n        /* \"#utility.yul\":1839:1872   */\n      tag_238\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":1739:1878   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1884:2649   */\n    tag_23:\n        /* \"#utility.yul\":1970:1976   */\n      0x00\n        /* \"#utility.yul\":1978:1984   */\n      dup1\n        /* \"#utility.yul\":1986:1992   */\n      0x00\n        /* \"#utility.yul\":1994:2000   */\n      dup1\n        /* \"#utility.yul\":2043:2046   */\n      0x80\n        /* \"#utility.yul\":2031:2040   */\n      dup6\n        /* \"#utility.yul\":2022:2029   */\n      dup8\n        /* \"#utility.yul\":2018:2041   */\n      sub\n        /* \"#utility.yul\":2014:2047   */\n      slt\n        /* \"#utility.yul\":2011:2131   */\n      iszero\n      tag_302\n      jumpi\n        /* \"#utility.yul\":2050:2129   */\n      tag_303\n      tag_230\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":2011:2131   */\n    tag_302:\n        /* \"#utility.yul\":2170:2171   */\n      0x00\n        /* \"#utility.yul\":2195:2248   */\n      tag_304\n        /* \"#utility.yul\":2240:2247   */\n      dup8\n        /* \"#utility.yul\":2231:2237   */\n      dup3\n        /* \"#utility.yul\":2220:2229   */\n      dup9\n        /* \"#utility.yul\":2216:2238   */\n      add\n        /* \"#utility.yul\":2195:2248   */\n      tag_235\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":2185:2248   */\n      swap5\n      pop\n        /* \"#utility.yul\":2141:2258   */\n      pop\n        /* \"#utility.yul\":2297:2299   */\n      0x20\n        /* \"#utility.yul\":2323:2376   */\n      tag_305\n        /* \"#utility.yul\":2368:2375   */\n      dup8\n        /* \"#utility.yul\":2359:2365   */\n      dup3\n        /* \"#utility.yul\":2348:2357   */\n      dup9\n        /* \"#utility.yul\":2344:2366   */\n      add\n        /* \"#utility.yul\":2323:2376   */\n      tag_239\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":2313:2376   */\n      swap4\n      pop\n        /* \"#utility.yul\":2268:2386   */\n      pop\n        /* \"#utility.yul\":2425:2427   */\n      0x40\n        /* \"#utility.yul\":2451:2504   */\n      tag_306\n        /* \"#utility.yul\":2496:2503   */\n      dup8\n        /* \"#utility.yul\":2487:2493   */\n      dup3\n        /* \"#utility.yul\":2476:2485   */\n      dup9\n        /* \"#utility.yul\":2472:2494   */\n      add\n        /* \"#utility.yul\":2451:2504   */\n      tag_239\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":2441:2504   */\n      swap3\n      pop\n        /* \"#utility.yul\":2396:2514   */\n      pop\n        /* \"#utility.yul\":2553:2555   */\n      0x60\n        /* \"#utility.yul\":2579:2632   */\n      tag_307\n        /* \"#utility.yul\":2624:2631   */\n      dup8\n        /* \"#utility.yul\":2615:2621   */\n      dup3\n        /* \"#utility.yul\":2604:2613   */\n      dup9\n        /* \"#utility.yul\":2600:2622   */\n      add\n        /* \"#utility.yul\":2579:2632   */\n      tag_239\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":2569:2632   */\n      swap2\n      pop\n        /* \"#utility.yul\":2524:2642   */\n      pop\n        /* \"#utility.yul\":1884:2649   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2655:2773   */\n    tag_240:\n        /* \"#utility.yul\":2742:2766   */\n      tag_309\n        /* \"#utility.yul\":2760:2765   */\n      dup2\n        /* \"#utility.yul\":2742:2766   */\n      tag_233\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":2737:2740   */\n      dup3\n        /* \"#utility.yul\":2730:2767   */\n      mstore\n        /* \"#utility.yul\":2655:2773   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2779:3001   */\n    tag_33:\n        /* \"#utility.yul\":2872:2876   */\n      0x00\n        /* \"#utility.yul\":2910:2912   */\n      0x20\n        /* \"#utility.yul\":2899:2908   */\n      dup3\n        /* \"#utility.yul\":2895:2913   */\n      add\n        /* \"#utility.yul\":2887:2913   */\n      swap1\n      pop\n        /* \"#utility.yul\":2923:2994   */\n      tag_311\n        /* \"#utility.yul\":2991:2992   */\n      0x00\n        /* \"#utility.yul\":2980:2989   */\n      dup4\n        /* \"#utility.yul\":2976:2993   */\n      add\n        /* \"#utility.yul\":2967:2973   */\n      dup5\n        /* \"#utility.yul\":2923:2994   */\n      tag_240\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":2779:3001   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3007:3336   */\n    tag_42:\n        /* \"#utility.yul\":3066:3072   */\n      0x00\n        /* \"#utility.yul\":3115:3117   */\n      0x20\n        /* \"#utility.yul\":3103:3112   */\n      dup3\n        /* \"#utility.yul\":3094:3101   */\n      dup5\n        /* \"#utility.yul\":3090:3113   */\n      sub\n        /* \"#utility.yul\":3086:3118   */\n      slt\n        /* \"#utility.yul\":3083:3202   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":3121:3200   */\n      tag_314\n      tag_230\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":3083:3202   */\n    tag_313:\n        /* \"#utility.yul\":3241:3242   */\n      0x00\n        /* \"#utility.yul\":3266:3319   */\n      tag_315\n        /* \"#utility.yul\":3311:3318   */\n      dup5\n        /* \"#utility.yul\":3302:3308   */\n      dup3\n        /* \"#utility.yul\":3291:3300   */\n      dup6\n        /* \"#utility.yul\":3287:3309   */\n      add\n        /* \"#utility.yul\":3266:3319   */\n      tag_239\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":3256:3319   */\n      swap2\n      pop\n        /* \"#utility.yul\":3212:3329   */\n      pop\n        /* \"#utility.yul\":3007:3336   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3342:3432   */\n    tag_241:\n        /* \"#utility.yul\":3376:3383   */\n      0x00\n        /* \"#utility.yul\":3419:3424   */\n      dup2\n        /* \"#utility.yul\":3412:3425   */\n      iszero\n        /* \"#utility.yul\":3405:3426   */\n      iszero\n        /* \"#utility.yul\":3394:3426   */\n      swap1\n      pop\n        /* \"#utility.yul\":3342:3432   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3438:3547   */\n    tag_242:\n        /* \"#utility.yul\":3519:3540   */\n      tag_318\n        /* \"#utility.yul\":3534:3539   */\n      dup2\n        /* \"#utility.yul\":3519:3540   */\n      tag_241\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":3514:3517   */\n      dup3\n        /* \"#utility.yul\":3507:3541   */\n      mstore\n        /* \"#utility.yul\":3438:3547   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3553:4205   */\n    tag_51:\n        /* \"#utility.yul\":3752:3756   */\n      0x00\n        /* \"#utility.yul\":3790:3793   */\n      0xa0\n        /* \"#utility.yul\":3779:3788   */\n      dup3\n        /* \"#utility.yul\":3775:3794   */\n      add\n        /* \"#utility.yul\":3767:3794   */\n      swap1\n      pop\n        /* \"#utility.yul\":3804:3875   */\n      tag_320\n        /* \"#utility.yul\":3872:3873   */\n      0x00\n        /* \"#utility.yul\":3861:3870   */\n      dup4\n        /* \"#utility.yul\":3857:3874   */\n      add\n        /* \"#utility.yul\":3848:3854   */\n      dup9\n        /* \"#utility.yul\":3804:3875   */\n      tag_237\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":3885:3957   */\n      tag_321\n        /* \"#utility.yul\":3953:3955   */\n      0x20\n        /* \"#utility.yul\":3942:3951   */\n      dup4\n        /* \"#utility.yul\":3938:3956   */\n      add\n        /* \"#utility.yul\":3929:3935   */\n      dup8\n        /* \"#utility.yul\":3885:3957   */\n      tag_237\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":3967:4039   */\n      tag_322\n        /* \"#utility.yul\":4035:4037   */\n      0x40\n        /* \"#utility.yul\":4024:4033   */\n      dup4\n        /* \"#utility.yul\":4020:4038   */\n      add\n        /* \"#utility.yul\":4011:4017   */\n      dup7\n        /* \"#utility.yul\":3967:4039   */\n      tag_237\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":4049:4121   */\n      tag_323\n        /* \"#utility.yul\":4117:4119   */\n      0x60\n        /* \"#utility.yul\":4106:4115   */\n      dup4\n        /* \"#utility.yul\":4102:4120   */\n      add\n        /* \"#utility.yul\":4093:4099   */\n      dup6\n        /* \"#utility.yul\":4049:4121   */\n      tag_237\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":4131:4198   */\n      tag_324\n        /* \"#utility.yul\":4193:4196   */\n      0x80\n        /* \"#utility.yul\":4182:4191   */\n      dup4\n        /* \"#utility.yul\":4178:4197   */\n      add\n        /* \"#utility.yul\":4169:4175   */\n      dup5\n        /* \"#utility.yul\":4131:4198   */\n      tag_242\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":3553:4205   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4211:4391   */\n    tag_243:\n        /* \"#utility.yul\":4259:4336   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4256:4257   */\n      0x00\n        /* \"#utility.yul\":4249:4337   */\n      mstore\n        /* \"#utility.yul\":4356:4360   */\n      0x11\n        /* \"#utility.yul\":4353:4354   */\n      0x04\n        /* \"#utility.yul\":4346:4361   */\n      mstore\n        /* \"#utility.yul\":4380:4384   */\n      0x24\n        /* \"#utility.yul\":4377:4378   */\n      0x00\n        /* \"#utility.yul\":4370:4385   */\n      revert\n        /* \"#utility.yul\":4397:4807   */\n    tag_58:\n        /* \"#utility.yul\":4437:4444   */\n      0x00\n        /* \"#utility.yul\":4460:4480   */\n      tag_327\n        /* \"#utility.yul\":4478:4479   */\n      dup3\n        /* \"#utility.yul\":4460:4480   */\n      tag_236\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":4455:4480   */\n      swap2\n      pop\n        /* \"#utility.yul\":4494:4514   */\n      tag_328\n        /* \"#utility.yul\":4512:4513   */\n      dup4\n        /* \"#utility.yul\":4494:4514   */\n      tag_236\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":4489:4514   */\n      swap3\n      pop\n        /* \"#utility.yul\":4549:4550   */\n      dup3\n        /* \"#utility.yul\":4546:4547   */\n      dup3\n        /* \"#utility.yul\":4542:4551   */\n      mul\n        /* \"#utility.yul\":4571:4601   */\n      tag_329\n        /* \"#utility.yul\":4589:4600   */\n      dup2\n        /* \"#utility.yul\":4571:4601   */\n      tag_236\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":4560:4601   */\n      swap2\n      pop\n        /* \"#utility.yul\":4750:4751   */\n      dup3\n        /* \"#utility.yul\":4741:4748   */\n      dup3\n        /* \"#utility.yul\":4737:4752   */\n      div\n        /* \"#utility.yul\":4734:4735   */\n      dup5\n        /* \"#utility.yul\":4731:4753   */\n      eq\n        /* \"#utility.yul\":4711:4712   */\n      dup4\n        /* \"#utility.yul\":4704:4713   */\n      iszero\n        /* \"#utility.yul\":4684:4767   */\n      or\n        /* \"#utility.yul\":4661:4800   */\n      tag_330\n      jumpi\n        /* \"#utility.yul\":4780:4798   */\n      tag_331\n      tag_243\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":4661:4800   */\n    tag_330:\n        /* \"#utility.yul\":4445:4807   */\n      pop\n        /* \"#utility.yul\":4397:4807   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4813:5004   */\n    tag_63:\n        /* \"#utility.yul\":4853:4856   */\n      0x00\n        /* \"#utility.yul\":4872:4892   */\n      tag_333\n        /* \"#utility.yul\":4890:4891   */\n      dup3\n        /* \"#utility.yul\":4872:4892   */\n      tag_236\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":4867:4892   */\n      swap2\n      pop\n        /* \"#utility.yul\":4906:4926   */\n      tag_334\n        /* \"#utility.yul\":4924:4925   */\n      dup4\n        /* \"#utility.yul\":4906:4926   */\n      tag_236\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":4901:4926   */\n      swap3\n      pop\n        /* \"#utility.yul\":4949:4950   */\n      dup3\n        /* \"#utility.yul\":4946:4947   */\n      dup3\n        /* \"#utility.yul\":4942:4951   */\n      add\n        /* \"#utility.yul\":4935:4951   */\n      swap1\n      pop\n        /* \"#utility.yul\":4970:4973   */\n      dup1\n        /* \"#utility.yul\":4967:4968   */\n      dup3\n        /* \"#utility.yul\":4964:4974   */\n      gt\n        /* \"#utility.yul\":4961:4997   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":4977:4995   */\n      tag_336\n      tag_243\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":4961:4997   */\n    tag_335:\n        /* \"#utility.yul\":4813:5004   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5010:5179   */\n    tag_244:\n        /* \"#utility.yul\":5094:5105   */\n      0x00\n        /* \"#utility.yul\":5128:5134   */\n      dup3\n        /* \"#utility.yul\":5123:5126   */\n      dup3\n        /* \"#utility.yul\":5116:5135   */\n      mstore\n        /* \"#utility.yul\":5168:5172   */\n      0x20\n        /* \"#utility.yul\":5163:5166   */\n      dup3\n        /* \"#utility.yul\":5159:5173   */\n      add\n        /* \"#utility.yul\":5144:5173   */\n      swap1\n      pop\n        /* \"#utility.yul\":5010:5179   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5185:5361   */\n    tag_245:\n        /* \"#utility.yul\":5325:5353   */\n      0x596f75722054696d6520506572696f6420436f6d706c6574652e000000000000\n        /* \"#utility.yul\":5321:5322   */\n      0x00\n        /* \"#utility.yul\":5313:5319   */\n      dup3\n        /* \"#utility.yul\":5309:5323   */\n      add\n        /* \"#utility.yul\":5302:5354   */\n      mstore\n        /* \"#utility.yul\":5185:5361   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5367:5733   */\n    tag_246:\n        /* \"#utility.yul\":5509:5512   */\n      0x00\n        /* \"#utility.yul\":5530:5597   */\n      tag_340\n        /* \"#utility.yul\":5594:5596   */\n      0x1a\n        /* \"#utility.yul\":5589:5592   */\n      dup4\n        /* \"#utility.yul\":5530:5597   */\n      tag_244\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":5523:5597   */\n      swap2\n      pop\n        /* \"#utility.yul\":5606:5699   */\n      tag_341\n        /* \"#utility.yul\":5695:5698   */\n      dup3\n        /* \"#utility.yul\":5606:5699   */\n      tag_245\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":5724:5726   */\n      0x20\n        /* \"#utility.yul\":5719:5722   */\n      dup3\n        /* \"#utility.yul\":5715:5727   */\n      add\n        /* \"#utility.yul\":5708:5727   */\n      swap1\n      pop\n        /* \"#utility.yul\":5367:5733   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5739:6158   */\n    tag_66:\n        /* \"#utility.yul\":5905:5909   */\n      0x00\n        /* \"#utility.yul\":5943:5945   */\n      0x20\n        /* \"#utility.yul\":5932:5941   */\n      dup3\n        /* \"#utility.yul\":5928:5946   */\n      add\n        /* \"#utility.yul\":5920:5946   */\n      swap1\n      pop\n        /* \"#utility.yul\":5992:6001   */\n      dup2\n        /* \"#utility.yul\":5986:5990   */\n      dup2\n        /* \"#utility.yul\":5982:6002   */\n      sub\n        /* \"#utility.yul\":5978:5979   */\n      0x00\n        /* \"#utility.yul\":5967:5976   */\n      dup4\n        /* \"#utility.yul\":5963:5980   */\n      add\n        /* \"#utility.yul\":5956:6003   */\n      mstore\n        /* \"#utility.yul\":6020:6151   */\n      tag_343\n        /* \"#utility.yul\":6146:6150   */\n      dup2\n        /* \"#utility.yul\":6020:6151   */\n      tag_246\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":6012:6151   */\n      swap1\n      pop\n        /* \"#utility.yul\":5739:6158   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6164:6336   */\n    tag_247:\n        /* \"#utility.yul\":6304:6328   */\n      0x456e746572205269676874205374616b654d6f6e746800000000000000000000\n        /* \"#utility.yul\":6300:6301   */\n      0x00\n        /* \"#utility.yul\":6292:6298   */\n      dup3\n        /* \"#utility.yul\":6288:6302   */\n      add\n        /* \"#utility.yul\":6281:6329   */\n      mstore\n        /* \"#utility.yul\":6164:6336   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6342:6708   */\n    tag_248:\n        /* \"#utility.yul\":6484:6487   */\n      0x00\n        /* \"#utility.yul\":6505:6572   */\n      tag_346\n        /* \"#utility.yul\":6569:6571   */\n      0x16\n        /* \"#utility.yul\":6564:6567   */\n      dup4\n        /* \"#utility.yul\":6505:6572   */\n      tag_244\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":6498:6572   */\n      swap2\n      pop\n        /* \"#utility.yul\":6581:6674   */\n      tag_347\n        /* \"#utility.yul\":6670:6673   */\n      dup3\n        /* \"#utility.yul\":6581:6674   */\n      tag_247\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":6699:6701   */\n      0x20\n        /* \"#utility.yul\":6694:6697   */\n      dup3\n        /* \"#utility.yul\":6690:6702   */\n      add\n        /* \"#utility.yul\":6683:6702   */\n      swap1\n      pop\n        /* \"#utility.yul\":6342:6708   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6714:7133   */\n    tag_69:\n        /* \"#utility.yul\":6880:6884   */\n      0x00\n        /* \"#utility.yul\":6918:6920   */\n      0x20\n        /* \"#utility.yul\":6907:6916   */\n      dup3\n        /* \"#utility.yul\":6903:6921   */\n      add\n        /* \"#utility.yul\":6895:6921   */\n      swap1\n      pop\n        /* \"#utility.yul\":6967:6976   */\n      dup2\n        /* \"#utility.yul\":6961:6965   */\n      dup2\n        /* \"#utility.yul\":6957:6977   */\n      sub\n        /* \"#utility.yul\":6953:6954   */\n      0x00\n        /* \"#utility.yul\":6942:6951   */\n      dup4\n        /* \"#utility.yul\":6938:6955   */\n      add\n        /* \"#utility.yul\":6931:6978   */\n      mstore\n        /* \"#utility.yul\":6995:7126   */\n      tag_349\n        /* \"#utility.yul\":7121:7125   */\n      dup2\n        /* \"#utility.yul\":6995:7126   */\n      tag_248\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":6987:7126   */\n      swap1\n      pop\n        /* \"#utility.yul\":6714:7133   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7139:7315   */\n    tag_249:\n        /* \"#utility.yul\":7279:7307   */\n      0x456e746572205269676874204561726e50657273656e74616765000000000000\n        /* \"#utility.yul\":7275:7276   */\n      0x00\n        /* \"#utility.yul\":7267:7273   */\n      dup3\n        /* \"#utility.yul\":7263:7277   */\n      add\n        /* \"#utility.yul\":7256:7308   */\n      mstore\n        /* \"#utility.yul\":7139:7315   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7321:7687   */\n    tag_250:\n        /* \"#utility.yul\":7463:7466   */\n      0x00\n        /* \"#utility.yul\":7484:7551   */\n      tag_352\n        /* \"#utility.yul\":7548:7550   */\n      0x1a\n        /* \"#utility.yul\":7543:7546   */\n      dup4\n        /* \"#utility.yul\":7484:7551   */\n      tag_244\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":7477:7551   */\n      swap2\n      pop\n        /* \"#utility.yul\":7560:7653   */\n      tag_353\n        /* \"#utility.yul\":7649:7652   */\n      dup3\n        /* \"#utility.yul\":7560:7653   */\n      tag_249\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":7678:7680   */\n      0x20\n        /* \"#utility.yul\":7673:7676   */\n      dup3\n        /* \"#utility.yul\":7669:7681   */\n      add\n        /* \"#utility.yul\":7662:7681   */\n      swap1\n      pop\n        /* \"#utility.yul\":7321:7687   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7693:8112   */\n    tag_72:\n        /* \"#utility.yul\":7859:7863   */\n      0x00\n        /* \"#utility.yul\":7897:7899   */\n      0x20\n        /* \"#utility.yul\":7886:7895   */\n      dup3\n        /* \"#utility.yul\":7882:7900   */\n      add\n        /* \"#utility.yul\":7874:7900   */\n      swap1\n      pop\n        /* \"#utility.yul\":7946:7955   */\n      dup2\n        /* \"#utility.yul\":7940:7944   */\n      dup2\n        /* \"#utility.yul\":7936:7956   */\n      sub\n        /* \"#utility.yul\":7932:7933   */\n      0x00\n        /* \"#utility.yul\":7921:7930   */\n      dup4\n        /* \"#utility.yul\":7917:7934   */\n      add\n        /* \"#utility.yul\":7910:7957   */\n      mstore\n        /* \"#utility.yul\":7974:8105   */\n      tag_355\n        /* \"#utility.yul\":8100:8104   */\n      dup2\n        /* \"#utility.yul\":7974:8105   */\n      tag_250\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":7966:8105   */\n      swap1\n      pop\n        /* \"#utility.yul\":7693:8112   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8118:8286   */\n    tag_251:\n        /* \"#utility.yul\":8258:8278   */\n      0x4669727374205374616b6520546f6b656e730000000000000000000000000000\n        /* \"#utility.yul\":8254:8255   */\n      0x00\n        /* \"#utility.yul\":8246:8252   */\n      dup3\n        /* \"#utility.yul\":8242:8256   */\n      add\n        /* \"#utility.yul\":8235:8279   */\n      mstore\n        /* \"#utility.yul\":8118:8286   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8292:8658   */\n    tag_252:\n        /* \"#utility.yul\":8434:8437   */\n      0x00\n        /* \"#utility.yul\":8455:8522   */\n      tag_358\n        /* \"#utility.yul\":8519:8521   */\n      0x12\n        /* \"#utility.yul\":8514:8517   */\n      dup4\n        /* \"#utility.yul\":8455:8522   */\n      tag_244\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":8448:8522   */\n      swap2\n      pop\n        /* \"#utility.yul\":8531:8624   */\n      tag_359\n        /* \"#utility.yul\":8620:8623   */\n      dup3\n        /* \"#utility.yul\":8531:8624   */\n      tag_251\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":8649:8651   */\n      0x20\n        /* \"#utility.yul\":8644:8647   */\n      dup3\n        /* \"#utility.yul\":8640:8652   */\n      add\n        /* \"#utility.yul\":8633:8652   */\n      swap1\n      pop\n        /* \"#utility.yul\":8292:8658   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8664:9083   */\n    tag_90:\n        /* \"#utility.yul\":8830:8834   */\n      0x00\n        /* \"#utility.yul\":8868:8870   */\n      0x20\n        /* \"#utility.yul\":8857:8866   */\n      dup3\n        /* \"#utility.yul\":8853:8871   */\n      add\n        /* \"#utility.yul\":8845:8871   */\n      swap1\n      pop\n        /* \"#utility.yul\":8917:8926   */\n      dup2\n        /* \"#utility.yul\":8911:8915   */\n      dup2\n        /* \"#utility.yul\":8907:8927   */\n      sub\n        /* \"#utility.yul\":8903:8904   */\n      0x00\n        /* \"#utility.yul\":8892:8901   */\n      dup4\n        /* \"#utility.yul\":8888:8905   */\n      add\n        /* \"#utility.yul\":8881:8928   */\n      mstore\n        /* \"#utility.yul\":8945:9076   */\n      tag_361\n        /* \"#utility.yul\":9071:9075   */\n      dup2\n        /* \"#utility.yul\":8945:9076   */\n      tag_252\n      jump\t// in\n    tag_361:\n        /* \"#utility.yul\":8937:9076   */\n      swap1\n      pop\n        /* \"#utility.yul\":8664:9083   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9089:9250   */\n    tag_253:\n        /* \"#utility.yul\":9229:9242   */\n      0x506c656173652057616974000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9225:9226   */\n      0x00\n        /* \"#utility.yul\":9217:9223   */\n      dup3\n        /* \"#utility.yul\":9213:9227   */\n      add\n        /* \"#utility.yul\":9206:9243   */\n      mstore\n        /* \"#utility.yul\":9089:9250   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9256:9622   */\n    tag_254:\n        /* \"#utility.yul\":9398:9401   */\n      0x00\n        /* \"#utility.yul\":9419:9486   */\n      tag_364\n        /* \"#utility.yul\":9483:9485   */\n      0x0b\n        /* \"#utility.yul\":9478:9481   */\n      dup4\n        /* \"#utility.yul\":9419:9486   */\n      tag_244\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":9412:9486   */\n      swap2\n      pop\n        /* \"#utility.yul\":9495:9588   */\n      tag_365\n        /* \"#utility.yul\":9584:9587   */\n      dup3\n        /* \"#utility.yul\":9495:9588   */\n      tag_253\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":9613:9615   */\n      0x20\n        /* \"#utility.yul\":9608:9611   */\n      dup3\n        /* \"#utility.yul\":9604:9616   */\n      add\n        /* \"#utility.yul\":9597:9616   */\n      swap1\n      pop\n        /* \"#utility.yul\":9256:9622   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9628:10047   */\n    tag_98:\n        /* \"#utility.yul\":9794:9798   */\n      0x00\n        /* \"#utility.yul\":9832:9834   */\n      0x20\n        /* \"#utility.yul\":9821:9830   */\n      dup3\n        /* \"#utility.yul\":9817:9835   */\n      add\n        /* \"#utility.yul\":9809:9835   */\n      swap1\n      pop\n        /* \"#utility.yul\":9881:9890   */\n      dup2\n        /* \"#utility.yul\":9875:9879   */\n      dup2\n        /* \"#utility.yul\":9871:9891   */\n      sub\n        /* \"#utility.yul\":9867:9868   */\n      0x00\n        /* \"#utility.yul\":9856:9865   */\n      dup4\n        /* \"#utility.yul\":9852:9869   */\n      add\n        /* \"#utility.yul\":9845:9892   */\n      mstore\n        /* \"#utility.yul\":9909:10040   */\n      tag_367\n        /* \"#utility.yul\":10035:10039   */\n      dup2\n        /* \"#utility.yul\":9909:10040   */\n      tag_254\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":9901:10040   */\n      swap1\n      pop\n        /* \"#utility.yul\":9628:10047   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10053:10233   */\n    tag_255:\n        /* \"#utility.yul\":10101:10178   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10098:10099   */\n      0x00\n        /* \"#utility.yul\":10091:10179   */\n      mstore\n        /* \"#utility.yul\":10198:10202   */\n      0x12\n        /* \"#utility.yul\":10195:10196   */\n      0x04\n        /* \"#utility.yul\":10188:10203   */\n      mstore\n        /* \"#utility.yul\":10222:10226   */\n      0x24\n        /* \"#utility.yul\":10219:10220   */\n      0x00\n        /* \"#utility.yul\":10212:10227   */\n      revert\n        /* \"#utility.yul\":10239:10424   */\n    tag_101:\n        /* \"#utility.yul\":10279:10280   */\n      0x00\n        /* \"#utility.yul\":10296:10316   */\n      tag_370\n        /* \"#utility.yul\":10314:10315   */\n      dup3\n        /* \"#utility.yul\":10296:10316   */\n      tag_236\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":10291:10316   */\n      swap2\n      pop\n        /* \"#utility.yul\":10330:10350   */\n      tag_371\n        /* \"#utility.yul\":10348:10349   */\n      dup4\n        /* \"#utility.yul\":10330:10350   */\n      tag_236\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":10325:10350   */\n      swap3\n      pop\n        /* \"#utility.yul\":10369:10370   */\n      dup3\n        /* \"#utility.yul\":10359:10394   */\n      tag_372\n      jumpi\n        /* \"#utility.yul\":10374:10392   */\n      tag_373\n      tag_255\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":10359:10394   */\n    tag_372:\n        /* \"#utility.yul\":10416:10417   */\n      dup3\n        /* \"#utility.yul\":10413:10414   */\n      dup3\n        /* \"#utility.yul\":10409:10418   */\n      div\n        /* \"#utility.yul\":10404:10418   */\n      swap1\n      pop\n        /* \"#utility.yul\":10239:10424   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10430:10624   */\n    tag_103:\n        /* \"#utility.yul\":10470:10474   */\n      0x00\n        /* \"#utility.yul\":10490:10510   */\n      tag_375\n        /* \"#utility.yul\":10508:10509   */\n      dup3\n        /* \"#utility.yul\":10490:10510   */\n      tag_236\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":10485:10510   */\n      swap2\n      pop\n        /* \"#utility.yul\":10524:10544   */\n      tag_376\n        /* \"#utility.yul\":10542:10543   */\n      dup4\n        /* \"#utility.yul\":10524:10544   */\n      tag_236\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":10519:10544   */\n      swap3\n      pop\n        /* \"#utility.yul\":10568:10569   */\n      dup3\n        /* \"#utility.yul\":10565:10566   */\n      dup3\n        /* \"#utility.yul\":10561:10570   */\n      sub\n        /* \"#utility.yul\":10553:10570   */\n      swap1\n      pop\n        /* \"#utility.yul\":10592:10593   */\n      dup2\n        /* \"#utility.yul\":10586:10590   */\n      dup2\n        /* \"#utility.yul\":10583:10594   */\n      gt\n        /* \"#utility.yul\":10580:10617   */\n      iszero\n      tag_377\n      jumpi\n        /* \"#utility.yul\":10597:10615   */\n      tag_378\n      tag_243\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":10580:10617   */\n    tag_377:\n        /* \"#utility.yul\":10430:10624   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10630:10962   */\n    tag_118:\n        /* \"#utility.yul\":10751:10755   */\n      0x00\n        /* \"#utility.yul\":10789:10791   */\n      0x40\n        /* \"#utility.yul\":10778:10787   */\n      dup3\n        /* \"#utility.yul\":10774:10792   */\n      add\n        /* \"#utility.yul\":10766:10792   */\n      swap1\n      pop\n        /* \"#utility.yul\":10802:10873   */\n      tag_380\n        /* \"#utility.yul\":10870:10871   */\n      0x00\n        /* \"#utility.yul\":10859:10868   */\n      dup4\n        /* \"#utility.yul\":10855:10872   */\n      add\n        /* \"#utility.yul\":10846:10852   */\n      dup6\n        /* \"#utility.yul\":10802:10873   */\n      tag_240\n      jump\t// in\n    tag_380:\n        /* \"#utility.yul\":10883:10955   */\n      tag_381\n        /* \"#utility.yul\":10951:10953   */\n      0x20\n        /* \"#utility.yul\":10940:10949   */\n      dup4\n        /* \"#utility.yul\":10936:10954   */\n      add\n        /* \"#utility.yul\":10927:10933   */\n      dup5\n        /* \"#utility.yul\":10883:10955   */\n      tag_237\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":10630:10962   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10968:11084   */\n    tag_256:\n        /* \"#utility.yul\":11038:11059   */\n      tag_383\n        /* \"#utility.yul\":11053:11058   */\n      dup2\n        /* \"#utility.yul\":11038:11059   */\n      tag_241\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":11031:11036   */\n      dup2\n        /* \"#utility.yul\":11028:11060   */\n      eq\n        /* \"#utility.yul\":11018:11078   */\n      tag_384\n      jumpi\n        /* \"#utility.yul\":11074:11075   */\n      0x00\n        /* \"#utility.yul\":11071:11072   */\n      dup1\n        /* \"#utility.yul\":11064:11076   */\n      revert\n        /* \"#utility.yul\":11018:11078   */\n    tag_384:\n        /* \"#utility.yul\":10968:11084   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11090:11227   */\n    tag_257:\n        /* \"#utility.yul\":11144:11149   */\n      0x00\n        /* \"#utility.yul\":11175:11181   */\n      dup2\n        /* \"#utility.yul\":11169:11182   */\n      mload\n        /* \"#utility.yul\":11160:11182   */\n      swap1\n      pop\n        /* \"#utility.yul\":11191:11221   */\n      tag_386\n        /* \"#utility.yul\":11215:11220   */\n      dup2\n        /* \"#utility.yul\":11191:11221   */\n      tag_256\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":11090:11227   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11233:11578   */\n    tag_122:\n        /* \"#utility.yul\":11300:11306   */\n      0x00\n        /* \"#utility.yul\":11349:11351   */\n      0x20\n        /* \"#utility.yul\":11337:11346   */\n      dup3\n        /* \"#utility.yul\":11328:11335   */\n      dup5\n        /* \"#utility.yul\":11324:11347   */\n      sub\n        /* \"#utility.yul\":11320:11352   */\n      slt\n        /* \"#utility.yul\":11317:11436   */\n      iszero\n      tag_388\n      jumpi\n        /* \"#utility.yul\":11355:11434   */\n      tag_389\n      tag_230\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":11317:11436   */\n    tag_388:\n        /* \"#utility.yul\":11475:11476   */\n      0x00\n        /* \"#utility.yul\":11500:11561   */\n      tag_390\n        /* \"#utility.yul\":11553:11560   */\n      dup5\n        /* \"#utility.yul\":11544:11550   */\n      dup3\n        /* \"#utility.yul\":11533:11542   */\n      dup6\n        /* \"#utility.yul\":11529:11551   */\n      add\n        /* \"#utility.yul\":11500:11561   */\n      tag_257\n      jump\t// in\n    tag_390:\n        /* \"#utility.yul\":11490:11561   */\n      swap2\n      pop\n        /* \"#utility.yul\":11446:11571   */\n      pop\n        /* \"#utility.yul\":11233:11578   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11584:11809   */\n    tag_258:\n        /* \"#utility.yul\":11724:11758   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":11720:11721   */\n      0x00\n        /* \"#utility.yul\":11712:11718   */\n      dup3\n        /* \"#utility.yul\":11708:11722   */\n      add\n        /* \"#utility.yul\":11701:11759   */\n      mstore\n        /* \"#utility.yul\":11793:11801   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11788:11790   */\n      0x20\n        /* \"#utility.yul\":11780:11786   */\n      dup3\n        /* \"#utility.yul\":11776:11791   */\n      add\n        /* \"#utility.yul\":11769:11802   */\n      mstore\n        /* \"#utility.yul\":11584:11809   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11815:12181   */\n    tag_259:\n        /* \"#utility.yul\":11957:11960   */\n      0x00\n        /* \"#utility.yul\":11978:12045   */\n      tag_393\n        /* \"#utility.yul\":12042:12044   */\n      0x26\n        /* \"#utility.yul\":12037:12040   */\n      dup4\n        /* \"#utility.yul\":11978:12045   */\n      tag_244\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":11971:12045   */\n      swap2\n      pop\n        /* \"#utility.yul\":12054:12147   */\n      tag_394\n        /* \"#utility.yul\":12143:12146   */\n      dup3\n        /* \"#utility.yul\":12054:12147   */\n      tag_258\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":12172:12174   */\n      0x40\n        /* \"#utility.yul\":12167:12170   */\n      dup3\n        /* \"#utility.yul\":12163:12175   */\n      add\n        /* \"#utility.yul\":12156:12175   */\n      swap1\n      pop\n        /* \"#utility.yul\":11815:12181   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12187:12606   */\n    tag_171:\n        /* \"#utility.yul\":12353:12357   */\n      0x00\n        /* \"#utility.yul\":12391:12393   */\n      0x20\n        /* \"#utility.yul\":12380:12389   */\n      dup3\n        /* \"#utility.yul\":12376:12394   */\n      add\n        /* \"#utility.yul\":12368:12394   */\n      swap1\n      pop\n        /* \"#utility.yul\":12440:12449   */\n      dup2\n        /* \"#utility.yul\":12434:12438   */\n      dup2\n        /* \"#utility.yul\":12430:12450   */\n      sub\n        /* \"#utility.yul\":12426:12427   */\n      0x00\n        /* \"#utility.yul\":12415:12424   */\n      dup4\n        /* \"#utility.yul\":12411:12428   */\n      add\n        /* \"#utility.yul\":12404:12451   */\n      mstore\n        /* \"#utility.yul\":12468:12599   */\n      tag_396\n        /* \"#utility.yul\":12594:12598   */\n      dup2\n        /* \"#utility.yul\":12468:12599   */\n      tag_259\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":12460:12599   */\n      swap1\n      pop\n        /* \"#utility.yul\":12187:12606   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12612:13054   */\n    tag_176:\n        /* \"#utility.yul\":12761:12765   */\n      0x00\n        /* \"#utility.yul\":12799:12801   */\n      0x60\n        /* \"#utility.yul\":12788:12797   */\n      dup3\n        /* \"#utility.yul\":12784:12802   */\n      add\n        /* \"#utility.yul\":12776:12802   */\n      swap1\n      pop\n        /* \"#utility.yul\":12812:12883   */\n      tag_398\n        /* \"#utility.yul\":12880:12881   */\n      0x00\n        /* \"#utility.yul\":12869:12878   */\n      dup4\n        /* \"#utility.yul\":12865:12882   */\n      add\n        /* \"#utility.yul\":12856:12862   */\n      dup7\n        /* \"#utility.yul\":12812:12883   */\n      tag_240\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":12893:12965   */\n      tag_399\n        /* \"#utility.yul\":12961:12963   */\n      0x20\n        /* \"#utility.yul\":12950:12959   */\n      dup4\n        /* \"#utility.yul\":12946:12964   */\n      add\n        /* \"#utility.yul\":12937:12943   */\n      dup6\n        /* \"#utility.yul\":12893:12965   */\n      tag_240\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":12975:13047   */\n      tag_400\n        /* \"#utility.yul\":13043:13045   */\n      0x40\n        /* \"#utility.yul\":13032:13041   */\n      dup4\n        /* \"#utility.yul\":13028:13046   */\n      add\n        /* \"#utility.yul\":13019:13025   */\n      dup5\n        /* \"#utility.yul\":12975:13047   */\n      tag_237\n      jump\t// in\n    tag_400:\n        /* \"#utility.yul\":12612:13054   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13060:13242   */\n    tag_260:\n        /* \"#utility.yul\":13200:13234   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":13196:13197   */\n      0x00\n        /* \"#utility.yul\":13188:13194   */\n      dup3\n        /* \"#utility.yul\":13184:13198   */\n      add\n        /* \"#utility.yul\":13177:13235   */\n      mstore\n        /* \"#utility.yul\":13060:13242   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13248:13614   */\n    tag_261:\n        /* \"#utility.yul\":13390:13393   */\n      0x00\n        /* \"#utility.yul\":13411:13478   */\n      tag_403\n        /* \"#utility.yul\":13475:13477   */\n      0x20\n        /* \"#utility.yul\":13470:13473   */\n      dup4\n        /* \"#utility.yul\":13411:13478   */\n      tag_244\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":13404:13478   */\n      swap2\n      pop\n        /* \"#utility.yul\":13487:13580   */\n      tag_404\n        /* \"#utility.yul\":13576:13579   */\n      dup3\n        /* \"#utility.yul\":13487:13580   */\n      tag_260\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":13605:13607   */\n      0x20\n        /* \"#utility.yul\":13600:13603   */\n      dup3\n        /* \"#utility.yul\":13596:13608   */\n      add\n        /* \"#utility.yul\":13589:13608   */\n      swap1\n      pop\n        /* \"#utility.yul\":13248:13614   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13620:14039   */\n    tag_184:\n        /* \"#utility.yul\":13786:13790   */\n      0x00\n        /* \"#utility.yul\":13824:13826   */\n      0x20\n        /* \"#utility.yul\":13813:13822   */\n      dup3\n        /* \"#utility.yul\":13809:13827   */\n      add\n        /* \"#utility.yul\":13801:13827   */\n      swap1\n      pop\n        /* \"#utility.yul\":13873:13882   */\n      dup2\n        /* \"#utility.yul\":13867:13871   */\n      dup2\n        /* \"#utility.yul\":13863:13883   */\n      sub\n        /* \"#utility.yul\":13859:13860   */\n      0x00\n        /* \"#utility.yul\":13848:13857   */\n      dup4\n        /* \"#utility.yul\":13844:13861   */\n      add\n        /* \"#utility.yul\":13837:13884   */\n      mstore\n        /* \"#utility.yul\":13901:14032   */\n      tag_406\n        /* \"#utility.yul\":14027:14031   */\n      dup2\n        /* \"#utility.yul\":13901:14032   */\n      tag_261\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":13893:14032   */\n      swap1\n      pop\n        /* \"#utility.yul\":13620:14039   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14045:14274   */\n    tag_262:\n        /* \"#utility.yul\":14185:14219   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":14181:14182   */\n      0x00\n        /* \"#utility.yul\":14173:14179   */\n      dup3\n        /* \"#utility.yul\":14169:14183   */\n      add\n        /* \"#utility.yul\":14162:14220   */\n      mstore\n        /* \"#utility.yul\":14254:14266   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":14249:14251   */\n      0x20\n        /* \"#utility.yul\":14241:14247   */\n      dup3\n        /* \"#utility.yul\":14237:14252   */\n      add\n        /* \"#utility.yul\":14230:14267   */\n      mstore\n        /* \"#utility.yul\":14045:14274   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14280:14646   */\n    tag_263:\n        /* \"#utility.yul\":14422:14425   */\n      0x00\n        /* \"#utility.yul\":14443:14510   */\n      tag_409\n        /* \"#utility.yul\":14507:14509   */\n      0x2a\n        /* \"#utility.yul\":14502:14505   */\n      dup4\n        /* \"#utility.yul\":14443:14510   */\n      tag_244\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":14436:14510   */\n      swap2\n      pop\n        /* \"#utility.yul\":14519:14612   */\n      tag_410\n        /* \"#utility.yul\":14608:14611   */\n      dup3\n        /* \"#utility.yul\":14519:14612   */\n      tag_262\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":14637:14639   */\n      0x40\n        /* \"#utility.yul\":14632:14635   */\n      dup3\n        /* \"#utility.yul\":14628:14640   */\n      add\n        /* \"#utility.yul\":14621:14640   */\n      swap1\n      pop\n        /* \"#utility.yul\":14280:14646   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14652:15071   */\n    tag_196:\n        /* \"#utility.yul\":14818:14822   */\n      0x00\n        /* \"#utility.yul\":14856:14858   */\n      0x20\n        /* \"#utility.yul\":14845:14854   */\n      dup3\n        /* \"#utility.yul\":14841:14859   */\n      add\n        /* \"#utility.yul\":14833:14859   */\n      swap1\n      pop\n        /* \"#utility.yul\":14905:14914   */\n      dup2\n        /* \"#utility.yul\":14899:14903   */\n      dup2\n        /* \"#utility.yul\":14895:14915   */\n      sub\n        /* \"#utility.yul\":14891:14892   */\n      0x00\n        /* \"#utility.yul\":14880:14889   */\n      dup4\n        /* \"#utility.yul\":14876:14893   */\n      add\n        /* \"#utility.yul\":14869:14916   */\n      mstore\n        /* \"#utility.yul\":14933:15064   */\n      tag_412\n        /* \"#utility.yul\":15059:15063   */\n      dup2\n        /* \"#utility.yul\":14933:15064   */\n      tag_263\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":14925:15064   */\n      swap1\n      pop\n        /* \"#utility.yul\":14652:15071   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15077:15302   */\n    tag_264:\n        /* \"#utility.yul\":15217:15251   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":15213:15214   */\n      0x00\n        /* \"#utility.yul\":15205:15211   */\n      dup3\n        /* \"#utility.yul\":15201:15215   */\n      add\n        /* \"#utility.yul\":15194:15252   */\n      mstore\n        /* \"#utility.yul\":15286:15294   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15281:15283   */\n      0x20\n        /* \"#utility.yul\":15273:15279   */\n      dup3\n        /* \"#utility.yul\":15269:15284   */\n      add\n        /* \"#utility.yul\":15262:15295   */\n      mstore\n        /* \"#utility.yul\":15077:15302   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15308:15674   */\n    tag_265:\n        /* \"#utility.yul\":15450:15453   */\n      0x00\n        /* \"#utility.yul\":15471:15538   */\n      tag_415\n        /* \"#utility.yul\":15535:15537   */\n      0x26\n        /* \"#utility.yul\":15530:15533   */\n      dup4\n        /* \"#utility.yul\":15471:15538   */\n      tag_244\n      jump\t// in\n    tag_415:\n        /* \"#utility.yul\":15464:15538   */\n      swap2\n      pop\n        /* \"#utility.yul\":15547:15640   */\n      tag_416\n        /* \"#utility.yul\":15636:15639   */\n      dup3\n        /* \"#utility.yul\":15547:15640   */\n      tag_264\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":15665:15667   */\n      0x40\n        /* \"#utility.yul\":15660:15663   */\n      dup3\n        /* \"#utility.yul\":15656:15668   */\n      add\n        /* \"#utility.yul\":15649:15668   */\n      swap1\n      pop\n        /* \"#utility.yul\":15308:15674   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15680:16099   */\n    tag_204:\n        /* \"#utility.yul\":15846:15850   */\n      0x00\n        /* \"#utility.yul\":15884:15886   */\n      0x20\n        /* \"#utility.yul\":15873:15882   */\n      dup3\n        /* \"#utility.yul\":15869:15887   */\n      add\n        /* \"#utility.yul\":15861:15887   */\n      swap1\n      pop\n        /* \"#utility.yul\":15933:15942   */\n      dup2\n        /* \"#utility.yul\":15927:15931   */\n      dup2\n        /* \"#utility.yul\":15923:15943   */\n      sub\n        /* \"#utility.yul\":15919:15920   */\n      0x00\n        /* \"#utility.yul\":15908:15917   */\n      dup4\n        /* \"#utility.yul\":15904:15921   */\n      add\n        /* \"#utility.yul\":15897:15944   */\n      mstore\n        /* \"#utility.yul\":15961:16092   */\n      tag_418\n        /* \"#utility.yul\":16087:16091   */\n      dup2\n        /* \"#utility.yul\":15961:16092   */\n      tag_265\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":15953:16092   */\n      swap1\n      pop\n        /* \"#utility.yul\":15680:16099   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16105:16203   */\n    tag_266:\n        /* \"#utility.yul\":16156:16162   */\n      0x00\n        /* \"#utility.yul\":16190:16195   */\n      dup2\n        /* \"#utility.yul\":16184:16196   */\n      mload\n        /* \"#utility.yul\":16174:16196   */\n      swap1\n      pop\n        /* \"#utility.yul\":16105:16203   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16209:16356   */\n    tag_267:\n        /* \"#utility.yul\":16310:16321   */\n      0x00\n        /* \"#utility.yul\":16347:16350   */\n      dup2\n        /* \"#utility.yul\":16332:16350   */\n      swap1\n      pop\n        /* \"#utility.yul\":16209:16356   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16362:16608   */\n    tag_268:\n        /* \"#utility.yul\":16443:16444   */\n      0x00\n        /* \"#utility.yul\":16453:16566   */\n    tag_422:\n        /* \"#utility.yul\":16467:16473   */\n      dup4\n        /* \"#utility.yul\":16464:16465   */\n      dup2\n        /* \"#utility.yul\":16461:16474   */\n      lt\n        /* \"#utility.yul\":16453:16566   */\n      iszero\n      tag_424\n      jumpi\n        /* \"#utility.yul\":16552:16553   */\n      dup1\n        /* \"#utility.yul\":16547:16550   */\n      dup3\n        /* \"#utility.yul\":16543:16554   */\n      add\n        /* \"#utility.yul\":16537:16555   */\n      mload\n        /* \"#utility.yul\":16533:16534   */\n      dup2\n        /* \"#utility.yul\":16528:16531   */\n      dup5\n        /* \"#utility.yul\":16524:16535   */\n      add\n        /* \"#utility.yul\":16517:16556   */\n      mstore\n        /* \"#utility.yul\":16489:16491   */\n      0x20\n        /* \"#utility.yul\":16486:16487   */\n      dup2\n        /* \"#utility.yul\":16482:16492   */\n      add\n        /* \"#utility.yul\":16477:16492   */\n      swap1\n      pop\n        /* \"#utility.yul\":16453:16566   */\n      jump(tag_422)\n    tag_424:\n        /* \"#utility.yul\":16600:16601   */\n      0x00\n        /* \"#utility.yul\":16591:16597   */\n      dup5\n        /* \"#utility.yul\":16586:16589   */\n      dup5\n        /* \"#utility.yul\":16582:16598   */\n      add\n        /* \"#utility.yul\":16575:16602   */\n      mstore\n        /* \"#utility.yul\":16424:16608   */\n      pop\n        /* \"#utility.yul\":16362:16608   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16614:17000   */\n    tag_269:\n        /* \"#utility.yul\":16718:16721   */\n      0x00\n        /* \"#utility.yul\":16746:16784   */\n      tag_426\n        /* \"#utility.yul\":16778:16783   */\n      dup3\n        /* \"#utility.yul\":16746:16784   */\n      tag_266\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":16800:16888   */\n      tag_427\n        /* \"#utility.yul\":16881:16887   */\n      dup2\n        /* \"#utility.yul\":16876:16879   */\n      dup6\n        /* \"#utility.yul\":16800:16888   */\n      tag_267\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":16793:16888   */\n      swap4\n      pop\n        /* \"#utility.yul\":16897:16962   */\n      tag_428\n        /* \"#utility.yul\":16955:16961   */\n      dup2\n        /* \"#utility.yul\":16950:16953   */\n      dup6\n        /* \"#utility.yul\":16943:16947   */\n      0x20\n        /* \"#utility.yul\":16936:16941   */\n      dup7\n        /* \"#utility.yul\":16932:16948   */\n      add\n        /* \"#utility.yul\":16897:16962   */\n      tag_268\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":16987:16993   */\n      dup1\n        /* \"#utility.yul\":16982:16985   */\n      dup5\n        /* \"#utility.yul\":16978:16994   */\n      add\n        /* \"#utility.yul\":16971:16994   */\n      swap2\n      pop\n        /* \"#utility.yul\":16722:17000   */\n      pop\n        /* \"#utility.yul\":16614:17000   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17006:17277   */\n    tag_206:\n        /* \"#utility.yul\":17136:17139   */\n      0x00\n        /* \"#utility.yul\":17158:17251   */\n      tag_430\n        /* \"#utility.yul\":17247:17250   */\n      dup3\n        /* \"#utility.yul\":17238:17244   */\n      dup5\n        /* \"#utility.yul\":17158:17251   */\n      tag_269\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":17151:17251   */\n      swap2\n      pop\n        /* \"#utility.yul\":17268:17271   */\n      dup2\n        /* \"#utility.yul\":17261:17271   */\n      swap1\n      pop\n        /* \"#utility.yul\":17006:17277   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17283:17462   */\n    tag_270:\n        /* \"#utility.yul\":17423:17454   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":17419:17420   */\n      0x00\n        /* \"#utility.yul\":17411:17417   */\n      dup3\n        /* \"#utility.yul\":17407:17421   */\n      add\n        /* \"#utility.yul\":17400:17455   */\n      mstore\n        /* \"#utility.yul\":17283:17462   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17468:17834   */\n    tag_271:\n        /* \"#utility.yul\":17610:17613   */\n      0x00\n        /* \"#utility.yul\":17631:17698   */\n      tag_433\n        /* \"#utility.yul\":17695:17697   */\n      0x1d\n        /* \"#utility.yul\":17690:17693   */\n      dup4\n        /* \"#utility.yul\":17631:17698   */\n      tag_244\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":17624:17698   */\n      swap2\n      pop\n        /* \"#utility.yul\":17707:17800   */\n      tag_434\n        /* \"#utility.yul\":17796:17799   */\n      dup3\n        /* \"#utility.yul\":17707:17800   */\n      tag_270\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":17825:17827   */\n      0x20\n        /* \"#utility.yul\":17820:17823   */\n      dup3\n        /* \"#utility.yul\":17816:17828   */\n      add\n        /* \"#utility.yul\":17809:17828   */\n      swap1\n      pop\n        /* \"#utility.yul\":17468:17834   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17840:18259   */\n    tag_219:\n        /* \"#utility.yul\":18006:18010   */\n      0x00\n        /* \"#utility.yul\":18044:18046   */\n      0x20\n        /* \"#utility.yul\":18033:18042   */\n      dup3\n        /* \"#utility.yul\":18029:18047   */\n      add\n        /* \"#utility.yul\":18021:18047   */\n      swap1\n      pop\n        /* \"#utility.yul\":18093:18102   */\n      dup2\n        /* \"#utility.yul\":18087:18091   */\n      dup2\n        /* \"#utility.yul\":18083:18103   */\n      sub\n        /* \"#utility.yul\":18079:18080   */\n      0x00\n        /* \"#utility.yul\":18068:18077   */\n      dup4\n        /* \"#utility.yul\":18064:18081   */\n      add\n        /* \"#utility.yul\":18057:18104   */\n      mstore\n        /* \"#utility.yul\":18121:18252   */\n      tag_436\n        /* \"#utility.yul\":18247:18251   */\n      dup2\n        /* \"#utility.yul\":18121:18252   */\n      tag_271\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":18113:18252   */\n      swap1\n      pop\n        /* \"#utility.yul\":17840:18259   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18265:18364   */\n    tag_272:\n        /* \"#utility.yul\":18317:18323   */\n      0x00\n        /* \"#utility.yul\":18351:18356   */\n      dup2\n        /* \"#utility.yul\":18345:18357   */\n      mload\n        /* \"#utility.yul\":18335:18357   */\n      swap1\n      pop\n        /* \"#utility.yul\":18265:18364   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18370:18472   */\n    tag_273:\n        /* \"#utility.yul\":18411:18417   */\n      0x00\n        /* \"#utility.yul\":18462:18464   */\n      0x1f\n        /* \"#utility.yul\":18458:18465   */\n      not\n        /* \"#utility.yul\":18453:18455   */\n      0x1f\n        /* \"#utility.yul\":18446:18451   */\n      dup4\n        /* \"#utility.yul\":18442:18456   */\n      add\n        /* \"#utility.yul\":18438:18466   */\n      and\n        /* \"#utility.yul\":18428:18466   */\n      swap1\n      pop\n        /* \"#utility.yul\":18370:18472   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18478:18855   */\n    tag_274:\n        /* \"#utility.yul\":18566:18569   */\n      0x00\n        /* \"#utility.yul\":18594:18633   */\n      tag_440\n        /* \"#utility.yul\":18627:18632   */\n      dup3\n        /* \"#utility.yul\":18594:18633   */\n      tag_272\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":18649:18720   */\n      tag_441\n        /* \"#utility.yul\":18713:18719   */\n      dup2\n        /* \"#utility.yul\":18708:18711   */\n      dup6\n        /* \"#utility.yul\":18649:18720   */\n      tag_244\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":18642:18720   */\n      swap4\n      pop\n        /* \"#utility.yul\":18729:18794   */\n      tag_442\n        /* \"#utility.yul\":18787:18793   */\n      dup2\n        /* \"#utility.yul\":18782:18785   */\n      dup6\n        /* \"#utility.yul\":18775:18779   */\n      0x20\n        /* \"#utility.yul\":18768:18773   */\n      dup7\n        /* \"#utility.yul\":18764:18780   */\n      add\n        /* \"#utility.yul\":18729:18794   */\n      tag_268\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":18819:18848   */\n      tag_443\n        /* \"#utility.yul\":18841:18847   */\n      dup2\n        /* \"#utility.yul\":18819:18848   */\n      tag_273\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":18814:18817   */\n      dup5\n        /* \"#utility.yul\":18810:18849   */\n      add\n        /* \"#utility.yul\":18803:18849   */\n      swap2\n      pop\n        /* \"#utility.yul\":18570:18855   */\n      pop\n        /* \"#utility.yul\":18478:18855   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18861:19174   */\n    tag_228:\n        /* \"#utility.yul\":18974:18978   */\n      0x00\n        /* \"#utility.yul\":19012:19014   */\n      0x20\n        /* \"#utility.yul\":19001:19010   */\n      dup3\n        /* \"#utility.yul\":18997:19015   */\n      add\n        /* \"#utility.yul\":18989:19015   */\n      swap1\n      pop\n        /* \"#utility.yul\":19061:19070   */\n      dup2\n        /* \"#utility.yul\":19055:19059   */\n      dup2\n        /* \"#utility.yul\":19051:19071   */\n      sub\n        /* \"#utility.yul\":19047:19048   */\n      0x00\n        /* \"#utility.yul\":19036:19045   */\n      dup4\n        /* \"#utility.yul\":19032:19049   */\n      add\n        /* \"#utility.yul\":19025:19072   */\n      mstore\n        /* \"#utility.yul\":19089:19167   */\n      tag_445\n        /* \"#utility.yul\":19162:19166   */\n      dup2\n        /* \"#utility.yul\":19153:19159   */\n      dup5\n        /* \"#utility.yul\":19089:19167   */\n      tag_274\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":19081:19167   */\n      swap1\n      pop\n        /* \"#utility.yul\":18861:19174   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d326d3d55ba080c4ce88d1b6d6d3a76197305730fd606e57f58694bd0aaab94964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1063": {
									"entryPoint": null,
									"id": 1063,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": 159,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 167,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 446,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 469,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 400,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 368,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 363,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 420,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:10",
														"type": ""
													}
												],
												"src": "334:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:10",
														"type": ""
													}
												],
												"src": "466:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:10"
															},
															"nodeType": "YulIf",
															"src": "621:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:10",
														"type": ""
													}
												],
												"src": "568:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:10",
														"type": ""
													}
												],
												"src": "696:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:10"
															},
															"nodeType": "YulIf",
															"src": "932:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:10",
														"type": ""
													}
												],
												"src": "845:351:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620024a5380380620024a58339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61228e80620002176000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639131a05a116100715780639131a05a14610140578063a6021ace1461015c578063a88e132f1461017a578063c0cd40ee14610196578063e88cc2be146101b2578063f2fde38b146101e6576100a9565b80630deef63a146100ae57806310c404da146100de5780633ae73259146100fa578063715018a6146101185780638da5cb5b14610122575b600080fd5b6100c860048036038101906100c391906118f3565b610202565b6040516100d59190611939565b60405180910390f35b6100f860048036038101906100f39190611980565b61021a565b005b6101026106d8565b60405161010f9190611939565b60405180910390f35b6101206106de565b005b61012a6106f2565b60405161013791906119f6565b60405180910390f35b61015a600480360381019061015591906118f3565b61071b565b005b610164611159565b60405161017191906119f6565b60405180910390f35b610194600480360381019061018f9190611a11565b61117f565b005b6101b060048036038101906101ab9190611a11565b61122d565b005b6101cc60048036038101906101c791906118f3565b6112dd565b6040516101dd959493929190611a59565b60405180910390f35b61020060048036038101906101fb91906118f3565b611320565b005b60046020528060005260406000206000915090505481565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161561055f5742600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154603c806018601e600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546103079190611adb565b6103119190611adb565b61031b9190611adb565b6103259190611adb565b61032f9190611b1d565b1161036f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036690611bae565b60405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea90611c1a565b60405180910390fd5b80600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015414610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90611c86565b60405180910390fd5b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546104c59190611b1d565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061055a843085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b610663565b6040518060a0016040528084815260200142815260200183815260200182815260200160011515815250600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050610662843085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106b29190611b1d565b9250508190555082600260008282546106cb9190611b1d565b9250508190555050505050565b60025481565b6106e661142c565b6106f060006114aa565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190611cf2565b60405180910390fd5b42600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154603c806018601e600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546108429190611adb565b61084c9190611adb565b6108569190611adb565b6108609190611adb565b61086a9190611b1d565b106108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190611d5e565b60405180910390fd5b6000806000806103e86019600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109029190611adb565b61090c9190611dad565b9050600081600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461095e9190611dde565b905060038060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610a0b5760646014600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109fa9190611adb565b610a049190611dad565b9450610b62565b6006600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610ab8576103e860e1600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610aa79190611adb565b610ab19190611dad565b9450610b61565b600c600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610b605760646019600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b539190611adb565b610b5d9190611dad565b94505b5b5b6064600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403610c5d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878784610bf79190611b1d565b6040518363ffffffff1660e01b8152600401610c14929190611e12565b6020604051808303816000875af1158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190611e67565b50611003565b604b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403610e31576064604b86610cb69190611adb565b610cc09190611dad565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878684610d0d9190611b1d565b6040518363ffffffff1660e01b8152600401610d2a929190611e12565b6020604051808303816000875af1158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d9190611e67565b506064601986610d7d9190611adb565b610d879190611dad565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61dead856040518363ffffffff1660e01b8152600401610de8929190611e12565b6020604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190611e67565b50611002565b6032600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403611001576064603286610e8a9190611adb565b610e949190611dad565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878684610ee19190611b1d565b6040518363ffffffff1660e01b8152600401610efe929190611e12565b6020604051808303816000875af1158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611e67565b506064603286610f519190611adb565b610f5b9190611dad565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61dead856040518363ffffffff1660e01b8152600401610fbc929190611e12565b6020604051808303816000875af1158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190611e67565b505b5b5b6000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ef9190611dde565b92505081905550600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546002600082825461114a9190611dde565b92505081905550505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61118761142c565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111d69190611dde565b9250508190555061122a3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661156e9092919063ffffffff16565b50565b61123561142c565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112849190611b1d565b925050819055506112da333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b50565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b61132861142c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138e90611f06565b60405180910390fd5b6113a0816114aa565b50565b611426846323b872dd60e01b8585856040516024016113c493929190611f26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115f4565b50505050565b6114346116bb565b73ffffffffffffffffffffffffffffffffffffffff166114526106f2565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f90611fa9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115ef8363a9059cbb60e01b848460405160240161158d929190611e12565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115f4565b505050565b6000611656826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116c39092919063ffffffff16565b90506000815111156116b657808060200190518101906116769190611e67565b6116b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ac9061203b565b60405180910390fd5b5b505050565b600033905090565b60606116d284846000856116db565b90509392505050565b606082471015611720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611717906120cd565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611749919061215e565b60006040518083038185875af1925050503d8060008114611786576040519150601f19603f3d011682016040523d82523d6000602084013e61178b565b606091505b509150915061179c878383876117a8565b92505050949350505050565b6060831561180a576000835103611802576117c28561181d565b611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f8906121c1565b60405180910390fd5b5b829050611815565b6118148383611840565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156118535781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118879190612236565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c082611895565b9050919050565b6118d0816118b5565b81146118db57600080fd5b50565b6000813590506118ed816118c7565b92915050565b60006020828403121561190957611908611890565b5b6000611917848285016118de565b91505092915050565b6000819050919050565b61193381611920565b82525050565b600060208201905061194e600083018461192a565b92915050565b61195d81611920565b811461196857600080fd5b50565b60008135905061197a81611954565b92915050565b6000806000806080858703121561199a57611999611890565b5b60006119a8878288016118de565b94505060206119b98782880161196b565b93505060406119ca8782880161196b565b92505060606119db8782880161196b565b91505092959194509250565b6119f0816118b5565b82525050565b6000602082019050611a0b60008301846119e7565b92915050565b600060208284031215611a2757611a26611890565b5b6000611a358482850161196b565b91505092915050565b60008115159050919050565b611a5381611a3e565b82525050565b600060a082019050611a6e600083018861192a565b611a7b602083018761192a565b611a88604083018661192a565b611a95606083018561192a565b611aa26080830184611a4a565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ae682611920565b9150611af183611920565b9250828202611aff81611920565b91508282048414831517611b1657611b15611aac565b5b5092915050565b6000611b2882611920565b9150611b3383611920565b9250828201905080821115611b4b57611b4a611aac565b5b92915050565b600082825260208201905092915050565b7f596f75722054696d6520506572696f6420436f6d706c6574652e000000000000600082015250565b6000611b98601a83611b51565b9150611ba382611b62565b602082019050919050565b60006020820190508181036000830152611bc781611b8b565b9050919050565b7f456e746572205269676874205374616b654d6f6e746800000000000000000000600082015250565b6000611c04601683611b51565b9150611c0f82611bce565b602082019050919050565b60006020820190508181036000830152611c3381611bf7565b9050919050565b7f456e746572205269676874204561726e50657273656e74616765000000000000600082015250565b6000611c70601a83611b51565b9150611c7b82611c3a565b602082019050919050565b60006020820190508181036000830152611c9f81611c63565b9050919050565b7f4669727374205374616b6520546f6b656e730000000000000000000000000000600082015250565b6000611cdc601283611b51565b9150611ce782611ca6565b602082019050919050565b60006020820190508181036000830152611d0b81611ccf565b9050919050565b7f506c656173652057616974000000000000000000000000000000000000000000600082015250565b6000611d48600b83611b51565b9150611d5382611d12565b602082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611db882611920565b9150611dc383611920565b925082611dd357611dd2611d7e565b5b828204905092915050565b6000611de982611920565b9150611df483611920565b9250828203905081811115611e0c57611e0b611aac565b5b92915050565b6000604082019050611e2760008301856119e7565b611e34602083018461192a565b9392505050565b611e4481611a3e565b8114611e4f57600080fd5b50565b600081519050611e6181611e3b565b92915050565b600060208284031215611e7d57611e7c611890565b5b6000611e8b84828501611e52565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef0602683611b51565b9150611efb82611e94565b604082019050919050565b60006020820190508181036000830152611f1f81611ee3565b9050919050565b6000606082019050611f3b60008301866119e7565b611f4860208301856119e7565b611f55604083018461192a565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f93602083611b51565b9150611f9e82611f5d565b602082019050919050565b60006020820190508181036000830152611fc281611f86565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612025602a83611b51565b915061203082611fc9565b604082019050919050565b6000602082019050818103600083015261205481612018565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006120b7602683611b51565b91506120c28261205b565b604082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612121578082015181840152602081019050612106565b60008484015250505050565b6000612138826120ed565b61214281856120f8565b9350612152818560208601612103565b80840191505092915050565b600061216a828461212d565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121ab601d83611b51565b91506121b682612175565b602082019050919050565b600060208201905081810360008301526121da8161219e565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612208826121e1565b6122128185611b51565b9350612222818560208601612103565b61222b816121ec565b840191505092915050565b6000602082019050818103600083015261225081846121fd565b90509291505056fea2646970667358221220d326d3d55ba080c4ce88d1b6d6d3a76197305730fd606e57f58694bd0aaab94964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x24A5 CODESIZE SUB DUP1 PUSH3 0x24A5 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1D5 JUMP JUMPDEST PUSH3 0x57 PUSH3 0x4B PUSH3 0x9F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xA7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x207 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19D DUP3 PUSH3 0x170 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x190 JUMP JUMPDEST DUP2 EQ PUSH3 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1CF DUP2 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1EE JUMPI PUSH3 0x1ED PUSH3 0x16B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1FE DUP5 DUP3 DUP6 ADD PUSH3 0x1BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x228E DUP1 PUSH3 0x217 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9131A05A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E6 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0xDEEF63A EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0x1980 JUMP JUMPDEST PUSH2 0x21A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x102 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12A PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x71B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18F SWAP2 SWAP1 PUSH2 0x1A11 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AB SWAP2 SWAP1 PUSH2 0x1A11 JUMP JUMPDEST PUSH2 0x122D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x12DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x1320 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x55F JUMPI TIMESTAMP PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C DUP1 PUSH1 0x18 PUSH1 0x1E PUSH1 0x3 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x32F SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST GT PUSH2 0x36F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x366 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3EA SWAP1 PUSH2 0x1C1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD EQ PUSH2 0x477 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46E SWAP1 PUSH2 0x1C86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x4C5 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x55A DUP5 ADDRESS DUP6 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x663 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x662 DUP5 ADDRESS DUP6 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6B2 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x6F0 PUSH1 0x0 PUSH2 0x14AA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A1 SWAP1 PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C DUP1 PUSH1 0x18 PUSH1 0x1E PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x842 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x84C SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x856 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x860 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x86A SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST LT PUSH2 0x8AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A1 SWAP1 PUSH2 0x1D5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x19 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x902 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x90C SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x95E SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA0B JUMPI PUSH1 0x64 PUSH1 0x14 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x9FA SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xAB8 JUMPI PUSH2 0x3E8 PUSH1 0xE1 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xAA7 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xAB1 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP PUSH2 0xB61 JUMP JUMPDEST PUSH1 0xC PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xB60 JUMPI PUSH1 0x64 PUSH1 0x19 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x64 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0xC5D JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP8 DUP5 PUSH2 0xBF7 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC14 SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC33 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC57 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH2 0x1003 JUMP JUMPDEST PUSH1 0x4B PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0xE31 JUMPI PUSH1 0x64 PUSH1 0x4B DUP7 PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP7 DUP5 PUSH2 0xD0D SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2A SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x19 DUP7 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xD87 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0xDEAD DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE8 SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2B SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x32 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0x1001 JUMPI PUSH1 0x64 PUSH1 0x32 DUP7 PUSH2 0xE8A SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xE94 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP7 DUP5 PUSH2 0xEE1 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFE SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF41 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x32 DUP7 PUSH2 0xF51 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xF5B SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0xDEAD DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBC SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFFF SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH1 0x4 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10EF SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x114A SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1187 PUSH2 0x142C JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x122A CALLER DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x156E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1235 PUSH2 0x142C JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1284 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x12DA CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH2 0x1328 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1397 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138E SWAP1 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13A0 DUP2 PUSH2 0x14AA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1426 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x15F4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1434 PUSH2 0x16BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1452 PUSH2 0x6F2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x149F SWAP1 PUSH2 0x1FA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15EF DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x158D SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x15F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1656 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16C3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x16B6 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1676 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST PUSH2 0x16B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16AC SWAP1 PUSH2 0x203B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x16D2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x16DB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1720 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1717 SWAP1 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1749 SWAP2 SWAP1 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1786 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x178B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x179C DUP8 DUP4 DUP4 DUP8 PUSH2 0x17A8 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x180A JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1802 JUMPI PUSH2 0x17C2 DUP6 PUSH2 0x181D JUMP JUMPDEST PUSH2 0x1801 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F8 SWAP1 PUSH2 0x21C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x1814 DUP4 DUP4 PUSH2 0x1840 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1853 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1887 SWAP2 SWAP1 PUSH2 0x2236 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C0 DUP3 PUSH2 0x1895 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18D0 DUP2 PUSH2 0x18B5 JUMP JUMPDEST DUP2 EQ PUSH2 0x18DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18ED DUP2 PUSH2 0x18C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1909 JUMPI PUSH2 0x1908 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1917 DUP5 DUP3 DUP6 ADD PUSH2 0x18DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1933 DUP2 PUSH2 0x1920 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x195D DUP2 PUSH2 0x1920 JUMP JUMPDEST DUP2 EQ PUSH2 0x1968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x197A DUP2 PUSH2 0x1954 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x199A JUMPI PUSH2 0x1999 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A8 DUP8 DUP3 DUP9 ADD PUSH2 0x18DE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B9 DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19CA DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x19DB DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x19F0 DUP2 PUSH2 0x18B5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A0B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A27 JUMPI PUSH2 0x1A26 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A35 DUP5 DUP3 DUP6 ADD PUSH2 0x196B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A53 DUP2 PUSH2 0x1A3E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1A6E PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A7B PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A88 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A95 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1AA2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1A4A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AE6 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AF1 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1AFF DUP2 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1B16 JUMPI PUSH2 0x1B15 PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B28 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B33 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B98 PUSH1 0x1A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BA3 DUP3 PUSH2 0x1B62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BC7 DUP2 PUSH2 0x1B8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E746572205269676874205374616B654D6F6E746800000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C04 PUSH1 0x16 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0F DUP3 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C33 DUP2 PUSH2 0x1BF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C70 PUSH1 0x1A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C7B DUP3 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C9F DUP2 PUSH2 0x1C63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4669727374205374616B6520546F6B656E730000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CDC PUSH1 0x12 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE7 DUP3 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D0B DUP2 PUSH2 0x1CCF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x506C656173652057616974000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D48 PUSH1 0xB DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D53 DUP3 PUSH2 0x1D12 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D77 DUP2 PUSH2 0x1D3B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DB8 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DC3 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1DD3 JUMPI PUSH2 0x1DD2 PUSH2 0x1D7E JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DE9 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DF4 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1E0C JUMPI PUSH2 0x1E0B PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1E27 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1E34 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E44 DUP2 PUSH2 0x1A3E JUMP JUMPDEST DUP2 EQ PUSH2 0x1E4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E61 DUP2 PUSH2 0x1E3B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E7D JUMPI PUSH2 0x1E7C PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E8B DUP5 DUP3 DUP6 ADD PUSH2 0x1E52 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF0 PUSH1 0x26 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFB DUP3 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F1F DUP2 PUSH2 0x1EE3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1F3B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1F48 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1F55 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F93 PUSH1 0x20 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F9E DUP3 PUSH2 0x1F5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FC2 DUP2 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2025 PUSH1 0x2A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x2030 DUP3 PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2054 DUP2 PUSH2 0x2018 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20B7 PUSH1 0x26 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x20C2 DUP3 PUSH2 0x205B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20E6 DUP2 PUSH2 0x20AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2121 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2106 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2138 DUP3 PUSH2 0x20ED JUMP JUMPDEST PUSH2 0x2142 DUP2 DUP6 PUSH2 0x20F8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2152 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2103 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 DUP5 PUSH2 0x212D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21AB PUSH1 0x1D DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x21B6 DUP3 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21DA DUP2 PUSH2 0x219E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2208 DUP3 PUSH2 0x21E1 JUMP JUMPDEST PUSH2 0x2212 DUP2 DUP6 PUSH2 0x1B51 JUMP JUMPDEST SWAP4 POP PUSH2 0x2222 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2103 JUMP JUMPDEST PUSH2 0x222B DUP2 PUSH2 0x21EC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2250 DUP2 DUP5 PUSH2 0x21FD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0x26 0xD3 0xD5 JUMPDEST LOG0 DUP1 0xC4 0xCE DUP9 0xD1 0xB6 0xD6 0xD3 0xA7 PUSH2 0x9730 JUMPI ADDRESS REVERT PUSH1 0x6E JUMPI CREATE2 DUP7 SWAP5 0xBD EXP 0xAA 0xB9 0x49 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "281:4580:9:-:0;;;911:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;971:13:9;956:12;;:28;;;;;;;;;;;;;;;;;;911:80;281:4580;;640:96:7;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;88:117:10:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;281:4580:9:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@AdminAddToken_1091": {
									"entryPoint": 4653,
									"id": 1091,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@AdminWithDrawToken_1115": {
									"entryPoint": 4479,
									"id": 1115,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@DepositTokens_1239": {
									"entryPoint": 538,
									"id": 1239,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@Details_1049": {
									"entryPoint": 4829,
									"id": 1049,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_1031": {
									"entryPoint": 4441,
									"id": 1031,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Tokens_1053": {
									"entryPoint": 514,
									"id": 1053,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WithdrawTokens_1498": {
									"entryPoint": 1819,
									"id": 1498,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 5620,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 5164,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": 5819,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_983": {
									"entryPoint": 6208,
									"id": 983,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 5290,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_808": {
									"entryPoint": 5851,
									"id": 808,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_744": {
									"entryPoint": 5827,
									"id": 744,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_672": {
									"entryPoint": 6173,
									"id": 672,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": 1778,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1758,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 5027,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_258": {
									"entryPoint": 5486,
									"id": 258,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@totalStakedTokens_1033": {
									"entryPoint": 1752,
									"id": 1033,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 4896,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_939": {
									"entryPoint": 6056,
									"id": 939,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 6366,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 7762,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6507,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6387,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256": {
									"entryPoint": 6528,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 7783,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6673,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6730,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 8493,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8701,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7907,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8362,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7267,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8070,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7159,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7051,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8606,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7375,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7483,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8216,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6442,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6646,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 7974,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 7698,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8758,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8397,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7302,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8105,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7194,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7086,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8641,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7410,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7518,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8251,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6457,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": 6745,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 8429,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 8673,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 8440,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6993,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6941,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 7597,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6875,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7646,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6325,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6718,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6293,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6432,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 8451,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 6828,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 7550,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6288,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 8684,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 7828,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 8283,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089": {
									"entryPoint": 7226,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 8029,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d": {
									"entryPoint": 7118,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599": {
									"entryPoint": 7010,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 8565,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2": {
									"entryPoint": 7334,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8": {
									"entryPoint": 7442,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 8137,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 6343,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 7739,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6484,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:19177:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:10",
														"type": ""
													}
												],
												"src": "334:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:10",
														"type": ""
													}
												],
												"src": "466:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:10"
															},
															"nodeType": "YulIf",
															"src": "621:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:10",
														"type": ""
													}
												],
												"src": "568:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:10",
														"type": ""
													}
												],
												"src": "696:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "907:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "953:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "955:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "955:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "955:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "928:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "937:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "924:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "924:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "949:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "920:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "920:32:10"
															},
															"nodeType": "YulIf",
															"src": "917:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1046:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1061:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1075:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1065:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1090:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1125:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1136:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1121:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1121:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1145:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1100:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1100:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1090:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "877:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "888:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "900:6:10",
														"type": ""
													}
												],
												"src": "841:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1221:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1231:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1242:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1231:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1203:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1213:7:10",
														"type": ""
													}
												],
												"src": "1176:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1324:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1341:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1364:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1346:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1346:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1334:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1334:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1334:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1312:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1319:3:10",
														"type": ""
													}
												],
												"src": "1259:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1481:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1491:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1503:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1514:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1499:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1491:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1571:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1584:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1595:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1580:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1580:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1527:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1527:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1527:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1453:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1465:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1476:4:10",
														"type": ""
													}
												],
												"src": "1383:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1654:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1711:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1720:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1723:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1713:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1713:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1713:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1677:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1702:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1684:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1684:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1674:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1674:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1667:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1667:43:10"
															},
															"nodeType": "YulIf",
															"src": "1664:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1647:5:10",
														"type": ""
													}
												],
												"src": "1611:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1791:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1801:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1823:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1810:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1810:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1801:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1866:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1839:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1839:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1839:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1769:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1777:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1785:5:10",
														"type": ""
													}
												],
												"src": "1739:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:648:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2048:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2050:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2050:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2050:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2022:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2031:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2014:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:33:10"
															},
															"nodeType": "YulIf",
															"src": "2011:120:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2141:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2156:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2170:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2160:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2185:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2220:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2231:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2216:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2216:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2240:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2195:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2195:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2185:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2268:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2283:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2297:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2287:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2348:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2359:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2344:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2344:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2368:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2323:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2323:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2313:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2396:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2411:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2425:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2415:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2441:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2476:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2487:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2472:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2472:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2496:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2451:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2451:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "2441:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2524:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2539:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2553:2:10",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2543:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2569:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2604:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2615:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2600:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2600:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2624:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2579:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2579:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "2569:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1947:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1958:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1970:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1978:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1986:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1994:6:10",
														"type": ""
													}
												],
												"src": "1884:765:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2720:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2737:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2760:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2742:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2742:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2730:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2730:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2730:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2708:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2715:3:10",
														"type": ""
													}
												],
												"src": "2655:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2877:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2887:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2899:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2910:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2895:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2895:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2887:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2967:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2980:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2991:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2976:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2976:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2923:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2923:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2923:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2849:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2861:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2872:4:10",
														"type": ""
													}
												],
												"src": "2779:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3073:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3119:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3121:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3121:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3121:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3094:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3103:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3090:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3090:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3115:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3086:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3086:32:10"
															},
															"nodeType": "YulIf",
															"src": "3083:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "3212:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3227:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3241:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3231:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3256:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3291:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3302:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3287:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3287:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3311:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3266:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3266:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3256:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3043:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3054:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3066:6:10",
														"type": ""
													}
												],
												"src": "3007:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3384:48:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3394:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3419:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3412:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3412:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3405:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3405:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3394:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3366:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3376:7:10",
														"type": ""
													}
												],
												"src": "3342:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3497:50:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3514:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3534:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3519:14:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3519:21:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3507:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3507:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3507:34:10"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3485:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3492:3:10",
														"type": ""
													}
												],
												"src": "3438:109:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3757:448:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3767:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3779:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3790:3:10",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3775:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3775:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3767:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3848:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3861:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3872:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3857:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3857:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3804:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3804:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3804:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3929:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3942:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3953:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3938:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3938:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3885:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3885:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3885:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4011:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4024:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4035:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4020:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4020:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3967:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3967:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3967:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "4093:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4106:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4117:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4102:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4102:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4049:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4049:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4049:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "4169:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4182:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4193:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4178:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4178:19:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4131:37:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4131:67:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4131:67:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3697:9:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3709:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3717:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3725:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3733:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3741:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3752:4:10",
														"type": ""
													}
												],
												"src": "3553:652:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4239:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4256:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4259:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4249:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4249:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4249:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4353:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4356:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4346:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4346:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4346:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4377:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4380:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4370:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4370:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4370:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "4211:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4445:362:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4455:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4478:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4460:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4460:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4455:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4489:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4512:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4494:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4494:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4489:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4523:28:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4546:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4549:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4542:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4542:9:10"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "4527:11:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4560:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "4589:11:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4571:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4571:30:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4560:7:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4778:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4780:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4780:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4780:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4711:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4704:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4704:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "4734:1:10"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "4741:7:10"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "4750:1:10"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "4737:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4737:15:10"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "4731:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4731:22:10"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "4684:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:83:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4664:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4664:113:10"
															},
															"nodeType": "YulIf",
															"src": "4661:139:10"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4428:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4431:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4437:7:10",
														"type": ""
													}
												],
												"src": "4397:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4857:147:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4867:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4890:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4872:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4872:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4867:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4901:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4924:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4906:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4906:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4901:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4935:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4946:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4949:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4942:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4942:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4935:3:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4975:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4977:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4977:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4977:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4967:1:10"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "4970:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4964:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4964:10:10"
															},
															"nodeType": "YulIf",
															"src": "4961:36:10"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4844:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4847:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4853:3:10",
														"type": ""
													}
												],
												"src": "4813:191:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5106:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5123:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5128:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5116:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5116:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5116:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5144:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5163:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5168:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5159:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5159:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "5144:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5078:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5083:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "5094:11:10",
														"type": ""
													}
												],
												"src": "5010:169:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5291:70:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5313:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5321:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5309:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5309:14:10"
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5325:28:10",
																		"type": "",
																		"value": "Your Time Period Complete."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5302:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5302:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5302:52:10"
														}
													]
												},
												"name": "store_literal_in_memory_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "5283:6:10",
														"type": ""
													}
												],
												"src": "5185:176:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5513:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5523:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5589:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5594:2:10",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5530:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5530:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5523:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5695:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																	"nodeType": "YulIdentifier",
																	"src": "5606:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5606:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5606:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5708:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5719:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5724:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5715:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5715:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5708:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5501:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5509:3:10",
														"type": ""
													}
												],
												"src": "5367:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5910:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5920:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5932:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5943:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5928:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5928:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5920:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5967:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5978:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5963:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5963:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5986:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5992:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5982:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5982:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5956:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5956:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5956:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6012:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6146:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6020:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6020:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6012:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5890:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5905:4:10",
														"type": ""
													}
												],
												"src": "5739:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6270:66:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6292:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6300:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6288:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6288:14:10"
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6304:24:10",
																		"type": "",
																		"value": "Enter Right StakeMonth"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6281:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6281:48:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6281:48:10"
														}
													]
												},
												"name": "store_literal_in_memory_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "6262:6:10",
														"type": ""
													}
												],
												"src": "6164:172:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6488:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6498:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6564:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6569:2:10",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6505:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6505:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6498:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6670:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																	"nodeType": "YulIdentifier",
																	"src": "6581:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6581:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6581:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6683:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6694:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6699:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6690:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6690:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6683:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6476:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6484:3:10",
														"type": ""
													}
												],
												"src": "6342:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6885:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6895:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6907:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6918:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6903:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6903:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6895:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6942:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6953:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6938:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6938:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6961:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6967:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6957:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6957:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6931:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6931:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6931:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6987:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7121:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6995:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6995:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6987:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6865:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6880:4:10",
														"type": ""
													}
												],
												"src": "6714:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7245:70:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7267:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7275:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7263:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7263:14:10"
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7279:28:10",
																		"type": "",
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7256:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7256:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7256:52:10"
														}
													]
												},
												"name": "store_literal_in_memory_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7237:6:10",
														"type": ""
													}
												],
												"src": "7139:176:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7467:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7477:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7543:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7548:2:10",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7484:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7484:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7477:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7649:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																	"nodeType": "YulIdentifier",
																	"src": "7560:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7560:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7560:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7662:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7673:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7678:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7669:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7669:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7662:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7455:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7463:3:10",
														"type": ""
													}
												],
												"src": "7321:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7864:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7874:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7886:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7897:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7882:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7874:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7921:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7932:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7917:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7917:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7940:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7946:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7936:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7936:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7910:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7910:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7910:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7966:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8100:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7974:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7974:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7966:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7844:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7859:4:10",
														"type": ""
													}
												],
												"src": "7693:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8224:62:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8246:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8254:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8242:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8242:14:10"
																	},
																	{
																		"hexValue": "4669727374205374616b6520546f6b656e73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8258:20:10",
																		"type": "",
																		"value": "First Stake Tokens"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8235:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8235:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8235:44:10"
														}
													]
												},
												"name": "store_literal_in_memory_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8216:6:10",
														"type": ""
													}
												],
												"src": "8118:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8438:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8448:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8514:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8519:2:10",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8455:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8455:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8448:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8620:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																	"nodeType": "YulIdentifier",
																	"src": "8531:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8531:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8531:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8633:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8644:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8649:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8640:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8640:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8633:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8426:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8434:3:10",
														"type": ""
													}
												],
												"src": "8292:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8835:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8845:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8857:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8868:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8853:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8853:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8845:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8892:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8903:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8888:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8888:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8911:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8917:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8907:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8907:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8881:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8881:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8881:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8937:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9071:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8945:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8945:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8937:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8815:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8830:4:10",
														"type": ""
													}
												],
												"src": "8664:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9195:55:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9217:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9225:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9213:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9213:14:10"
																	},
																	{
																		"hexValue": "506c656173652057616974",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9229:13:10",
																		"type": "",
																		"value": "Please Wait"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9206:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9206:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9206:37:10"
														}
													]
												},
												"name": "store_literal_in_memory_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9187:6:10",
														"type": ""
													}
												],
												"src": "9089:161:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9402:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9412:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9478:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9483:2:10",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9419:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9419:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9412:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9584:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8",
																	"nodeType": "YulIdentifier",
																	"src": "9495:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9495:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9495:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9597:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9608:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9613:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9604:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9604:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9597:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9390:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9398:3:10",
														"type": ""
													}
												],
												"src": "9256:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9799:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9809:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9821:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9832:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9817:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9809:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9856:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9867:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9852:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9852:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9875:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9881:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9871:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9871:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9845:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9845:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9845:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9901:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10035:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9909:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9909:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9901:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9779:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9794:4:10",
														"type": ""
													}
												],
												"src": "9628:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10081:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10098:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10101:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10091:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10091:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10091:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10195:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10198:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10188:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10188:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10188:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10219:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10222:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10212:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10212:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10212:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "10053:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10281:143:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10291:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10314:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10296:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10296:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10291:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10325:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10348:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10330:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10330:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10325:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10372:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "10374:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10374:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10374:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10369:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10362:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10362:9:10"
															},
															"nodeType": "YulIf",
															"src": "10359:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10404:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10413:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10416:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10409:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10409:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "10404:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10270:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10273:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "10279:1:10",
														"type": ""
													}
												],
												"src": "10239:185:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10475:149:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10485:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10508:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10490:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10490:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10485:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10519:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10542:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10524:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10524:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10519:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10553:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10565:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10568:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10561:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10561:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10553:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10595:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10597:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10597:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10597:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "10586:4:10"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10592:1:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10583:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10583:11:10"
															},
															"nodeType": "YulIf",
															"src": "10580:37:10"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10461:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10464:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10470:4:10",
														"type": ""
													}
												],
												"src": "10430:194:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10756:206:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10766:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10778:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10789:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10774:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10774:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10766:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10846:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10859:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10870:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10855:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10855:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10802:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10802:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10802:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10927:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10940:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10951:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10936:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10936:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10883:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10883:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10883:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10720:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10732:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10740:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10751:4:10",
														"type": ""
													}
												],
												"src": "10630:332:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11008:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11062:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11071:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11074:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11064:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11064:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11064:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11031:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11053:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "11038:14:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11038:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11028:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11028:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11021:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11021:40:10"
															},
															"nodeType": "YulIf",
															"src": "11018:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11001:5:10",
														"type": ""
													}
												],
												"src": "10968:116:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11150:77:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11160:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "11175:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11169:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11169:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "11160:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11215:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "11191:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11191:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11191:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "11128:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11136:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11144:5:10",
														"type": ""
													}
												],
												"src": "11090:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11307:271:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11353:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "11355:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11355:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11355:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11328:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11337:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11324:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11324:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11349:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "11320:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11320:32:10"
															},
															"nodeType": "YulIf",
															"src": "11317:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "11446:125:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "11461:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11475:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "11465:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "11490:71:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "11533:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "11544:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11529:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11529:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11553:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "11500:28:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11500:61:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "11490:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11277:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "11288:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11300:6:10",
														"type": ""
													}
												],
												"src": "11233:345:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11690:119:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11712:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11720:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11708:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11708:14:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11724:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11701:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11701:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11701:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11780:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11788:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11776:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11776:15:10"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11793:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11769:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11769:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11769:33:10"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11682:6:10",
														"type": ""
													}
												],
												"src": "11584:225:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11961:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11971:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12037:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12042:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11978:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11978:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11971:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12143:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "12054:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12054:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12054:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12156:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12167:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12172:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12163:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12163:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12156:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11949:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11957:3:10",
														"type": ""
													}
												],
												"src": "11815:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12358:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12368:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12380:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12391:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12376:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12376:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12368:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12415:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12426:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12411:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12411:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12434:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12440:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12430:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12430:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12404:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12404:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12404:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12460:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12594:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12468:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12468:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12460:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12338:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12353:4:10",
														"type": ""
													}
												],
												"src": "12187:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12766:288:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12776:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12788:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12799:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12784:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12784:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12776:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12856:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12869:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12880:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12865:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12865:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12812:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12812:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12812:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12937:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12950:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12961:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12946:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12946:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12893:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12893:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12893:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13019:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13032:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13043:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13028:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13028:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12975:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12975:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12975:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12722:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12734:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12742:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12750:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12761:4:10",
														"type": ""
													}
												],
												"src": "12612:442:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13166:76:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13188:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13196:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13184:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13184:14:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13200:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13177:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13177:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13177:58:10"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13158:6:10",
														"type": ""
													}
												],
												"src": "13060:182:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13394:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13404:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13470:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13475:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13411:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13411:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13404:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13576:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "13487:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13487:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13487:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13589:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13600:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13605:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13596:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13596:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13589:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13382:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13390:3:10",
														"type": ""
													}
												],
												"src": "13248:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13791:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13801:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13813:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13824:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13809:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13809:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13801:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13848:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13859:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13844:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13844:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13867:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13873:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13863:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13863:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13837:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13837:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13837:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13893:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14027:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13901:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13901:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13893:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13771:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13786:4:10",
														"type": ""
													}
												],
												"src": "13620:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14151:123:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14173:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14181:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14169:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14169:14:10"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14185:34:10",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14162:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14162:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14162:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14241:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14249:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14237:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14237:15:10"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14254:12:10",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14230:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14230:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14230:37:10"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "14143:6:10",
														"type": ""
													}
												],
												"src": "14045:229:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14426:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14436:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14502:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14507:2:10",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14443:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14443:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14436:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14608:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "14519:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14519:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14519:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14621:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14632:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14637:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14628:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14628:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14621:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14414:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14422:3:10",
														"type": ""
													}
												],
												"src": "14280:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14823:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14833:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14845:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14856:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14841:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14841:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14833:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14880:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14891:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14876:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14876:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14899:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14905:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14895:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14895:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14869:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14869:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14869:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14925:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15059:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14933:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14933:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14925:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14803:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14818:4:10",
														"type": ""
													}
												],
												"src": "14652:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15183:119:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "15205:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15213:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15201:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15201:14:10"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15217:34:10",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15194:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15194:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15194:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "15273:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15281:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15269:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15269:15:10"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15286:8:10",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15262:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15262:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15262:33:10"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "15175:6:10",
														"type": ""
													}
												],
												"src": "15077:225:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15454:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15464:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15530:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15535:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15471:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15471:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "15464:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15636:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "15547:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15547:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15547:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15649:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15660:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15665:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15656:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15656:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15649:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15442:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15450:3:10",
														"type": ""
													}
												],
												"src": "15308:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15851:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15861:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15873:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15884:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15869:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15869:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15861:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15908:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15919:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15904:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15904:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15927:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15933:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15923:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15923:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15897:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15897:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15897:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15953:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "16087:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15961:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15961:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15953:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15831:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15846:4:10",
														"type": ""
													}
												],
												"src": "15680:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16163:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16174:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16190:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16184:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16184:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "16174:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16146:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16156:6:10",
														"type": ""
													}
												],
												"src": "16105:98:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16322:34:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16332:18:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "16347:3:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "16332:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16294:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16299:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "16310:11:10",
														"type": ""
													}
												],
												"src": "16209:147:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16424:184:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16434:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16443:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "16438:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16503:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16528:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "16533:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16524:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16524:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "16547:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "16552:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16543:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16543:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "16537:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16537:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16517:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16517:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16517:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16464:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16467:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16461:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16461:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16475:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16477:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "16486:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16489:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16482:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16482:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "16477:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16457:3:10",
																"statements": []
															},
															"src": "16453:113:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "16586:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "16591:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16582:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16582:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16600:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16575:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16575:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16575:27:10"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "16406:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "16411:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16416:6:10",
														"type": ""
													}
												],
												"src": "16362:246:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16722:278:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16732:52:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16778:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "16746:31:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16746:38:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "16736:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16793:95:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16876:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16881:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16800:75:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16800:88:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16793:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "16936:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16943:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16932:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16932:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16950:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16955:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "16897:34:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16897:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16897:65:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16971:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16982:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16987:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16978:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16978:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16971:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16703:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16710:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16718:3:10",
														"type": ""
													}
												],
												"src": "16614:386:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17140:137:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17151:100:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17238:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17247:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17158:79:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17158:93:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "17151:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17261:10:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "17268:3:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17261:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17119:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17125:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17136:3:10",
														"type": ""
													}
												],
												"src": "17006:271:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17389:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17411:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17419:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17407:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17407:14:10"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17423:31:10",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17400:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17400:55:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17400:55:10"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17381:6:10",
														"type": ""
													}
												],
												"src": "17283:179:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17614:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17624:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17690:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17695:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17631:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17631:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "17624:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17796:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "17707:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17707:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17707:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17809:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17820:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17825:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17816:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17816:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17809:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17602:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17610:3:10",
														"type": ""
													}
												],
												"src": "17468:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18011:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18021:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18033:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18044:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18029:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18029:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18021:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18068:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18079:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18064:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18064:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "18087:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18093:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "18083:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18083:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18057:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18057:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18057:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18113:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "18247:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18121:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18121:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18113:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17991:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18006:4:10",
														"type": ""
													}
												],
												"src": "17840:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18324:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18335:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18351:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "18345:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18345:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18335:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18307:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18317:6:10",
														"type": ""
													}
												],
												"src": "18265:99:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18418:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18428:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18446:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18453:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18442:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18442:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18462:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "18458:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18458:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "18438:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18438:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "18428:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18401:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "18411:6:10",
														"type": ""
													}
												],
												"src": "18370:102:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18570:285:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18580:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18627:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "18594:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18594:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "18584:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "18642:78:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18708:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18713:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18649:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18649:71:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "18642:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18768:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18775:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18764:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18764:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18782:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18787:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "18729:34:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18729:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18729:65:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18803:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18814:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "18841:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "18819:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18819:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18810:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18810:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "18803:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18551:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "18558:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "18566:3:10",
														"type": ""
													}
												],
												"src": "18478:377:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18979:195:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18989:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19001:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19012:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18997:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18997:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18989:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19036:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19047:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19032:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19032:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "19055:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19061:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "19051:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19051:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19025:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19025:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19025:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19081:86:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19153:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "19162:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19089:63:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19089:78:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19081:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18951:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "18963:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18974:4:10",
														"type": ""
													}
												],
												"src": "18861:313:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599(memPtr) {\n\n        mstore(add(memPtr, 0), \"Your Time Period Complete.\")\n\n    }\n\n    function abi_encode_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d(memPtr) {\n\n        mstore(add(memPtr, 0), \"Enter Right StakeMonth\")\n\n    }\n\n    function abi_encode_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089(memPtr) {\n\n        mstore(add(memPtr, 0), \"Enter Right EarnPersentage\")\n\n    }\n\n    function abi_encode_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2(memPtr) {\n\n        mstore(add(memPtr, 0), \"First Stake Tokens\")\n\n    }\n\n    function abi_encode_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8(memPtr) {\n\n        mstore(add(memPtr, 0), \"Please Wait\")\n\n    }\n\n    function abi_encode_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 11)\n        store_literal_in_memory_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80639131a05a116100715780639131a05a14610140578063a6021ace1461015c578063a88e132f1461017a578063c0cd40ee14610196578063e88cc2be146101b2578063f2fde38b146101e6576100a9565b80630deef63a146100ae57806310c404da146100de5780633ae73259146100fa578063715018a6146101185780638da5cb5b14610122575b600080fd5b6100c860048036038101906100c391906118f3565b610202565b6040516100d59190611939565b60405180910390f35b6100f860048036038101906100f39190611980565b61021a565b005b6101026106d8565b60405161010f9190611939565b60405180910390f35b6101206106de565b005b61012a6106f2565b60405161013791906119f6565b60405180910390f35b61015a600480360381019061015591906118f3565b61071b565b005b610164611159565b60405161017191906119f6565b60405180910390f35b610194600480360381019061018f9190611a11565b61117f565b005b6101b060048036038101906101ab9190611a11565b61122d565b005b6101cc60048036038101906101c791906118f3565b6112dd565b6040516101dd959493929190611a59565b60405180910390f35b61020060048036038101906101fb91906118f3565b611320565b005b60046020528060005260406000206000915090505481565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161561055f5742600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154603c806018601e600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546103079190611adb565b6103119190611adb565b61031b9190611adb565b6103259190611adb565b61032f9190611b1d565b1161036f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036690611bae565b60405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea90611c1a565b60405180910390fd5b80600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015414610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90611c86565b60405180910390fd5b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546104c59190611b1d565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061055a843085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b610663565b6040518060a0016040528084815260200142815260200183815260200182815260200160011515815250600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050610662843085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106b29190611b1d565b9250508190555082600260008282546106cb9190611b1d565b9250508190555050505050565b60025481565b6106e661142c565b6106f060006114aa565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190611cf2565b60405180910390fd5b42600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154603c806018601e600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546108429190611adb565b61084c9190611adb565b6108569190611adb565b6108609190611adb565b61086a9190611b1d565b106108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190611d5e565b60405180910390fd5b6000806000806103e86019600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109029190611adb565b61090c9190611dad565b9050600081600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461095e9190611dde565b905060038060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610a0b5760646014600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109fa9190611adb565b610a049190611dad565b9450610b62565b6006600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610ab8576103e860e1600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610aa79190611adb565b610ab19190611dad565b9450610b61565b600c600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015403610b605760646019600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b539190611adb565b610b5d9190611dad565b94505b5b5b6064600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403610c5d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878784610bf79190611b1d565b6040518363ffffffff1660e01b8152600401610c14929190611e12565b6020604051808303816000875af1158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190611e67565b50611003565b604b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403610e31576064604b86610cb69190611adb565b610cc09190611dad565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878684610d0d9190611b1d565b6040518363ffffffff1660e01b8152600401610d2a929190611e12565b6020604051808303816000875af1158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d9190611e67565b506064601986610d7d9190611adb565b610d879190611dad565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61dead856040518363ffffffff1660e01b8152600401610de8929190611e12565b6020604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190611e67565b50611002565b6032600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403611001576064603286610e8a9190611adb565b610e949190611dad565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878684610ee19190611b1d565b6040518363ffffffff1660e01b8152600401610efe929190611e12565b6020604051808303816000875af1158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611e67565b506064603286610f519190611adb565b610f5b9190611dad565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61dead856040518363ffffffff1660e01b8152600401610fbc929190611e12565b6020604051808303816000875af1158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190611e67565b505b5b5b6000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ef9190611dde565b92505081905550600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546002600082825461114a9190611dde565b92505081905550505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61118761142c565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111d69190611dde565b9250508190555061122a3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661156e9092919063ffffffff16565b50565b61123561142c565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112849190611b1d565b925050819055506112da333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a3909392919063ffffffff16565b50565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b61132861142c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138e90611f06565b60405180910390fd5b6113a0816114aa565b50565b611426846323b872dd60e01b8585856040516024016113c493929190611f26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115f4565b50505050565b6114346116bb565b73ffffffffffffffffffffffffffffffffffffffff166114526106f2565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f90611fa9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115ef8363a9059cbb60e01b848460405160240161158d929190611e12565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115f4565b505050565b6000611656826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116c39092919063ffffffff16565b90506000815111156116b657808060200190518101906116769190611e67565b6116b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ac9061203b565b60405180910390fd5b5b505050565b600033905090565b60606116d284846000856116db565b90509392505050565b606082471015611720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611717906120cd565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611749919061215e565b60006040518083038185875af1925050503d8060008114611786576040519150601f19603f3d011682016040523d82523d6000602084013e61178b565b606091505b509150915061179c878383876117a8565b92505050949350505050565b6060831561180a576000835103611802576117c28561181d565b611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f8906121c1565b60405180910390fd5b5b829050611815565b6118148383611840565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156118535781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118879190612236565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c082611895565b9050919050565b6118d0816118b5565b81146118db57600080fd5b50565b6000813590506118ed816118c7565b92915050565b60006020828403121561190957611908611890565b5b6000611917848285016118de565b91505092915050565b6000819050919050565b61193381611920565b82525050565b600060208201905061194e600083018461192a565b92915050565b61195d81611920565b811461196857600080fd5b50565b60008135905061197a81611954565b92915050565b6000806000806080858703121561199a57611999611890565b5b60006119a8878288016118de565b94505060206119b98782880161196b565b93505060406119ca8782880161196b565b92505060606119db8782880161196b565b91505092959194509250565b6119f0816118b5565b82525050565b6000602082019050611a0b60008301846119e7565b92915050565b600060208284031215611a2757611a26611890565b5b6000611a358482850161196b565b91505092915050565b60008115159050919050565b611a5381611a3e565b82525050565b600060a082019050611a6e600083018861192a565b611a7b602083018761192a565b611a88604083018661192a565b611a95606083018561192a565b611aa26080830184611a4a565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ae682611920565b9150611af183611920565b9250828202611aff81611920565b91508282048414831517611b1657611b15611aac565b5b5092915050565b6000611b2882611920565b9150611b3383611920565b9250828201905080821115611b4b57611b4a611aac565b5b92915050565b600082825260208201905092915050565b7f596f75722054696d6520506572696f6420436f6d706c6574652e000000000000600082015250565b6000611b98601a83611b51565b9150611ba382611b62565b602082019050919050565b60006020820190508181036000830152611bc781611b8b565b9050919050565b7f456e746572205269676874205374616b654d6f6e746800000000000000000000600082015250565b6000611c04601683611b51565b9150611c0f82611bce565b602082019050919050565b60006020820190508181036000830152611c3381611bf7565b9050919050565b7f456e746572205269676874204561726e50657273656e74616765000000000000600082015250565b6000611c70601a83611b51565b9150611c7b82611c3a565b602082019050919050565b60006020820190508181036000830152611c9f81611c63565b9050919050565b7f4669727374205374616b6520546f6b656e730000000000000000000000000000600082015250565b6000611cdc601283611b51565b9150611ce782611ca6565b602082019050919050565b60006020820190508181036000830152611d0b81611ccf565b9050919050565b7f506c656173652057616974000000000000000000000000000000000000000000600082015250565b6000611d48600b83611b51565b9150611d5382611d12565b602082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611db882611920565b9150611dc383611920565b925082611dd357611dd2611d7e565b5b828204905092915050565b6000611de982611920565b9150611df483611920565b9250828203905081811115611e0c57611e0b611aac565b5b92915050565b6000604082019050611e2760008301856119e7565b611e34602083018461192a565b9392505050565b611e4481611a3e565b8114611e4f57600080fd5b50565b600081519050611e6181611e3b565b92915050565b600060208284031215611e7d57611e7c611890565b5b6000611e8b84828501611e52565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef0602683611b51565b9150611efb82611e94565b604082019050919050565b60006020820190508181036000830152611f1f81611ee3565b9050919050565b6000606082019050611f3b60008301866119e7565b611f4860208301856119e7565b611f55604083018461192a565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f93602083611b51565b9150611f9e82611f5d565b602082019050919050565b60006020820190508181036000830152611fc281611f86565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612025602a83611b51565b915061203082611fc9565b604082019050919050565b6000602082019050818103600083015261205481612018565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006120b7602683611b51565b91506120c28261205b565b604082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612121578082015181840152602081019050612106565b60008484015250505050565b6000612138826120ed565b61214281856120f8565b9350612152818560208601612103565b80840191505092915050565b600061216a828461212d565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121ab601d83611b51565b91506121b682612175565b602082019050919050565b600060208201905081810360008301526121da8161219e565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612208826121e1565b6122128185611b51565b9350612222818560208601612103565b61222b816121ec565b840191505092915050565b6000602082019050818103600083015261225081846121fd565b90509291505056fea2646970667358221220d326d3d55ba080c4ce88d1b6d6d3a76197305730fd606e57f58694bd0aaab94964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9131A05A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x9131A05A EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E6 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0xDEEF63A EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x10C404DA EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x3AE73259 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0x1980 JUMP JUMPDEST PUSH2 0x21A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x102 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12A PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x71B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18F SWAP2 SWAP1 PUSH2 0x1A11 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AB SWAP2 SWAP1 PUSH2 0x1A11 JUMP JUMPDEST PUSH2 0x122D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x12DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x18F3 JUMP JUMPDEST PUSH2 0x1320 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x55F JUMPI TIMESTAMP PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C DUP1 PUSH1 0x18 PUSH1 0x1E PUSH1 0x3 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x32F SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST GT PUSH2 0x36F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x366 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3EA SWAP1 PUSH2 0x1C1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD EQ PUSH2 0x477 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46E SWAP1 PUSH2 0x1C86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x4C5 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x55A DUP5 ADDRESS DUP6 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x663 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x662 DUP5 ADDRESS DUP6 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6B2 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x6F0 PUSH1 0x0 PUSH2 0x14AA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A1 SWAP1 PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C DUP1 PUSH1 0x18 PUSH1 0x1E PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x842 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x84C SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x856 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x860 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x86A SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST LT PUSH2 0x8AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A1 SWAP1 PUSH2 0x1D5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x19 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x902 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0x90C SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x95E SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xA0B JUMPI PUSH1 0x64 PUSH1 0x14 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x9FA SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xAB8 JUMPI PUSH2 0x3E8 PUSH1 0xE1 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xAA7 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xAB1 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP PUSH2 0xB61 JUMP JUMPDEST PUSH1 0xC PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0xB60 JUMPI PUSH1 0x64 PUSH1 0x19 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP5 POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x64 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0xC5D JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP8 DUP5 PUSH2 0xBF7 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC14 SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC33 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC57 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH2 0x1003 JUMP JUMPDEST PUSH1 0x4B PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0xE31 JUMPI PUSH1 0x64 PUSH1 0x4B DUP7 PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP7 DUP5 PUSH2 0xD0D SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2A SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x19 DUP7 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xD87 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0xDEAD DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE8 SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2B SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x32 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SUB PUSH2 0x1001 JUMPI PUSH1 0x64 PUSH1 0x32 DUP7 PUSH2 0xE8A SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xE94 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP8 DUP7 DUP5 PUSH2 0xEE1 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFE SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF41 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x32 DUP7 PUSH2 0xF51 SWAP2 SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH2 0xF5B SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0xDEAD DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBC SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFFF SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH1 0x4 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10EF SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x114A SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1187 PUSH2 0x142C JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x122A CALLER DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x156E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1235 PUSH2 0x142C JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1284 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x12DA CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A3 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH2 0x1328 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1397 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138E SWAP1 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13A0 DUP2 PUSH2 0x14AA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1426 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x15F4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1434 PUSH2 0x16BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1452 PUSH2 0x6F2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x149F SWAP1 PUSH2 0x1FA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15EF DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x158D SWAP3 SWAP2 SWAP1 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x15F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1656 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16C3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x16B6 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1676 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST PUSH2 0x16B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16AC SWAP1 PUSH2 0x203B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x16D2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x16DB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1720 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1717 SWAP1 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1749 SWAP2 SWAP1 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1786 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x178B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x179C DUP8 DUP4 DUP4 DUP8 PUSH2 0x17A8 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x180A JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1802 JUMPI PUSH2 0x17C2 DUP6 PUSH2 0x181D JUMP JUMPDEST PUSH2 0x1801 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F8 SWAP1 PUSH2 0x21C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x1814 DUP4 DUP4 PUSH2 0x1840 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1853 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1887 SWAP2 SWAP1 PUSH2 0x2236 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C0 DUP3 PUSH2 0x1895 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18D0 DUP2 PUSH2 0x18B5 JUMP JUMPDEST DUP2 EQ PUSH2 0x18DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18ED DUP2 PUSH2 0x18C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1909 JUMPI PUSH2 0x1908 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1917 DUP5 DUP3 DUP6 ADD PUSH2 0x18DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1933 DUP2 PUSH2 0x1920 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x195D DUP2 PUSH2 0x1920 JUMP JUMPDEST DUP2 EQ PUSH2 0x1968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x197A DUP2 PUSH2 0x1954 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x199A JUMPI PUSH2 0x1999 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A8 DUP8 DUP3 DUP9 ADD PUSH2 0x18DE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B9 DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19CA DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x19DB DUP8 DUP3 DUP9 ADD PUSH2 0x196B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x19F0 DUP2 PUSH2 0x18B5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A0B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A27 JUMPI PUSH2 0x1A26 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A35 DUP5 DUP3 DUP6 ADD PUSH2 0x196B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A53 DUP2 PUSH2 0x1A3E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1A6E PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A7B PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A88 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1A95 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1AA2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1A4A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AE6 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AF1 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1AFF DUP2 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1B16 JUMPI PUSH2 0x1B15 PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B28 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B33 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75722054696D6520506572696F6420436F6D706C6574652E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B98 PUSH1 0x1A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BA3 DUP3 PUSH2 0x1B62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BC7 DUP2 PUSH2 0x1B8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E746572205269676874205374616B654D6F6E746800000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C04 PUSH1 0x16 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0F DUP3 PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C33 DUP2 PUSH2 0x1BF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E746572205269676874204561726E50657273656E74616765000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C70 PUSH1 0x1A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C7B DUP3 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C9F DUP2 PUSH2 0x1C63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4669727374205374616B6520546F6B656E730000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CDC PUSH1 0x12 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE7 DUP3 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D0B DUP2 PUSH2 0x1CCF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x506C656173652057616974000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D48 PUSH1 0xB DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D53 DUP3 PUSH2 0x1D12 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D77 DUP2 PUSH2 0x1D3B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DB8 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DC3 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1DD3 JUMPI PUSH2 0x1DD2 PUSH2 0x1D7E JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DE9 DUP3 PUSH2 0x1920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DF4 DUP4 PUSH2 0x1920 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1E0C JUMPI PUSH2 0x1E0B PUSH2 0x1AAC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1E27 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1E34 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E44 DUP2 PUSH2 0x1A3E JUMP JUMPDEST DUP2 EQ PUSH2 0x1E4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E61 DUP2 PUSH2 0x1E3B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E7D JUMPI PUSH2 0x1E7C PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E8B DUP5 DUP3 DUP6 ADD PUSH2 0x1E52 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF0 PUSH1 0x26 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFB DUP3 PUSH2 0x1E94 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F1F DUP2 PUSH2 0x1EE3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1F3B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1F48 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH2 0x1F55 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x192A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F93 PUSH1 0x20 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F9E DUP3 PUSH2 0x1F5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FC2 DUP2 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2025 PUSH1 0x2A DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x2030 DUP3 PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2054 DUP2 PUSH2 0x2018 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20B7 PUSH1 0x26 DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x20C2 DUP3 PUSH2 0x205B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20E6 DUP2 PUSH2 0x20AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2121 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2106 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2138 DUP3 PUSH2 0x20ED JUMP JUMPDEST PUSH2 0x2142 DUP2 DUP6 PUSH2 0x20F8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2152 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2103 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 DUP5 PUSH2 0x212D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21AB PUSH1 0x1D DUP4 PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP PUSH2 0x21B6 DUP3 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21DA DUP2 PUSH2 0x219E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2208 DUP3 PUSH2 0x21E1 JUMP JUMPDEST PUSH2 0x2212 DUP2 DUP6 PUSH2 0x1B51 JUMP JUMPDEST SWAP4 POP PUSH2 0x2222 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2103 JUMP JUMPDEST PUSH2 0x222B DUP2 PUSH2 0x21EC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2250 DUP2 DUP5 PUSH2 0x21FD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0x26 0xD3 0xD5 JUMPDEST LOG0 DUP1 0xC4 0xCE DUP9 0xD1 0xB6 0xD6 0xD3 0xA7 PUSH2 0x9730 JUMPI ADDRESS REVERT PUSH1 0x6E JUMPI CREATE2 DUP7 SWAP5 0xBD EXP 0xAA 0xB9 0x49 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "281:4580:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;632:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2048:888;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;384:29;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3131:1728:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;351:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1590:165;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1217:181;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;584:42;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;632:40:9;;;;;;;;;;;;;;;;;:::o;2048:888::-;2161:7;:11;2169:2;2161:11;;;;;;;;;;;;;;;:17;;;;;;;;;;;;2158:703;;;2266:15;2241:7;:11;2249:2;2241:11;;;;;;;;;;;;;;;:21;;;2235:2;2232;2229;2226;2203:7;:11;2211:2;2203:11;;;;;;;;;;;;;;;:22;;;:25;;;;:::i;:::-;:28;;;;:::i;:::-;:31;;;;:::i;:::-;:34;;;;:::i;:::-;2202:60;;;;:::i;:::-;2201:80;2193:118;;;;;;;;;;;;:::i;:::-;;;;;;;;;2359:10;2333:7;:11;2341:2;2333:11;;;;;;;;;;;;;;;:22;;;:36;2325:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;2447:14;2417:7;:11;2425:2;2417:11;;;;;;;;;;;;;;;:26;;;:44;2409:82;;;;;;;;;;;;:::i;:::-;;;;;;;;;2561:7;2533;:11;2541:2;2533:11;;;;;;;;;;;;;;;:25;;;:35;;;;:::i;:::-;2505:7;:11;2513:2;2505:11;;;;;;;;;;;;;;;:25;;:63;;;;2582:66;2620:2;2632:4;2640:7;2589:12;;;;;;;;;;;2582:37;;;;:66;;;;;;:::i;:::-;2158:703;;;2700:62;;;;;;;;2707:7;2700:62;;;;2715:15;2700:62;;;;2731:10;2700:62;;;;2742:14;2700:62;;;;2757:4;2700:62;;;;;2686:7;:11;2694:2;2686:11;;;;;;;;;;;;;;;:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2776:66;2814:2;2826:4;2834:7;2783:12;;;;;;;;;;;2776:37;;;;:66;;;;;;:::i;:::-;2158:703;2884:7;2870:6;:10;2877:2;2870:10;;;;;;;;;;;;;;;;:21;;;;;;;:::i;:::-;;;;;;;;2922:7;2901:17;;:28;;;;;;;:::i;:::-;;;;;;;;2048:888;;;;:::o;384:29::-;;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1201:85::-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;3131:1728:9:-;3192:7;:11;3200:2;3192:11;;;;;;;;;;;;;;;:17;;;;;;;;;;;;3184:47;;;;;;;;;;;;:::i;:::-;;;;;;;;;3314:15;3289:7;:11;3297:2;3289:11;;;;;;;;;;;;;;;:21;;;3283:2;3280;3277;3274;3251:7;:11;3259:2;3251:11;;;;;;;;;;;;;;;:22;;;:25;;;;:::i;:::-;:28;;;;:::i;:::-;:31;;;;:::i;:::-;:34;;;;:::i;:::-;3250:60;;;;:::i;:::-;3249:80;3241:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;3354:19;3383:14;3407;3431:13;3478:4;3474:2;3448:7;:11;3456:2;3448:11;;;;;;;;;;;;;;;:25;;;:28;;;;:::i;:::-;3447:35;;;;:::i;:::-;3431:51;;3492:25;3548:8;3520:7;:11;3528:2;3520:11;;;;;;;;;;;;;;;:25;;;:36;;;;:::i;:::-;3492:64;;3595:1;3569:7;:11;3577:2;3569:11;;;;;;;;;;;;;;;:22;;;:27;3566:337;;3660:3;3656:2;3630:7;:11;3638:2;3630:11;;;;;;;;;;;;;;;:25;;;:28;;;;:::i;:::-;3629:34;;;;:::i;:::-;3611:52;;3566:337;;;3708:1;3682:7;:11;3690:2;3682:11;;;;;;;;;;;;;;;:22;;;:27;3679:224;;3774:4;3769:3;3743:7;:11;3751:2;3743:11;;;;;;;;;;;;;;;:25;;;:29;;;;:::i;:::-;3742:36;;;;:::i;:::-;3724:54;;3679:224;;;3823:2;3797:7;:11;3805:2;3797:11;;;;;;;;;;;;;;;:22;;;:28;3794:109;;3889:3;3885:2;3859:7;:11;3867:2;3859:11;;;;;;;;;;;;;;;:25;;;:28;;;;:::i;:::-;3858:34;;;;:::i;:::-;3840:52;;3794:109;3679:224;3566:337;3945:3;3915:7;:11;3923:2;3915:11;;;;;;;;;;;;;;;:26;;;:33;3912:792;;3970:12;;;;;;;;;;;3963:29;;;3993:2;4020:14;3997:20;:37;;;;:::i;:::-;3963:72;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3912:792;;;4084:2;4054:7;:11;4062:2;4054:11;;;;;;;;;;;;;;;:26;;;:32;4051:653;;4133:3;4129:2;4114:14;:17;;;;:::i;:::-;4113:23;;;;:::i;:::-;4101:35;;4157:12;;;;;;;;;;;4150:29;;;4180:2;4207:9;4184:20;:32;;;;:::i;:::-;4150:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4263:3;4259:2;4244:14;:17;;;;:::i;:::-;4243:23;;;;:::i;:::-;4231:35;;4287:12;;;;;;;;;;;4280:29;;;4310:42;4354:9;4280:84;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4051:653;;;4413:2;4383:7;:11;4391:2;4383:11;;;;;;;;;;;;;;;:26;;;:32;4380:324;;4462:3;4458:2;4443:14;:17;;;;:::i;:::-;4442:23;;;;:::i;:::-;4430:35;;4486:12;;;;;;;;;;;4479:29;;;4509:2;4536:9;4513:20;:32;;;;:::i;:::-;4479:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4592:3;4588:2;4573:14;:17;;;;:::i;:::-;4572:23;;;;:::i;:::-;4560:35;;4616:12;;;;;;;;;;;4609:29;;;4639:42;4683:9;4609:84;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4380:324;4051:653;3912:792;4733:5;4713:7;:11;4721:2;4713:11;;;;;;;;;;;;;;;:17;;;:25;;;;;;;;;;;;;;;;;;4762:7;:11;4770:2;4762:11;;;;;;;;;;;;;;;:25;;;4748:6;:10;4755:2;4748:10;;;;;;;;;;;;;;;;:39;;;;;;;:::i;:::-;;;;;;;;4818:7;:11;4826:2;4818:11;;;;;;;;;;;;;;;:25;;;4797:17;;:46;;;;;;;:::i;:::-;;;;;;;;3174:1685;;;;;3131:1728;:::o;351:27::-;;;;;;;;;;;;;:::o;1590:165::-;1094:13:0;:11;:13::i;:::-;1679:6:9::1;1657;:18;1664:10;1657:18;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;1695:53;1729:10;1741:6;1702:12;;;;;;;;;;;1695:33;;;;:53;;;;;:::i;:::-;1590:165:::0;:::o;1217:181::-;1094:13:0;:11;:13::i;:::-;1301:7:9::1;1280:6;:18;1287:10;1280:18;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;1318:73;1356:10;1376:4;1383:7;1325:12;;;;;;;;;;;1318:37;;;;:73;;;;;;:::i;:::-;1217:181:::0;:::o;584:42::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;::::0;2161:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;974:241:3:-;1112:96;1132:5;1162:27;;;1191:4;1197:2;1201:5;1139:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1112:19;:96::i;:::-;974:241;;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;763:205:3:-;875:86;895:5;925:23;;;950:2;954:5;902:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;875:19;:86::i;:::-;763:205;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4166:95;;4295:1;4275:10;:17;:21;4271:176;;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4271:176;3817:636;3747:706;;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;3873:223:6:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;;3873:223;;;;;:::o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;;;;4960:446;;;;;;:::o;7466:628::-;7646:12;7674:7;7670:418;;;7722:1;7701:10;:17;:22;7697:286;;7916:18;7927:6;7916:10;:18::i;:::-;7908:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:286;8003:10;7996:17;;;;7670:418;8044:33;8052:10;8064:12;8044:7;:33::i;:::-;7466:628;;;;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;8616:540::-;8795:1;8775:10;:17;:21;8771:379;;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:10;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:77::-;1213:7;1242:5;1231:16;;1176:77;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:122::-;1684:24;1702:5;1684:24;:::i;:::-;1677:5;1674:35;1664:63;;1723:1;1720;1713:12;1664:63;1611:122;:::o;1739:139::-;1785:5;1823:6;1810:20;1801:29;;1839:33;1866:5;1839:33;:::i;:::-;1739:139;;;;:::o;1884:765::-;1970:6;1978;1986;1994;2043:3;2031:9;2022:7;2018:23;2014:33;2011:120;;;2050:79;;:::i;:::-;2011:120;2170:1;2195:53;2240:7;2231:6;2220:9;2216:22;2195:53;:::i;:::-;2185:63;;2141:117;2297:2;2323:53;2368:7;2359:6;2348:9;2344:22;2323:53;:::i;:::-;2313:63;;2268:118;2425:2;2451:53;2496:7;2487:6;2476:9;2472:22;2451:53;:::i;:::-;2441:63;;2396:118;2553:2;2579:53;2624:7;2615:6;2604:9;2600:22;2579:53;:::i;:::-;2569:63;;2524:118;1884:765;;;;;;;:::o;2655:118::-;2742:24;2760:5;2742:24;:::i;:::-;2737:3;2730:37;2655:118;;:::o;2779:222::-;2872:4;2910:2;2899:9;2895:18;2887:26;;2923:71;2991:1;2980:9;2976:17;2967:6;2923:71;:::i;:::-;2779:222;;;;:::o;3007:329::-;3066:6;3115:2;3103:9;3094:7;3090:23;3086:32;3083:119;;;3121:79;;:::i;:::-;3083:119;3241:1;3266:53;3311:7;3302:6;3291:9;3287:22;3266:53;:::i;:::-;3256:63;;3212:117;3007:329;;;;:::o;3342:90::-;3376:7;3419:5;3412:13;3405:21;3394:32;;3342:90;;;:::o;3438:109::-;3519:21;3534:5;3519:21;:::i;:::-;3514:3;3507:34;3438:109;;:::o;3553:652::-;3752:4;3790:3;3779:9;3775:19;3767:27;;3804:71;3872:1;3861:9;3857:17;3848:6;3804:71;:::i;:::-;3885:72;3953:2;3942:9;3938:18;3929:6;3885:72;:::i;:::-;3967;4035:2;4024:9;4020:18;4011:6;3967:72;:::i;:::-;4049;4117:2;4106:9;4102:18;4093:6;4049:72;:::i;:::-;4131:67;4193:3;4182:9;4178:19;4169:6;4131:67;:::i;:::-;3553:652;;;;;;;;:::o;4211:180::-;4259:77;4256:1;4249:88;4356:4;4353:1;4346:15;4380:4;4377:1;4370:15;4397:410;4437:7;4460:20;4478:1;4460:20;:::i;:::-;4455:25;;4494:20;4512:1;4494:20;:::i;:::-;4489:25;;4549:1;4546;4542:9;4571:30;4589:11;4571:30;:::i;:::-;4560:41;;4750:1;4741:7;4737:15;4734:1;4731:22;4711:1;4704:9;4684:83;4661:139;;4780:18;;:::i;:::-;4661:139;4445:362;4397:410;;;;:::o;4813:191::-;4853:3;4872:20;4890:1;4872:20;:::i;:::-;4867:25;;4906:20;4924:1;4906:20;:::i;:::-;4901:25;;4949:1;4946;4942:9;4935:16;;4970:3;4967:1;4964:10;4961:36;;;4977:18;;:::i;:::-;4961:36;4813:191;;;;:::o;5010:169::-;5094:11;5128:6;5123:3;5116:19;5168:4;5163:3;5159:14;5144:29;;5010:169;;;;:::o;5185:176::-;5325:28;5321:1;5313:6;5309:14;5302:52;5185:176;:::o;5367:366::-;5509:3;5530:67;5594:2;5589:3;5530:67;:::i;:::-;5523:74;;5606:93;5695:3;5606:93;:::i;:::-;5724:2;5719:3;5715:12;5708:19;;5367:366;;;:::o;5739:419::-;5905:4;5943:2;5932:9;5928:18;5920:26;;5992:9;5986:4;5982:20;5978:1;5967:9;5963:17;5956:47;6020:131;6146:4;6020:131;:::i;:::-;6012:139;;5739:419;;;:::o;6164:172::-;6304:24;6300:1;6292:6;6288:14;6281:48;6164:172;:::o;6342:366::-;6484:3;6505:67;6569:2;6564:3;6505:67;:::i;:::-;6498:74;;6581:93;6670:3;6581:93;:::i;:::-;6699:2;6694:3;6690:12;6683:19;;6342:366;;;:::o;6714:419::-;6880:4;6918:2;6907:9;6903:18;6895:26;;6967:9;6961:4;6957:20;6953:1;6942:9;6938:17;6931:47;6995:131;7121:4;6995:131;:::i;:::-;6987:139;;6714:419;;;:::o;7139:176::-;7279:28;7275:1;7267:6;7263:14;7256:52;7139:176;:::o;7321:366::-;7463:3;7484:67;7548:2;7543:3;7484:67;:::i;:::-;7477:74;;7560:93;7649:3;7560:93;:::i;:::-;7678:2;7673:3;7669:12;7662:19;;7321:366;;;:::o;7693:419::-;7859:4;7897:2;7886:9;7882:18;7874:26;;7946:9;7940:4;7936:20;7932:1;7921:9;7917:17;7910:47;7974:131;8100:4;7974:131;:::i;:::-;7966:139;;7693:419;;;:::o;8118:168::-;8258:20;8254:1;8246:6;8242:14;8235:44;8118:168;:::o;8292:366::-;8434:3;8455:67;8519:2;8514:3;8455:67;:::i;:::-;8448:74;;8531:93;8620:3;8531:93;:::i;:::-;8649:2;8644:3;8640:12;8633:19;;8292:366;;;:::o;8664:419::-;8830:4;8868:2;8857:9;8853:18;8845:26;;8917:9;8911:4;8907:20;8903:1;8892:9;8888:17;8881:47;8945:131;9071:4;8945:131;:::i;:::-;8937:139;;8664:419;;;:::o;9089:161::-;9229:13;9225:1;9217:6;9213:14;9206:37;9089:161;:::o;9256:366::-;9398:3;9419:67;9483:2;9478:3;9419:67;:::i;:::-;9412:74;;9495:93;9584:3;9495:93;:::i;:::-;9613:2;9608:3;9604:12;9597:19;;9256:366;;;:::o;9628:419::-;9794:4;9832:2;9821:9;9817:18;9809:26;;9881:9;9875:4;9871:20;9867:1;9856:9;9852:17;9845:47;9909:131;10035:4;9909:131;:::i;:::-;9901:139;;9628:419;;;:::o;10053:180::-;10101:77;10098:1;10091:88;10198:4;10195:1;10188:15;10222:4;10219:1;10212:15;10239:185;10279:1;10296:20;10314:1;10296:20;:::i;:::-;10291:25;;10330:20;10348:1;10330:20;:::i;:::-;10325:25;;10369:1;10359:35;;10374:18;;:::i;:::-;10359:35;10416:1;10413;10409:9;10404:14;;10239:185;;;;:::o;10430:194::-;10470:4;10490:20;10508:1;10490:20;:::i;:::-;10485:25;;10524:20;10542:1;10524:20;:::i;:::-;10519:25;;10568:1;10565;10561:9;10553:17;;10592:1;10586:4;10583:11;10580:37;;;10597:18;;:::i;:::-;10580:37;10430:194;;;;:::o;10630:332::-;10751:4;10789:2;10778:9;10774:18;10766:26;;10802:71;10870:1;10859:9;10855:17;10846:6;10802:71;:::i;:::-;10883:72;10951:2;10940:9;10936:18;10927:6;10883:72;:::i;:::-;10630:332;;;;;:::o;10968:116::-;11038:21;11053:5;11038:21;:::i;:::-;11031:5;11028:32;11018:60;;11074:1;11071;11064:12;11018:60;10968:116;:::o;11090:137::-;11144:5;11175:6;11169:13;11160:22;;11191:30;11215:5;11191:30;:::i;:::-;11090:137;;;;:::o;11233:345::-;11300:6;11349:2;11337:9;11328:7;11324:23;11320:32;11317:119;;;11355:79;;:::i;:::-;11317:119;11475:1;11500:61;11553:7;11544:6;11533:9;11529:22;11500:61;:::i;:::-;11490:71;;11446:125;11233:345;;;;:::o;11584:225::-;11724:34;11720:1;11712:6;11708:14;11701:58;11793:8;11788:2;11780:6;11776:15;11769:33;11584:225;:::o;11815:366::-;11957:3;11978:67;12042:2;12037:3;11978:67;:::i;:::-;11971:74;;12054:93;12143:3;12054:93;:::i;:::-;12172:2;12167:3;12163:12;12156:19;;11815:366;;;:::o;12187:419::-;12353:4;12391:2;12380:9;12376:18;12368:26;;12440:9;12434:4;12430:20;12426:1;12415:9;12411:17;12404:47;12468:131;12594:4;12468:131;:::i;:::-;12460:139;;12187:419;;;:::o;12612:442::-;12761:4;12799:2;12788:9;12784:18;12776:26;;12812:71;12880:1;12869:9;12865:17;12856:6;12812:71;:::i;:::-;12893:72;12961:2;12950:9;12946:18;12937:6;12893:72;:::i;:::-;12975;13043:2;13032:9;13028:18;13019:6;12975:72;:::i;:::-;12612:442;;;;;;:::o;13060:182::-;13200:34;13196:1;13188:6;13184:14;13177:58;13060:182;:::o;13248:366::-;13390:3;13411:67;13475:2;13470:3;13411:67;:::i;:::-;13404:74;;13487:93;13576:3;13487:93;:::i;:::-;13605:2;13600:3;13596:12;13589:19;;13248:366;;;:::o;13620:419::-;13786:4;13824:2;13813:9;13809:18;13801:26;;13873:9;13867:4;13863:20;13859:1;13848:9;13844:17;13837:47;13901:131;14027:4;13901:131;:::i;:::-;13893:139;;13620:419;;;:::o;14045:229::-;14185:34;14181:1;14173:6;14169:14;14162:58;14254:12;14249:2;14241:6;14237:15;14230:37;14045:229;:::o;14280:366::-;14422:3;14443:67;14507:2;14502:3;14443:67;:::i;:::-;14436:74;;14519:93;14608:3;14519:93;:::i;:::-;14637:2;14632:3;14628:12;14621:19;;14280:366;;;:::o;14652:419::-;14818:4;14856:2;14845:9;14841:18;14833:26;;14905:9;14899:4;14895:20;14891:1;14880:9;14876:17;14869:47;14933:131;15059:4;14933:131;:::i;:::-;14925:139;;14652:419;;;:::o;15077:225::-;15217:34;15213:1;15205:6;15201:14;15194:58;15286:8;15281:2;15273:6;15269:15;15262:33;15077:225;:::o;15308:366::-;15450:3;15471:67;15535:2;15530:3;15471:67;:::i;:::-;15464:74;;15547:93;15636:3;15547:93;:::i;:::-;15665:2;15660:3;15656:12;15649:19;;15308:366;;;:::o;15680:419::-;15846:4;15884:2;15873:9;15869:18;15861:26;;15933:9;15927:4;15923:20;15919:1;15908:9;15904:17;15897:47;15961:131;16087:4;15961:131;:::i;:::-;15953:139;;15680:419;;;:::o;16105:98::-;16156:6;16190:5;16184:12;16174:22;;16105:98;;;:::o;16209:147::-;16310:11;16347:3;16332:18;;16209:147;;;;:::o;16362:246::-;16443:1;16453:113;16467:6;16464:1;16461:13;16453:113;;;16552:1;16547:3;16543:11;16537:18;16533:1;16528:3;16524:11;16517:39;16489:2;16486:1;16482:10;16477:15;;16453:113;;;16600:1;16591:6;16586:3;16582:16;16575:27;16424:184;16362:246;;;:::o;16614:386::-;16718:3;16746:38;16778:5;16746:38;:::i;:::-;16800:88;16881:6;16876:3;16800:88;:::i;:::-;16793:95;;16897:65;16955:6;16950:3;16943:4;16936:5;16932:16;16897:65;:::i;:::-;16987:6;16982:3;16978:16;16971:23;;16722:278;16614:386;;;;:::o;17006:271::-;17136:3;17158:93;17247:3;17238:6;17158:93;:::i;:::-;17151:100;;17268:3;17261:10;;17006:271;;;;:::o;17283:179::-;17423:31;17419:1;17411:6;17407:14;17400:55;17283:179;:::o;17468:366::-;17610:3;17631:67;17695:2;17690:3;17631:67;:::i;:::-;17624:74;;17707:93;17796:3;17707:93;:::i;:::-;17825:2;17820:3;17816:12;17809:19;;17468:366;;;:::o;17840:419::-;18006:4;18044:2;18033:9;18029:18;18021:26;;18093:9;18087:4;18083:20;18079:1;18068:9;18064:17;18057:47;18121:131;18247:4;18121:131;:::i;:::-;18113:139;;17840:419;;;:::o;18265:99::-;18317:6;18351:5;18345:12;18335:22;;18265:99;;;:::o;18370:102::-;18411:6;18462:2;18458:7;18453:2;18446:5;18442:14;18438:28;18428:38;;18370:102;;;:::o;18478:377::-;18566:3;18594:39;18627:5;18594:39;:::i;:::-;18649:71;18713:6;18708:3;18649:71;:::i;:::-;18642:78;;18729:65;18787:6;18782:3;18775:4;18768:5;18764:16;18729:65;:::i;:::-;18819:29;18841:6;18819:29;:::i;:::-;18814:3;18810:39;18803:46;;18570:285;18478:377;;;;:::o;18861:313::-;18974:4;19012:2;19001:9;18997:18;18989:26;;19061:9;19055:4;19051:20;19047:1;19036:9;19032:17;19025:47;19089:78;19162:4;19153:6;19089:78;:::i;:::-;19081:86;;18861:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1769200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AdminAddToken(uint256)": "infinite",
								"AdminWithDrawToken(uint256)": "infinite",
								"DepositTokens(address,uint256,uint256,uint256)": "infinite",
								"Details(address)": "infinite",
								"ERC20Address()": "2536",
								"Tokens(address)": "2815",
								"WithdrawTokens(address)": "infinite",
								"owner()": "2611",
								"renounceOwnership()": "30465",
								"totalStakedTokens()": "2474",
								"transferOwnership(address)": "30854"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 911,
									"end": 991,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 911,
									"end": 991,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 971,
									"end": 984,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 956,
									"end": 968,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 956,
									"end": 968,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 956,
									"end": 984,
									"name": "PUSH",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 956,
									"end": 984,
									"name": "EXP",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 956,
									"end": 984,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 956,
									"end": 984,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 956,
									"end": 984,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 911,
									"end": 991,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "tag",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 4861,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d326d3d55ba080c4ce88d1b6d6d3a76197305730fd606e57f58694bd0aaab94964736f6c63430008120033",
									".code": [
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "9131A05A"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "9131A05A"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "A6021ACE"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "A88E132F"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "C0CD40EE"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "E88CC2BE"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "DEEF63A"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "10C404DA"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "3AE73259"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 4861,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 632,
											"end": 672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 632,
											"end": 672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 632,
											"end": 672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 2048,
											"end": 2936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2048,
											"end": 2936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 384,
											"end": 413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 384,
											"end": 413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1201,
											"end": 1286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1201,
											"end": 1286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 3131,
											"end": 4859,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 3131,
											"end": 4859,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 351,
											"end": 378,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 351,
											"end": 378,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1590,
											"end": 1755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1590,
											"end": 1755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1217,
											"end": 1398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 1217,
											"end": 1398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 584,
											"end": 626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 584,
											"end": 626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 584,
											"end": 626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 632,
											"end": 672,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 632,
											"end": 672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2168,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2171,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2161,
											"end": 2172,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2266,
											"end": 2281,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2248,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2251,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2241,
											"end": 2252,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2241,
											"end": 2262,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2241,
											"end": 2262,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 2232,
											"end": 2234,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2229,
											"end": 2231,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 2226,
											"end": 2228,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 2203,
											"end": 2210,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2211,
											"end": 2213,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2225,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2203,
											"end": 2225,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2225,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2203,
											"end": 2228,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2203,
											"end": 2228,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2203,
											"end": 2231,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 2203,
											"end": 2231,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2203,
											"end": 2234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2203,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2203,
											"end": 2237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 2203,
											"end": 2237,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2202,
											"end": 2262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 2202,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2201,
											"end": 2281,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2193,
											"end": 2311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2193,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2369,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2340,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2333,
											"end": 2344,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2355,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2333,
											"end": 2355,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2355,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2369,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 2325,
											"end": 2395,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2325,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2447,
											"end": 2461,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2424,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2425,
											"end": 2427,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2417,
											"end": 2428,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2443,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2417,
											"end": 2443,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2443,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2417,
											"end": 2461,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 2409,
											"end": 2491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 2409,
											"end": 2491,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2561,
											"end": 2568,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2540,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2543,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2533,
											"end": 2544,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2558,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2533,
											"end": 2558,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2558,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2533,
											"end": 2568,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 2533,
											"end": 2568,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2512,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2513,
											"end": 2515,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2516,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2530,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2530,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2568,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2568,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2568,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2505,
											"end": 2568,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 2620,
											"end": 2622,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2632,
											"end": 2636,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2647,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2619,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2582,
											"end": 2619,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2582,
											"end": 2619,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 2582,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2707,
											"end": 2714,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2715,
											"end": 2730,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2731,
											"end": 2741,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2742,
											"end": 2756,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 2761,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2700,
											"end": 2762,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2693,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2694,
											"end": 2696,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2697,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2762,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 2814,
											"end": 2816,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2826,
											"end": 2830,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 2834,
											"end": 2841,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2783,
											"end": 2795,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2813,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2776,
											"end": 2813,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2813,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2776,
											"end": 2813,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 2776,
											"end": 2842,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 2158,
											"end": 2861,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2884,
											"end": 2891,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2876,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2877,
											"end": 2879,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2880,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2870,
											"end": 2891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2891,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2922,
											"end": 2929,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2918,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2901,
											"end": 2918,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2901,
											"end": 2929,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 384,
											"end": 413,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 384,
											"end": 413,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1922,
											"end": 1923,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1895,
											"end": 1925,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3199,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3200,
											"end": 3202,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3192,
											"end": 3203,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3192,
											"end": 3209,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 3184,
											"end": 3231,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 3184,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3314,
											"end": 3329,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3296,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3297,
											"end": 3299,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3289,
											"end": 3300,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3310,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3289,
											"end": 3310,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3310,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3283,
											"end": 3285,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 3280,
											"end": 3282,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3277,
											"end": 3279,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 3274,
											"end": 3276,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 3251,
											"end": 3258,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3259,
											"end": 3261,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3251,
											"end": 3262,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3273,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3251,
											"end": 3273,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3273,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3251,
											"end": 3276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3251,
											"end": 3276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3251,
											"end": 3279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3251,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3251,
											"end": 3282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3251,
											"end": 3285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3251,
											"end": 3285,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3250,
											"end": 3310,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3250,
											"end": 3310,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3249,
											"end": 3329,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 3241,
											"end": 3344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 3241,
											"end": 3344,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3354,
											"end": 3373,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3383,
											"end": 3397,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3407,
											"end": 3421,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3444,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3478,
											"end": 3482,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3474,
											"end": 3476,
											"name": "PUSH",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 3448,
											"end": 3455,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3456,
											"end": 3458,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3448,
											"end": 3459,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3473,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3448,
											"end": 3473,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3473,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3448,
											"end": 3476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 3448,
											"end": 3476,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 3447,
											"end": 3482,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3447,
											"end": 3482,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3431,
											"end": 3482,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3431,
											"end": 3482,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3517,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3548,
											"end": 3556,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3527,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3528,
											"end": 3530,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3545,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3520,
											"end": 3545,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3545,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 3520,
											"end": 3556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 3520,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3556,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3595,
											"end": 3596,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3569,
											"end": 3576,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3577,
											"end": 3579,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3569,
											"end": 3580,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3591,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3569,
											"end": 3591,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3591,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3569,
											"end": 3596,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3663,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3656,
											"end": 3658,
											"name": "PUSH",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 3630,
											"end": 3637,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3638,
											"end": 3640,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 3641,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3655,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 3655,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3655,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3630,
											"end": 3658,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "tag",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 3630,
											"end": 3658,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 3629,
											"end": 3663,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 3629,
											"end": 3663,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3611,
											"end": 3663,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3611,
											"end": 3663,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "tag",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3708,
											"end": 3709,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 3682,
											"end": 3689,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3690,
											"end": 3692,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3682,
											"end": 3693,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3704,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3682,
											"end": 3704,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3704,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3682,
											"end": 3709,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3774,
											"end": 3778,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 3769,
											"end": 3772,
											"name": "PUSH",
											"source": 9,
											"value": "E1"
										},
										{
											"begin": 3743,
											"end": 3750,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3751,
											"end": 3753,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3768,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3768,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3768,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3743,
											"end": 3772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 3743,
											"end": 3772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 3742,
											"end": 3778,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3778,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3778,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3823,
											"end": 3825,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 3797,
											"end": 3804,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3805,
											"end": 3807,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3797,
											"end": 3808,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3819,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3797,
											"end": 3819,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3819,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3797,
											"end": 3825,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3794,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 3794,
											"end": 3903,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3889,
											"end": 3892,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3885,
											"end": 3887,
											"name": "PUSH",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 3859,
											"end": 3866,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3867,
											"end": 3869,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3859,
											"end": 3870,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3884,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3859,
											"end": 3884,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3884,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3859,
											"end": 3887,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3859,
											"end": 3887,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 3858,
											"end": 3892,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 3858,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3840,
											"end": 3892,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3840,
											"end": 3892,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3794,
											"end": 3903,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 3794,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 3679,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3566,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3945,
											"end": 3948,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3915,
											"end": 3922,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3925,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 3926,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3941,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3915,
											"end": 3941,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3941,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3915,
											"end": 3948,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3970,
											"end": 3982,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 3992,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3963,
											"end": 3992,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 3992,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 3993,
											"end": 3995,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4020,
											"end": 4034,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3997,
											"end": 4017,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3997,
											"end": 4034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 3997,
											"end": 4034,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 3963,
											"end": 4035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 3963,
											"end": 4035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 4035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4084,
											"end": 4086,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 4054,
											"end": 4061,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4062,
											"end": 4064,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4054,
											"end": 4065,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4080,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4054,
											"end": 4080,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4080,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4086,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4133,
											"end": 4136,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4129,
											"end": 4131,
											"name": "PUSH",
											"source": 9,
											"value": "4B"
										},
										{
											"begin": 4114,
											"end": 4128,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 4114,
											"end": 4131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 4114,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4113,
											"end": 4136,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 4113,
											"end": 4136,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4101,
											"end": 4136,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4101,
											"end": 4136,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4179,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4150,
											"end": 4179,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4179,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 4180,
											"end": 4182,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4207,
											"end": 4216,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4204,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 4184,
											"end": 4216,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4150,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 4150,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4263,
											"end": 4266,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4259,
											"end": 4261,
											"name": "PUSH",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 4244,
											"end": 4258,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 4244,
											"end": 4261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 4244,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4243,
											"end": 4266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 4243,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4266,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4266,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4309,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4280,
											"end": 4309,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4309,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 4310,
											"end": 4352,
											"name": "PUSH",
											"source": 9,
											"value": "DEAD"
										},
										{
											"begin": 4354,
											"end": 4363,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4280,
											"end": 4364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "tag",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 4280,
											"end": 4364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4364,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4413,
											"end": 4415,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 4383,
											"end": 4390,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4393,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4383,
											"end": 4394,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4409,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4383,
											"end": 4409,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4409,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4383,
											"end": 4415,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4380,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 4380,
											"end": 4704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4462,
											"end": 4465,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 4443,
											"end": 4457,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 4443,
											"end": 4460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 4443,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4442,
											"end": 4465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 4442,
											"end": 4465,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4430,
											"end": 4465,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4430,
											"end": 4465,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4486,
											"end": 4498,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4508,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4479,
											"end": 4508,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4508,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4536,
											"end": 4545,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4513,
											"end": 4533,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 4513,
											"end": 4545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 4513,
											"end": 4545,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4479,
											"end": 4546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 4479,
											"end": 4546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4592,
											"end": 4595,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4588,
											"end": 4590,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 4573,
											"end": 4587,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 4573,
											"end": 4590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 4573,
											"end": 4590,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4572,
											"end": 4595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 4572,
											"end": 4595,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4560,
											"end": 4595,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4560,
											"end": 4595,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4616,
											"end": 4628,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4638,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4609,
											"end": 4638,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4638,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 4639,
											"end": 4681,
											"name": "PUSH",
											"source": 9,
											"value": "DEAD"
										},
										{
											"begin": 4683,
											"end": 4692,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 4609,
											"end": 4693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 4609,
											"end": 4693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4609,
											"end": 4693,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4380,
											"end": 4704,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 4380,
											"end": 4704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 4051,
											"end": 4704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 3912,
											"end": 4704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4733,
											"end": 4738,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4713,
											"end": 4720,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4721,
											"end": 4723,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4713,
											"end": 4724,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4730,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4713,
											"end": 4730,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4730,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4738,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4769,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4770,
											"end": 4772,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4762,
											"end": 4773,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4787,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4762,
											"end": 4787,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4762,
											"end": 4787,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4754,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4755,
											"end": 4757,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4758,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 4748,
											"end": 4787,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4748,
											"end": 4787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4825,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4826,
											"end": 4828,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4829,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4843,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4843,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4818,
											"end": 4843,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4814,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 4797,
											"end": 4814,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 4797,
											"end": 4843,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4843,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3131,
											"end": 4859,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 351,
											"end": 378,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 351,
											"end": 378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1679,
											"end": 1685,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1663,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1664,
											"end": 1674,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1675,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 1657,
											"end": 1685,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1657,
											"end": 1685,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1729,
											"end": 1739,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1741,
											"end": 1747,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1702,
											"end": 1714,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1728,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1695,
											"end": 1728,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1728,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 1695,
											"end": 1728,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1695,
											"end": 1748,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1755,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1301,
											"end": 1308,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1286,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1297,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 1280,
											"end": 1308,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1280,
											"end": 1308,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1356,
											"end": 1366,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1376,
											"end": 1380,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1383,
											"end": 1390,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1325,
											"end": 1337,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1355,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1318,
											"end": 1355,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1355,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 1318,
											"end": 1355,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1318,
											"end": 1391,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1217,
											"end": 1398,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 584,
											"end": 626,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 584,
											"end": 626,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 2161,
											"end": 2234,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 2263,
											"end": 2271,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2244,
											"end": 2272,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1191,
											"end": 1195,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1199,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1201,
											"end": 1206,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 1139,
											"end": 1207,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 1112,
											"end": 1208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1433,
											"end": 1445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1422,
											"end": 1429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1414,
											"end": 1482,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 925,
											"end": 948,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 925,
											"end": 948,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 950,
											"end": 952,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 954,
											"end": 959,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 902,
											"end": 960,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "tag",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 875,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 875,
											"end": 961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4295,
											"end": 4296,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 4359,
											"end": 4389,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 4351,
											"end": 4436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "tag",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3817,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3747,
											"end": 4453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 4037,
											"end": 4089,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 5149,
											"end": 5230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 5282,
											"end": 5313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5330,
											"end": 5399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 7927,
											"end": 7933,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7916,
											"end": 7926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 7916,
											"end": 7934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 7908,
											"end": 7968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8044,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 8044,
											"end": 8077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7466,
											"end": 8094,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1175,
											"end": 1495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8616,
											"end": 9156,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 8616,
											"end": 9156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8795,
											"end": 8796,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8775,
											"end": 8785,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 9119,
											"end": 9139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 900,
											"end": 906,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 951,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 946,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 928,
											"end": 935,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 924,
											"end": 947,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 920,
											"end": 952,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 955,
											"end": 1034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "tag",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1075,
											"end": 1076,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 1145,
											"end": 1152,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1125,
											"end": 1134,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1143,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 1100,
											"end": 1153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "tag",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1163,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 1170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1213,
											"end": 1220,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1242,
											"end": 1247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1231,
											"end": 1247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1231,
											"end": 1247,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1176,
											"end": 1253,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "tag",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 1364,
											"end": 1369,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 1346,
											"end": 1370,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1341,
											"end": 1344,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1334,
											"end": 1371,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1259,
											"end": 1377,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1476,
											"end": 1480,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1514,
											"end": 1516,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1503,
											"end": 1512,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1517,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1491,
											"end": 1517,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1491,
											"end": 1517,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 1595,
											"end": 1596,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1593,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1580,
											"end": 1597,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1571,
											"end": 1577,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 1527,
											"end": 1598,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 1605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 1702,
											"end": 1707,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 1684,
											"end": 1708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "tag",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1677,
											"end": 1682,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1674,
											"end": 1709,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1723,
											"end": 1724,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1713,
											"end": 1725,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1823,
											"end": 1829,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1801,
											"end": 1830,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1801,
											"end": 1830,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 1866,
											"end": 1871,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 1839,
											"end": 1872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "tag",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1739,
											"end": 1878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1970,
											"end": 1976,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 1984,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1986,
											"end": 1992,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1994,
											"end": 2000,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2043,
											"end": 2046,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2031,
											"end": 2040,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2022,
											"end": 2029,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2018,
											"end": 2041,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2014,
											"end": 2047,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2131,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2131,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 2011,
											"end": 2131,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2050,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 2050,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 2050,
											"end": 2129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2050,
											"end": 2129,
											"name": "tag",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 2050,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2131,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 2011,
											"end": 2131,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2170,
											"end": 2171,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 2240,
											"end": 2247,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2231,
											"end": 2237,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2220,
											"end": 2229,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2216,
											"end": 2238,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2195,
											"end": 2248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 2195,
											"end": 2248,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2195,
											"end": 2248,
											"name": "tag",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 2195,
											"end": 2248,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2185,
											"end": 2248,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2185,
											"end": 2248,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2141,
											"end": 2258,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2297,
											"end": 2299,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 2368,
											"end": 2375,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2359,
											"end": 2365,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2348,
											"end": 2357,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2323,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 2323,
											"end": 2376,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2323,
											"end": 2376,
											"name": "tag",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 2323,
											"end": 2376,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2313,
											"end": 2376,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2313,
											"end": 2376,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2268,
											"end": 2386,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2425,
											"end": 2427,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2451,
											"end": 2504,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 2496,
											"end": 2503,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2487,
											"end": 2493,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2476,
											"end": 2485,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2494,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2451,
											"end": 2504,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 2451,
											"end": 2504,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2451,
											"end": 2504,
											"name": "tag",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 2451,
											"end": 2504,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2441,
											"end": 2504,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2441,
											"end": 2504,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2553,
											"end": 2555,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2632,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 2624,
											"end": 2631,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2615,
											"end": 2621,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2604,
											"end": 2613,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2600,
											"end": 2622,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2579,
											"end": 2632,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 2579,
											"end": 2632,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2579,
											"end": 2632,
											"name": "tag",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 2579,
											"end": 2632,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2569,
											"end": 2632,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2569,
											"end": 2632,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2524,
											"end": 2642,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 2649,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2655,
											"end": 2773,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 2655,
											"end": 2773,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2742,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 2760,
											"end": 2765,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2742,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 2742,
											"end": 2766,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2742,
											"end": 2766,
											"name": "tag",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 2742,
											"end": 2766,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2737,
											"end": 2740,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2730,
											"end": 2767,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2655,
											"end": 2773,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2655,
											"end": 2773,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2655,
											"end": 2773,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2876,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2910,
											"end": 2912,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2899,
											"end": 2908,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 2913,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2887,
											"end": 2913,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2887,
											"end": 2913,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2994,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 2991,
											"end": 2992,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2980,
											"end": 2989,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 2993,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2967,
											"end": 2973,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2994,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 2923,
											"end": 2994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2994,
											"name": "tag",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 2923,
											"end": 2994,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 3001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3072,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3115,
											"end": 3117,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3103,
											"end": 3112,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3094,
											"end": 3101,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3090,
											"end": 3113,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3086,
											"end": 3118,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3083,
											"end": 3202,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3083,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 3083,
											"end": 3202,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3121,
											"end": 3200,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 3121,
											"end": 3200,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 3121,
											"end": 3200,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3121,
											"end": 3200,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 3121,
											"end": 3200,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3083,
											"end": 3202,
											"name": "tag",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 3083,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3266,
											"end": 3319,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 3311,
											"end": 3318,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3302,
											"end": 3308,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3291,
											"end": 3300,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3309,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3266,
											"end": 3319,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 3266,
											"end": 3319,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3266,
											"end": 3319,
											"name": "tag",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 3266,
											"end": 3319,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3256,
											"end": 3319,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3256,
											"end": 3319,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3212,
											"end": 3329,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3007,
											"end": 3336,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3342,
											"end": 3432,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 3342,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3376,
											"end": 3383,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3412,
											"end": 3425,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3405,
											"end": 3426,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3394,
											"end": 3426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3394,
											"end": 3426,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3342,
											"end": 3432,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3342,
											"end": 3432,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3342,
											"end": 3432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3342,
											"end": 3432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3438,
											"end": 3547,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 3438,
											"end": 3547,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3519,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 3534,
											"end": 3539,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3519,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 3519,
											"end": 3540,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3519,
											"end": 3540,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 3519,
											"end": 3540,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3514,
											"end": 3517,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3507,
											"end": 3541,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3438,
											"end": 3547,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3438,
											"end": 3547,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3438,
											"end": 3547,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3752,
											"end": 3756,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3790,
											"end": 3793,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 3779,
											"end": 3788,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3775,
											"end": 3794,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3794,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3804,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 3872,
											"end": 3873,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3861,
											"end": 3870,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3857,
											"end": 3874,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3848,
											"end": 3854,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3804,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 3804,
											"end": 3875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3804,
											"end": 3875,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 3804,
											"end": 3875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3885,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 3953,
											"end": 3955,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 3951,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3929,
											"end": 3935,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3885,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 3885,
											"end": 3957,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3885,
											"end": 3957,
											"name": "tag",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 3885,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3967,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 4035,
											"end": 4037,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4024,
											"end": 4033,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4020,
											"end": 4038,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4011,
											"end": 4017,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3967,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 3967,
											"end": 4039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3967,
											"end": 4039,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3967,
											"end": 4039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 4117,
											"end": 4119,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4106,
											"end": 4115,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4102,
											"end": 4120,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4093,
											"end": 4099,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 4049,
											"end": 4121,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4121,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 4049,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4198,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 4193,
											"end": 4196,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4182,
											"end": 4191,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4178,
											"end": 4197,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4169,
											"end": 4175,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4198,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 4131,
											"end": 4198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4198,
											"name": "tag",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 4131,
											"end": 4198,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 4205,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4211,
											"end": 4391,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 4211,
											"end": 4391,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4336,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4256,
											"end": 4257,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4249,
											"end": 4337,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4356,
											"end": 4360,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 4353,
											"end": 4354,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4346,
											"end": 4361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4380,
											"end": 4384,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4377,
											"end": 4378,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4370,
											"end": 4385,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4437,
											"end": 4444,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4480,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 4478,
											"end": 4479,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4460,
											"end": 4480,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4460,
											"end": 4480,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4460,
											"end": 4480,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 4460,
											"end": 4480,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4455,
											"end": 4480,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4455,
											"end": 4480,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4494,
											"end": 4514,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 4512,
											"end": 4513,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4494,
											"end": 4514,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4494,
											"end": 4514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4494,
											"end": 4514,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 4494,
											"end": 4514,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4489,
											"end": 4514,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4489,
											"end": 4514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4549,
											"end": 4550,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4546,
											"end": 4547,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4542,
											"end": 4551,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 4589,
											"end": 4600,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4571,
											"end": 4601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4601,
											"name": "tag",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 4571,
											"end": 4601,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4560,
											"end": 4601,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4560,
											"end": 4601,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4750,
											"end": 4751,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4741,
											"end": 4748,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4737,
											"end": 4752,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 4734,
											"end": 4735,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4731,
											"end": 4753,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4711,
											"end": 4712,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4704,
											"end": 4713,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4684,
											"end": 4767,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 4661,
											"end": 4800,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 4661,
											"end": 4800,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 4780,
											"end": 4798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "tag",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4661,
											"end": 4800,
											"name": "tag",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 4661,
											"end": 4800,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4445,
											"end": 4807,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4807,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4853,
											"end": 4856,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4872,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 4890,
											"end": 4891,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4872,
											"end": 4892,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4892,
											"name": "tag",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 4872,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4867,
											"end": 4892,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4867,
											"end": 4892,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4906,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 4924,
											"end": 4925,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4906,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4906,
											"end": 4926,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4906,
											"end": 4926,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 4906,
											"end": 4926,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4901,
											"end": 4926,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4901,
											"end": 4926,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4949,
											"end": 4950,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4946,
											"end": 4947,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4942,
											"end": 4951,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 4951,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 4951,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4970,
											"end": 4973,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4968,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4964,
											"end": 4974,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4961,
											"end": 4997,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4961,
											"end": 4997,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 4961,
											"end": 4997,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4977,
											"end": 4995,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 4977,
											"end": 4995,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 4977,
											"end": 4995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4977,
											"end": 4995,
											"name": "tag",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 4977,
											"end": 4995,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4961,
											"end": 4997,
											"name": "tag",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 4961,
											"end": 4997,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 5004,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5094,
											"end": 5105,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5128,
											"end": 5134,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5123,
											"end": 5126,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5116,
											"end": 5135,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5163,
											"end": 5166,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5159,
											"end": 5173,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5144,
											"end": 5173,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5144,
											"end": 5173,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5185,
											"end": 5361,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 5185,
											"end": 5361,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5325,
											"end": 5353,
											"name": "PUSH",
											"source": 10,
											"value": "596F75722054696D6520506572696F6420436F6D706C6574652E000000000000"
										},
										{
											"begin": 5321,
											"end": 5322,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5313,
											"end": 5319,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5309,
											"end": 5323,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5302,
											"end": 5354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5185,
											"end": 5361,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5185,
											"end": 5361,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5733,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 5367,
											"end": 5733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5509,
											"end": 5512,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5530,
											"end": 5597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 5594,
											"end": 5596,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 5589,
											"end": 5592,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 5530,
											"end": 5597,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5597,
											"name": "tag",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 5530,
											"end": 5597,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5523,
											"end": 5597,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5523,
											"end": 5597,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 5695,
											"end": 5698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 5606,
											"end": 5699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5699,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 5606,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5724,
											"end": 5726,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5719,
											"end": 5722,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5715,
											"end": 5727,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5708,
											"end": 5727,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5708,
											"end": 5727,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5733,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5733,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5733,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5739,
											"end": 6158,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 5739,
											"end": 6158,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5905,
											"end": 5909,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5943,
											"end": 5945,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5932,
											"end": 5941,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5928,
											"end": 5946,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5920,
											"end": 5946,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5920,
											"end": 5946,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5992,
											"end": 6001,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5986,
											"end": 5990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5982,
											"end": 6002,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5978,
											"end": 5979,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5967,
											"end": 5976,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5963,
											"end": 5980,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5956,
											"end": 6003,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6020,
											"end": 6151,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 6146,
											"end": 6150,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6020,
											"end": 6151,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 6020,
											"end": 6151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6020,
											"end": 6151,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 6020,
											"end": 6151,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6012,
											"end": 6151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6012,
											"end": 6151,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5739,
											"end": 6158,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5739,
											"end": 6158,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5739,
											"end": 6158,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5739,
											"end": 6158,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6164,
											"end": 6336,
											"name": "tag",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 6164,
											"end": 6336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6304,
											"end": 6328,
											"name": "PUSH",
											"source": 10,
											"value": "456E746572205269676874205374616B654D6F6E746800000000000000000000"
										},
										{
											"begin": 6300,
											"end": 6301,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6292,
											"end": 6298,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6288,
											"end": 6302,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6281,
											"end": 6329,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6164,
											"end": 6336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6164,
											"end": 6336,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6342,
											"end": 6708,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 6342,
											"end": 6708,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6484,
											"end": 6487,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6505,
											"end": 6572,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 6569,
											"end": 6571,
											"name": "PUSH",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 6564,
											"end": 6567,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6572,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 6505,
											"end": 6572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6572,
											"name": "tag",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 6505,
											"end": 6572,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6498,
											"end": 6572,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6498,
											"end": 6572,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6581,
											"end": 6674,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 6670,
											"end": 6673,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6581,
											"end": 6674,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 6581,
											"end": 6674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6581,
											"end": 6674,
											"name": "tag",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 6581,
											"end": 6674,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6699,
											"end": 6701,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6694,
											"end": 6697,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6690,
											"end": 6702,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6683,
											"end": 6702,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6683,
											"end": 6702,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6342,
											"end": 6708,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6342,
											"end": 6708,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6342,
											"end": 6708,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6342,
											"end": 6708,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 7133,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 6714,
											"end": 7133,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6880,
											"end": 6884,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6918,
											"end": 6920,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6907,
											"end": 6916,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6903,
											"end": 6921,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6895,
											"end": 6921,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6895,
											"end": 6921,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6967,
											"end": 6976,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6961,
											"end": 6965,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6957,
											"end": 6977,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 6953,
											"end": 6954,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6942,
											"end": 6951,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6938,
											"end": 6955,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6931,
											"end": 6978,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6995,
											"end": 7126,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 7121,
											"end": 7125,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6995,
											"end": 7126,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 6995,
											"end": 7126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6995,
											"end": 7126,
											"name": "tag",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 6995,
											"end": 7126,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6987,
											"end": 7126,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6987,
											"end": 7126,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 7133,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 7133,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 7133,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 7133,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7139,
											"end": 7315,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 7139,
											"end": 7315,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7279,
											"end": 7307,
											"name": "PUSH",
											"source": 10,
											"value": "456E746572205269676874204561726E50657273656E74616765000000000000"
										},
										{
											"begin": 7275,
											"end": 7276,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7267,
											"end": 7273,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7263,
											"end": 7277,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7256,
											"end": 7308,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7139,
											"end": 7315,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7139,
											"end": 7315,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7687,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 7321,
											"end": 7687,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7463,
											"end": 7466,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7484,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 7548,
											"end": 7550,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 7543,
											"end": 7546,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7484,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 7484,
											"end": 7551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7484,
											"end": 7551,
											"name": "tag",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 7484,
											"end": 7551,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7551,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7551,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7560,
											"end": 7653,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 7649,
											"end": 7652,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7560,
											"end": 7653,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 7560,
											"end": 7653,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7560,
											"end": 7653,
											"name": "tag",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 7560,
											"end": 7653,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7678,
											"end": 7680,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7673,
											"end": 7676,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7669,
											"end": 7681,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7662,
											"end": 7681,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7662,
											"end": 7681,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7687,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7687,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7687,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7687,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 8112,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 7693,
											"end": 8112,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7859,
											"end": 7863,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7897,
											"end": 7899,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7886,
											"end": 7895,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 7900,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7874,
											"end": 7900,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7874,
											"end": 7900,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7946,
											"end": 7955,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7940,
											"end": 7944,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7936,
											"end": 7956,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7932,
											"end": 7933,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7921,
											"end": 7930,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7917,
											"end": 7934,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7910,
											"end": 7957,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7974,
											"end": 8105,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 8100,
											"end": 8104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7974,
											"end": 8105,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 7974,
											"end": 8105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7974,
											"end": 8105,
											"name": "tag",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 7974,
											"end": 8105,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7966,
											"end": 8105,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7966,
											"end": 8105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 8112,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 8112,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 8112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 8112,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8286,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 8118,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8258,
											"end": 8278,
											"name": "PUSH",
											"source": 10,
											"value": "4669727374205374616B6520546F6B656E730000000000000000000000000000"
										},
										{
											"begin": 8254,
											"end": 8255,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8246,
											"end": 8252,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8242,
											"end": 8256,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8235,
											"end": 8279,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8286,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8292,
											"end": 8658,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 8292,
											"end": 8658,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8434,
											"end": 8437,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8522,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 8519,
											"end": 8521,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 8514,
											"end": 8517,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8455,
											"end": 8522,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 8455,
											"end": 8522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8455,
											"end": 8522,
											"name": "tag",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 8455,
											"end": 8522,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8448,
											"end": 8522,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8448,
											"end": 8522,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8531,
											"end": 8624,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 8620,
											"end": 8623,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8531,
											"end": 8624,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 8531,
											"end": 8624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8531,
											"end": 8624,
											"name": "tag",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 8531,
											"end": 8624,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8649,
											"end": 8651,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8644,
											"end": 8647,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8640,
											"end": 8652,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8633,
											"end": 8652,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8633,
											"end": 8652,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8292,
											"end": 8658,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8292,
											"end": 8658,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8292,
											"end": 8658,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8292,
											"end": 8658,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8664,
											"end": 9083,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 8664,
											"end": 9083,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8830,
											"end": 8834,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8868,
											"end": 8870,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8857,
											"end": 8866,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8853,
											"end": 8871,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8845,
											"end": 8871,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8845,
											"end": 8871,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8917,
											"end": 8926,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8911,
											"end": 8915,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8907,
											"end": 8927,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8903,
											"end": 8904,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8892,
											"end": 8901,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8888,
											"end": 8905,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8881,
											"end": 8928,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8945,
											"end": 9076,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 9071,
											"end": 9075,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8945,
											"end": 9076,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 8945,
											"end": 9076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8945,
											"end": 9076,
											"name": "tag",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 8945,
											"end": 9076,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8937,
											"end": 9076,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8937,
											"end": 9076,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8664,
											"end": 9083,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8664,
											"end": 9083,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8664,
											"end": 9083,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8664,
											"end": 9083,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9089,
											"end": 9250,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 9089,
											"end": 9250,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9229,
											"end": 9242,
											"name": "PUSH",
											"source": 10,
											"value": "506C656173652057616974000000000000000000000000000000000000000000"
										},
										{
											"begin": 9225,
											"end": 9226,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9217,
											"end": 9223,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9213,
											"end": 9227,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9206,
											"end": 9243,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9089,
											"end": 9250,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9089,
											"end": 9250,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9398,
											"end": 9401,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 9483,
											"end": 9485,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 9478,
											"end": 9481,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 9419,
											"end": 9486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "tag",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9412,
											"end": 9486,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9412,
											"end": 9486,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 9584,
											"end": 9587,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 9495,
											"end": 9588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9613,
											"end": 9615,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9608,
											"end": 9611,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9597,
											"end": 9616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9597,
											"end": 9616,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9256,
											"end": 9622,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9794,
											"end": 9798,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9832,
											"end": 9834,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9821,
											"end": 9830,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9817,
											"end": 9835,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9809,
											"end": 9835,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9809,
											"end": 9835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9881,
											"end": 9890,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9875,
											"end": 9879,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9871,
											"end": 9891,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9867,
											"end": 9868,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9856,
											"end": 9865,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9852,
											"end": 9869,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9845,
											"end": 9892,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 10035,
											"end": 10039,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 9909,
											"end": 10040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9901,
											"end": 10040,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9901,
											"end": 10040,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9628,
											"end": 10047,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10053,
											"end": 10233,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 10053,
											"end": 10233,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10101,
											"end": 10178,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10098,
											"end": 10099,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10091,
											"end": 10179,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10198,
											"end": 10202,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 10195,
											"end": 10196,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 10188,
											"end": 10203,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10222,
											"end": 10226,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 10219,
											"end": 10220,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10212,
											"end": 10227,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10279,
											"end": 10280,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10296,
											"end": 10316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 10314,
											"end": 10315,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10296,
											"end": 10316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 10296,
											"end": 10316,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10296,
											"end": 10316,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 10296,
											"end": 10316,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10291,
											"end": 10316,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10291,
											"end": 10316,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10330,
											"end": 10350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 10348,
											"end": 10349,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10330,
											"end": 10350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 10330,
											"end": 10350,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10330,
											"end": 10350,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 10330,
											"end": 10350,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10325,
											"end": 10350,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10325,
											"end": 10350,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10369,
											"end": 10370,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10359,
											"end": 10394,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 10359,
											"end": 10394,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10374,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 10374,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 10374,
											"end": 10392,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10374,
											"end": 10392,
											"name": "tag",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 10374,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10359,
											"end": 10394,
											"name": "tag",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 10359,
											"end": 10394,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10416,
											"end": 10417,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10413,
											"end": 10414,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10409,
											"end": 10418,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10404,
											"end": 10418,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10404,
											"end": 10418,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10239,
											"end": 10424,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10470,
											"end": 10474,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10490,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 10508,
											"end": 10509,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10490,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 10490,
											"end": 10510,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10490,
											"end": 10510,
											"name": "tag",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 10490,
											"end": 10510,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10485,
											"end": 10510,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10485,
											"end": 10510,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 10542,
											"end": 10543,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 10524,
											"end": 10544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "tag",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10519,
											"end": 10544,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10519,
											"end": 10544,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10568,
											"end": 10569,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10565,
											"end": 10566,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10561,
											"end": 10570,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10553,
											"end": 10570,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10553,
											"end": 10570,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10592,
											"end": 10593,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10586,
											"end": 10590,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10583,
											"end": 10594,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 10597,
											"end": 10615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "tag",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "tag",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10624,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "tag",
											"source": 10,
											"value": "118"
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10751,
											"end": 10755,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10791,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10778,
											"end": 10787,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10774,
											"end": 10792,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10766,
											"end": 10792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10766,
											"end": 10792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10802,
											"end": 10873,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 10870,
											"end": 10871,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10859,
											"end": 10868,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10855,
											"end": 10872,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10846,
											"end": 10852,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10802,
											"end": 10873,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 10802,
											"end": 10873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10802,
											"end": 10873,
											"name": "tag",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 10802,
											"end": 10873,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10883,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "381"
										},
										{
											"begin": 10951,
											"end": 10953,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10940,
											"end": 10949,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10936,
											"end": 10954,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10927,
											"end": 10933,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10883,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 10883,
											"end": 10955,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10883,
											"end": 10955,
											"name": "tag",
											"source": 10,
											"value": "381"
										},
										{
											"begin": 10883,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10630,
											"end": 10962,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10968,
											"end": 11084,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 10968,
											"end": 11084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11038,
											"end": 11059,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 11053,
											"end": 11058,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11038,
											"end": 11059,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 11038,
											"end": 11059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11038,
											"end": 11059,
											"name": "tag",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 11038,
											"end": 11059,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11031,
											"end": 11036,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11028,
											"end": 11060,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11018,
											"end": 11078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 11018,
											"end": 11078,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11074,
											"end": 11075,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11071,
											"end": 11072,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11064,
											"end": 11076,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11018,
											"end": 11078,
											"name": "tag",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 11018,
											"end": 11078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10968,
											"end": 11084,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10968,
											"end": 11084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11144,
											"end": 11149,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11175,
											"end": 11181,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11169,
											"end": 11182,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 11160,
											"end": 11182,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11160,
											"end": 11182,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11191,
											"end": 11221,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 11215,
											"end": 11220,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11191,
											"end": 11221,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 11191,
											"end": 11221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11191,
											"end": 11221,
											"name": "tag",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 11191,
											"end": 11221,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11090,
											"end": 11227,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11300,
											"end": 11306,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11349,
											"end": 11351,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11337,
											"end": 11346,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11328,
											"end": 11335,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11324,
											"end": 11347,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11320,
											"end": 11352,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 11317,
											"end": 11436,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11317,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 11317,
											"end": 11436,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11355,
											"end": 11434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 11355,
											"end": 11434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 11355,
											"end": 11434,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11355,
											"end": 11434,
											"name": "tag",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 11355,
											"end": 11434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11317,
											"end": 11436,
											"name": "tag",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 11317,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11475,
											"end": 11476,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11500,
											"end": 11561,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 11553,
											"end": 11560,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11544,
											"end": 11550,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11533,
											"end": 11542,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 11529,
											"end": 11551,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11500,
											"end": 11561,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 11500,
											"end": 11561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11500,
											"end": 11561,
											"name": "tag",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 11500,
											"end": 11561,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11490,
											"end": 11561,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11490,
											"end": 11561,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11446,
											"end": 11571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11584,
											"end": 11809,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 11584,
											"end": 11809,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11724,
											"end": 11758,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 11720,
											"end": 11721,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11712,
											"end": 11718,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11708,
											"end": 11722,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11701,
											"end": 11759,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11793,
											"end": 11801,
											"name": "PUSH",
											"source": 10,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11788,
											"end": 11790,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11780,
											"end": 11786,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11776,
											"end": 11791,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11769,
											"end": 11802,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11584,
											"end": 11809,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11584,
											"end": 11809,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11815,
											"end": 12181,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 11815,
											"end": 12181,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11957,
											"end": 11960,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11978,
											"end": 12045,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 12042,
											"end": 12044,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 12037,
											"end": 12040,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11978,
											"end": 12045,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 11978,
											"end": 12045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11978,
											"end": 12045,
											"name": "tag",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 11978,
											"end": 12045,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11971,
											"end": 12045,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11971,
											"end": 12045,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12054,
											"end": 12147,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 12143,
											"end": 12146,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12054,
											"end": 12147,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 12054,
											"end": 12147,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12054,
											"end": 12147,
											"name": "tag",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 12054,
											"end": 12147,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12172,
											"end": 12174,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 12167,
											"end": 12170,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12163,
											"end": 12175,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12156,
											"end": 12175,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12156,
											"end": 12175,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11815,
											"end": 12181,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11815,
											"end": 12181,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11815,
											"end": 12181,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11815,
											"end": 12181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12187,
											"end": 12606,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 12187,
											"end": 12606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12353,
											"end": 12357,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12391,
											"end": 12393,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12380,
											"end": 12389,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12368,
											"end": 12394,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12368,
											"end": 12394,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12440,
											"end": 12449,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12434,
											"end": 12438,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12430,
											"end": 12450,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 12426,
											"end": 12427,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12415,
											"end": 12424,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12411,
											"end": 12428,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12404,
											"end": 12451,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12468,
											"end": 12599,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 12594,
											"end": 12598,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12468,
											"end": 12599,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 12468,
											"end": 12599,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12468,
											"end": 12599,
											"name": "tag",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 12468,
											"end": 12599,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12460,
											"end": 12599,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12460,
											"end": 12599,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12187,
											"end": 12606,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12187,
											"end": 12606,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12187,
											"end": 12606,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12187,
											"end": 12606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12761,
											"end": 12765,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12799,
											"end": 12801,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 12788,
											"end": 12797,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12784,
											"end": 12802,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12776,
											"end": 12802,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12776,
											"end": 12802,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12812,
											"end": 12883,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 12880,
											"end": 12881,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12869,
											"end": 12878,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12865,
											"end": 12882,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12856,
											"end": 12862,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12812,
											"end": 12883,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 12812,
											"end": 12883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12812,
											"end": 12883,
											"name": "tag",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 12812,
											"end": 12883,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12893,
											"end": 12965,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 12961,
											"end": 12963,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12950,
											"end": 12959,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12946,
											"end": 12964,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12937,
											"end": 12943,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 12893,
											"end": 12965,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 12893,
											"end": 12965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12893,
											"end": 12965,
											"name": "tag",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 12893,
											"end": 12965,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12975,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 13043,
											"end": 13045,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 13032,
											"end": 13041,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13028,
											"end": 13046,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13019,
											"end": 13025,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12975,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 12975,
											"end": 13047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12975,
											"end": 13047,
											"name": "tag",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 12975,
											"end": 13047,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 13054,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13060,
											"end": 13242,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 13060,
											"end": 13242,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13200,
											"end": 13234,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 13196,
											"end": 13197,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13188,
											"end": 13194,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13184,
											"end": 13198,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13177,
											"end": 13235,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13060,
											"end": 13242,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13060,
											"end": 13242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13614,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 13248,
											"end": 13614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13390,
											"end": 13393,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13411,
											"end": 13478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 13475,
											"end": 13477,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13470,
											"end": 13473,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13411,
											"end": 13478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 13411,
											"end": 13478,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13411,
											"end": 13478,
											"name": "tag",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 13411,
											"end": 13478,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13404,
											"end": 13478,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13404,
											"end": 13478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13487,
											"end": 13580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 13576,
											"end": 13579,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13487,
											"end": 13580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 13487,
											"end": 13580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13487,
											"end": 13580,
											"name": "tag",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 13487,
											"end": 13580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13605,
											"end": 13607,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13600,
											"end": 13603,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13596,
											"end": 13608,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13589,
											"end": 13608,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13589,
											"end": 13608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13614,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13614,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13614,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13614,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13620,
											"end": 14039,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 13620,
											"end": 14039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13786,
											"end": 13790,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13824,
											"end": 13826,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13813,
											"end": 13822,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13809,
											"end": 13827,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13801,
											"end": 13827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13801,
											"end": 13827,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13873,
											"end": 13882,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13867,
											"end": 13871,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13863,
											"end": 13883,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 13859,
											"end": 13860,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13848,
											"end": 13857,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13844,
											"end": 13861,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13837,
											"end": 13884,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13901,
											"end": 14032,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "406"
										},
										{
											"begin": 14027,
											"end": 14031,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13901,
											"end": 14032,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 13901,
											"end": 14032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13901,
											"end": 14032,
											"name": "tag",
											"source": 10,
											"value": "406"
										},
										{
											"begin": 13901,
											"end": 14032,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13893,
											"end": 14032,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13893,
											"end": 14032,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13620,
											"end": 14039,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13620,
											"end": 14039,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13620,
											"end": 14039,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13620,
											"end": 14039,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14045,
											"end": 14274,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 14045,
											"end": 14274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14185,
											"end": 14219,
											"name": "PUSH",
											"source": 10,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 14181,
											"end": 14182,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14173,
											"end": 14179,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14169,
											"end": 14183,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14162,
											"end": 14220,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14254,
											"end": 14266,
											"name": "PUSH",
											"source": 10,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 14249,
											"end": 14251,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14241,
											"end": 14247,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14237,
											"end": 14252,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14230,
											"end": 14267,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14045,
											"end": 14274,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14045,
											"end": 14274,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14280,
											"end": 14646,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 14280,
											"end": 14646,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14422,
											"end": 14425,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14443,
											"end": 14510,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 14507,
											"end": 14509,
											"name": "PUSH",
											"source": 10,
											"value": "2A"
										},
										{
											"begin": 14502,
											"end": 14505,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14443,
											"end": 14510,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 14443,
											"end": 14510,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14443,
											"end": 14510,
											"name": "tag",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 14443,
											"end": 14510,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14436,
											"end": 14510,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14436,
											"end": 14510,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14519,
											"end": 14612,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 14608,
											"end": 14611,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14519,
											"end": 14612,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 14519,
											"end": 14612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14519,
											"end": 14612,
											"name": "tag",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 14519,
											"end": 14612,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14637,
											"end": 14639,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 14632,
											"end": 14635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14628,
											"end": 14640,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14621,
											"end": 14640,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14621,
											"end": 14640,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14280,
											"end": 14646,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14280,
											"end": 14646,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14280,
											"end": 14646,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14280,
											"end": 14646,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14652,
											"end": 15071,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 14652,
											"end": 15071,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14818,
											"end": 14822,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14856,
											"end": 14858,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14845,
											"end": 14854,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14841,
											"end": 14859,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14833,
											"end": 14859,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14833,
											"end": 14859,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14905,
											"end": 14914,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14899,
											"end": 14903,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14895,
											"end": 14915,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14891,
											"end": 14892,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14880,
											"end": 14889,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14876,
											"end": 14893,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14869,
											"end": 14916,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14933,
											"end": 15064,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 15059,
											"end": 15063,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14933,
											"end": 15064,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 14933,
											"end": 15064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14933,
											"end": 15064,
											"name": "tag",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 14933,
											"end": 15064,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14925,
											"end": 15064,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14925,
											"end": 15064,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14652,
											"end": 15071,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14652,
											"end": 15071,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14652,
											"end": 15071,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14652,
											"end": 15071,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15077,
											"end": 15302,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 15077,
											"end": 15302,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15217,
											"end": 15251,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 15213,
											"end": 15214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15205,
											"end": 15211,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15201,
											"end": 15215,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15194,
											"end": 15252,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15286,
											"end": 15294,
											"name": "PUSH",
											"source": 10,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15281,
											"end": 15283,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 15273,
											"end": 15279,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15269,
											"end": 15284,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15262,
											"end": 15295,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15077,
											"end": 15302,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15077,
											"end": 15302,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15308,
											"end": 15674,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 15308,
											"end": 15674,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15450,
											"end": 15453,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15471,
											"end": 15538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 15535,
											"end": 15537,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 15530,
											"end": 15533,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15471,
											"end": 15538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 15471,
											"end": 15538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15471,
											"end": 15538,
											"name": "tag",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 15471,
											"end": 15538,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15464,
											"end": 15538,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15464,
											"end": 15538,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15547,
											"end": 15640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "416"
										},
										{
											"begin": 15636,
											"end": 15639,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15547,
											"end": 15640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 15547,
											"end": 15640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15547,
											"end": 15640,
											"name": "tag",
											"source": 10,
											"value": "416"
										},
										{
											"begin": 15547,
											"end": 15640,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15665,
											"end": 15667,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 15660,
											"end": 15663,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15656,
											"end": 15668,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15649,
											"end": 15668,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15649,
											"end": 15668,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15308,
											"end": 15674,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15308,
											"end": 15674,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15308,
											"end": 15674,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15308,
											"end": 15674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15680,
											"end": 16099,
											"name": "tag",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 15680,
											"end": 16099,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15846,
											"end": 15850,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15884,
											"end": 15886,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 15873,
											"end": 15882,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15869,
											"end": 15887,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15861,
											"end": 15887,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15861,
											"end": 15887,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15933,
											"end": 15942,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15927,
											"end": 15931,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15923,
											"end": 15943,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 15919,
											"end": 15920,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15908,
											"end": 15917,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15904,
											"end": 15921,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15897,
											"end": 15944,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15961,
											"end": 16092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 16087,
											"end": 16091,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15961,
											"end": 16092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 15961,
											"end": 16092,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15961,
											"end": 16092,
											"name": "tag",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 15961,
											"end": 16092,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15953,
											"end": 16092,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15953,
											"end": 16092,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15680,
											"end": 16099,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15680,
											"end": 16099,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15680,
											"end": 16099,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15680,
											"end": 16099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16105,
											"end": 16203,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 16105,
											"end": 16203,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16156,
											"end": 16162,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16190,
											"end": 16195,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16184,
											"end": 16196,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 16174,
											"end": 16196,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16174,
											"end": 16196,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16105,
											"end": 16203,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16105,
											"end": 16203,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16105,
											"end": 16203,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16105,
											"end": 16203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16310,
											"end": 16321,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16347,
											"end": 16350,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16332,
											"end": 16350,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16332,
											"end": 16350,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16209,
											"end": 16356,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16362,
											"end": 16608,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 16362,
											"end": 16608,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16443,
											"end": 16444,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "tag",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16467,
											"end": 16473,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 16464,
											"end": 16465,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16461,
											"end": 16474,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 16552,
											"end": 16553,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 16547,
											"end": 16550,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16543,
											"end": 16554,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16537,
											"end": 16555,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 16533,
											"end": 16534,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16528,
											"end": 16531,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 16524,
											"end": 16535,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16517,
											"end": 16556,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16489,
											"end": 16491,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16486,
											"end": 16487,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16482,
											"end": 16492,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16477,
											"end": 16492,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16477,
											"end": 16492,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "tag",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 16453,
											"end": 16566,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16600,
											"end": 16601,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16591,
											"end": 16597,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 16586,
											"end": 16589,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 16582,
											"end": 16598,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16575,
											"end": 16602,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16424,
											"end": 16608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16362,
											"end": 16608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16362,
											"end": 16608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16362,
											"end": 16608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16362,
											"end": 16608,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16718,
											"end": 16721,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16746,
											"end": 16784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 16778,
											"end": 16783,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16746,
											"end": 16784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 16746,
											"end": 16784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16746,
											"end": 16784,
											"name": "tag",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 16746,
											"end": 16784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16800,
											"end": 16888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 16881,
											"end": 16887,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16876,
											"end": 16879,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 16800,
											"end": 16888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 16800,
											"end": 16888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16800,
											"end": 16888,
											"name": "tag",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 16800,
											"end": 16888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16793,
											"end": 16888,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 16793,
											"end": 16888,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16897,
											"end": 16962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 16955,
											"end": 16961,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16950,
											"end": 16953,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 16943,
											"end": 16947,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16936,
											"end": 16941,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 16932,
											"end": 16948,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16897,
											"end": 16962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 16897,
											"end": 16962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16897,
											"end": 16962,
											"name": "tag",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 16897,
											"end": 16962,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16987,
											"end": 16993,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 16982,
											"end": 16985,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 16978,
											"end": 16994,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16971,
											"end": 16994,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16971,
											"end": 16994,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16722,
											"end": 17000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16614,
											"end": 17000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17136,
											"end": 17139,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17158,
											"end": 17251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 17247,
											"end": 17250,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17238,
											"end": 17244,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 17158,
											"end": 17251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 17158,
											"end": 17251,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17158,
											"end": 17251,
											"name": "tag",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 17158,
											"end": 17251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17151,
											"end": 17251,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17151,
											"end": 17251,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17268,
											"end": 17271,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17261,
											"end": 17271,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17261,
											"end": 17271,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17006,
											"end": 17277,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17283,
											"end": 17462,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 17283,
											"end": 17462,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17423,
											"end": 17454,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 17419,
											"end": 17420,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17411,
											"end": 17417,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17407,
											"end": 17421,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17400,
											"end": 17455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17283,
											"end": 17462,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17283,
											"end": 17462,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17468,
											"end": 17834,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 17468,
											"end": 17834,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17610,
											"end": 17613,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17631,
											"end": 17698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 17695,
											"end": 17697,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 17690,
											"end": 17693,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 17631,
											"end": 17698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 17631,
											"end": 17698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17631,
											"end": 17698,
											"name": "tag",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 17631,
											"end": 17698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17624,
											"end": 17698,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17624,
											"end": 17698,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17707,
											"end": 17800,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "434"
										},
										{
											"begin": 17796,
											"end": 17799,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17707,
											"end": 17800,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 17707,
											"end": 17800,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17707,
											"end": 17800,
											"name": "tag",
											"source": 10,
											"value": "434"
										},
										{
											"begin": 17707,
											"end": 17800,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17825,
											"end": 17827,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 17820,
											"end": 17823,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17816,
											"end": 17828,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 17828,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 17828,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17468,
											"end": 17834,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17468,
											"end": 17834,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17468,
											"end": 17834,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17468,
											"end": 17834,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17840,
											"end": 18259,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 17840,
											"end": 18259,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18006,
											"end": 18010,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18044,
											"end": 18046,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 18033,
											"end": 18042,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18029,
											"end": 18047,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18021,
											"end": 18047,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18021,
											"end": 18047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18093,
											"end": 18102,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18087,
											"end": 18091,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18083,
											"end": 18103,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 18079,
											"end": 18080,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18068,
											"end": 18077,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18064,
											"end": 18081,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18057,
											"end": 18104,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 18121,
											"end": 18252,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "436"
										},
										{
											"begin": 18247,
											"end": 18251,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18121,
											"end": 18252,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 18121,
											"end": 18252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18121,
											"end": 18252,
											"name": "tag",
											"source": 10,
											"value": "436"
										},
										{
											"begin": 18121,
											"end": 18252,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18113,
											"end": 18252,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18113,
											"end": 18252,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17840,
											"end": 18259,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17840,
											"end": 18259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17840,
											"end": 18259,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17840,
											"end": 18259,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18265,
											"end": 18364,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 18265,
											"end": 18364,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18317,
											"end": 18323,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18351,
											"end": 18356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18345,
											"end": 18357,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 18335,
											"end": 18357,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18335,
											"end": 18357,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18265,
											"end": 18364,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18265,
											"end": 18364,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18265,
											"end": 18364,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18265,
											"end": 18364,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18370,
											"end": 18472,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 18370,
											"end": 18472,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18411,
											"end": 18417,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18462,
											"end": 18464,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 18458,
											"end": 18465,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 18453,
											"end": 18455,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 18446,
											"end": 18451,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18442,
											"end": 18456,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18438,
											"end": 18466,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 18428,
											"end": 18466,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18428,
											"end": 18466,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18370,
											"end": 18472,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18370,
											"end": 18472,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18370,
											"end": 18472,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18370,
											"end": 18472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18566,
											"end": 18569,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18594,
											"end": 18633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "440"
										},
										{
											"begin": 18627,
											"end": 18632,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18594,
											"end": 18633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 18594,
											"end": 18633,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18594,
											"end": 18633,
											"name": "tag",
											"source": 10,
											"value": "440"
										},
										{
											"begin": 18594,
											"end": 18633,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18649,
											"end": 18720,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 18713,
											"end": 18719,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18708,
											"end": 18711,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 18649,
											"end": 18720,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 18649,
											"end": 18720,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18649,
											"end": 18720,
											"name": "tag",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 18649,
											"end": 18720,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18642,
											"end": 18720,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 18642,
											"end": 18720,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18729,
											"end": 18794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "442"
										},
										{
											"begin": 18787,
											"end": 18793,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18782,
											"end": 18785,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 18775,
											"end": 18779,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 18768,
											"end": 18773,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 18764,
											"end": 18780,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18729,
											"end": 18794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 18729,
											"end": 18794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18729,
											"end": 18794,
											"name": "tag",
											"source": 10,
											"value": "442"
										},
										{
											"begin": 18729,
											"end": 18794,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18819,
											"end": 18848,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 18841,
											"end": 18847,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18819,
											"end": 18848,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 18819,
											"end": 18848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18819,
											"end": 18848,
											"name": "tag",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 18819,
											"end": 18848,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18814,
											"end": 18817,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 18810,
											"end": 18849,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18803,
											"end": 18849,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18803,
											"end": 18849,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18570,
											"end": 18855,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18478,
											"end": 18855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18974,
											"end": 18978,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19012,
											"end": 19014,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 19001,
											"end": 19010,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18997,
											"end": 19015,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18989,
											"end": 19015,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18989,
											"end": 19015,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19061,
											"end": 19070,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19055,
											"end": 19059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19051,
											"end": 19071,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 19047,
											"end": 19048,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19036,
											"end": 19045,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 19032,
											"end": 19049,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 19025,
											"end": 19072,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19089,
											"end": 19167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 19162,
											"end": 19166,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19153,
											"end": 19159,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 19089,
											"end": 19167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 19089,
											"end": 19167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 19089,
											"end": 19167,
											"name": "tag",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 19089,
											"end": 19167,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19081,
											"end": 19167,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 19081,
											"end": 19167,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18861,
											"end": 19174,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/Staking/StakingFinal.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"AdminAddToken(uint256)": "c0cd40ee",
							"AdminWithDrawToken(uint256)": "a88e132f",
							"DepositTokens(address,uint256,uint256,uint256)": "10c404da",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"Tokens(address)": "0deef63a",
							"WithdrawTokens(address)": "9131a05a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"totalStakedTokens()": "3ae73259",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EarnPersentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingFinal.sol\":\"TokenStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/Staking/StakingFinal.sol\":{\"keccak256\":\"0xb2606555864c41b1c560ec8bfc4749bf728de81ee5667860bec0e34de97808bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b596cbe6f951201e0f08ad1ff24de57c2c1927e35cfc3394e9970b4ae693aa0\",\"dweb:/ipfs/Qmd9sfG5fSMWRiPn3rfYy2c1yNgJfQBu4PyfQabCcagCRo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1031,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1033,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "totalStakedTokens",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1049,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Details",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_struct(Staker)1044_storage)"
							},
							{
								"astId": 1053,
								"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
								"label": "Tokens",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)1044_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct TokenStaking.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1044_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)1044_storage": {
								"encoding": "inplace",
								"label": "struct TokenStaking.Staker",
								"members": [
									{
										"astId": 1035,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "depositTokens",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1037,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "stakeTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1039,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "StakeMonth",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 1041,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "EarnPersentage",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 1043,
										"contract": "contracts/Staking/StakingFinal.sol:TokenStaking",
										"label": "check",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1006
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1007,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1006,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1006
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 996,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1875:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2141:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 985,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nameLocations": [
											"737:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 984,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "931:8:3",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "940:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "906:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nameLocations": [
															"794:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1168:12:3",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1181:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1143:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nameLocations": [
															"1009:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1852:9:3",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2037:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2045:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2012:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nameLocations": [
															"1505:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2239:9:3",
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2346:7:3",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2354:8:3",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2321:18:3",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nameLocations": [
															"2124:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2579:9:3",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2828:7:3",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2836:8:3",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2803:18:3",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nameLocations": [
															"2440:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3145:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3174:6:3",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3259:6:3",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nameLocations": [
															"2921:12:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4207:12:3",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4286:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4363:6:3",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nameLocations": [
															"3776:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						]
					},
					"id": 624,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 624,
							"sourceUnit": 1019,
							"src": "133:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 512,
										"name": "IERC165",
										"nameLocations": [
											"271:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1018,
										"src": "271:7:4"
									},
									"id": 513,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 623,
							"linearizedBaseContracts": [
								623,
								1018
							],
							"name": "IERC721",
							"nameLocation": "260:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 522,
									"name": "Transfer",
									"nameLocation": "384:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "393:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "415:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "435:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:4"
									},
									"src": "378:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 531,
									"name": "Approval",
									"nameLocation": "571:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "580:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "603:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "629:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:4"
									},
									"src": "565:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 540,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "803:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "826:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "852:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:4"
									},
									"src": "782:85:4"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "973:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:4"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "1011:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:4"
									},
									"scope": 623,
									"src": "954:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1227:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:4"
									},
									"scope": 623,
									"src": "1170:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1844:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1866:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1886:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1911:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:4"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:4"
									},
									"scope": 623,
									"src": "1809:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2701:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2721:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:4"
									},
									"scope": 623,
									"src": "2644:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3526:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3548:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3568:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:4"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:4"
									},
									"scope": 623,
									"src": "3495:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4079:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4091:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:4"
									},
									"scope": 623,
									"src": "4062:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4464:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:4"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:4"
									},
									"scope": 623,
									"src": "4437:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4678:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4718:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:4"
									},
									"scope": 623,
									"src": "4657:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4911:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4926:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:4"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4967:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:4"
									},
									"scope": 623,
									"src": "4885:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 624,
							"src": "250:4725:4",
							"usedErrors": []
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						]
					},
					"id": 655,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 625,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 655,
							"sourceUnit": 624,
							"src": "154:24:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 628,
										"name": "IERC721",
										"nameLocations": [
											"348:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 623,
										"src": "348:7:5"
									},
									"id": 629,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:5"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 654,
							"linearizedBaseContracts": [
								654,
								623,
								1018
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 630,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 635,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:5"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "495:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:5"
									},
									"scope": 654,
									"src": "449:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "715:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "730:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:5"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "768:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:5"
									},
									"scope": 654,
									"src": "686:91:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 646,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "974:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:5"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1012:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:5"
									},
									"scope": 654,
									"src": "952:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 655,
							"src": "317:706:5",
							"usedErrors": []
						}
					],
					"src": "129:895:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							984
						]
					},
					"id": 985,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 656,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 657,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 984,
							"linearizedBaseContracts": [
								984
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1241:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 665,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "1465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1473:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1478:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 664,
												"id": 670,
												"nodeType": "Return",
												"src": "1458:30:6"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1195:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:6"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1235:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:6"
									},
									"scope": 984,
									"src": "1175:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "2483:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 683,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 681,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2515:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 686,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2526:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 680,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 690,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:6"
											},
											{
												"assignments": [
													692,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 692,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 705,
														"src": "2578:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 691,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 699,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 693,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 675,
																"src": "2596:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2606:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 695,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2618:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 701,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "2647:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:6"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2431:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2458:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:6"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:6"
									},
									"scope": 984,
									"src": "2412:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "3555:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 717,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "3594:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "3602:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 716,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "3572:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 715,
												"id": 722,
												"nodeType": "Return",
												"src": "3565:79:6"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3504:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:6"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:6"
									},
									"scope": 984,
									"src": "3466:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "4020:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 737,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "4059:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 738,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "4067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 740,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "4076:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 736,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4037:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 735,
												"id": 742,
												"nodeType": "Return",
												"src": "4030:59:6"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3904:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3928:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3955:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 730,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:6"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "4006:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:6"
									},
									"scope": 984,
									"src": "3873:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 763,
										"nodeType": "Block",
										"src": "4601:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 757,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 758,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4648:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 759,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "4654:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 756,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4618:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 755,
												"id": 762,
												"nodeType": "Return",
												"src": "4611:94:6"
											}
										]
									},
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4498:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4522:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 748,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4549:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:6"
									},
									"returnParameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4587:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 753,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:6"
									},
									"scope": 984,
									"src": "4458:254:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "5139:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 781,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 779,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 782,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 783,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5171:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 784,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5182:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 778,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:6"
											},
											{
												"assignments": [
													790,
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 790,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5241:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 789,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5255:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 791,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 799,
												"initialValue": {
													"arguments": [
														{
															"id": 797,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "5308:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 793,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "5282:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5289:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 795,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5301:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 801,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "5357:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 802,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 790,
															"src": "5365:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 803,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "5374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 804,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "5386:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 800,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "5330:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 777,
												"id": 806,
												"nodeType": "Return",
												"src": "5323:76:6"
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5024:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5051:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5074:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 772,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:6"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5125:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 775,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:6"
									},
									"scope": 984,
									"src": "4960:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "5683:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 819,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 811,
															"src": "5719:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 820,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "5727:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 818,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															825,
															854
														],
														"referencedDeclaration": 854,
														"src": "5700:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 817,
												"id": 823,
												"nodeType": "Return",
												"src": "5693:80:6"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5611:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 812,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:6"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5669:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 815,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:6"
									},
									"scope": 984,
									"src": "5583:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 853,
										"nodeType": "Block",
										"src": "6122:168:6",
										"statements": [
											{
												"assignments": [
													838,
													840
												],
												"declarations": [
													{
														"constant": false,
														"id": 838,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6133:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 837,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 840,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6147:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 839,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 845,
												"initialValue": {
													"arguments": [
														{
															"id": 843,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "6192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 841,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6174:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6181:10:6",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 847,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 848,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "6249:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 849,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "6258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 850,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "6270:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 846,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "6214:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 836,
												"id": 852,
												"nodeType": "Return",
												"src": "6207:76:6"
											}
										]
									},
									"documentation": {
										"id": 826,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 854,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6001:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6025:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 829,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6052:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 831,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:6"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6108:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 834,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:6"
									},
									"scope": 984,
									"src": "5964:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 870,
										"nodeType": "Block",
										"src": "6566:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 865,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "6604:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "6612:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 864,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															871,
															900
														],
														"referencedDeclaration": 900,
														"src": "6583:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 863,
												"id": 869,
												"nodeType": "Return",
												"src": "6576:84:6"
											}
										]
									},
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6499:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6515:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 858,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:6"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6552:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:6"
									},
									"scope": 984,
									"src": "6469:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 899,
										"nodeType": "Block",
										"src": "7008:170:6",
										"statements": [
											{
												"assignments": [
													884,
													886
												],
												"declarations": [
													{
														"constant": false,
														"id": 884,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7019:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 883,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 886,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7033:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 885,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 891,
												"initialValue": {
													"arguments": [
														{
															"id": 889,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 876,
															"src": "7080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 887,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7060:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7067:12:6",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7129:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 894,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "7137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 895,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 886,
															"src": "7146:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 896,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "7158:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 892,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "7102:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 882,
												"id": 898,
												"nodeType": "Return",
												"src": "7095:76:6"
											}
										]
									},
									"documentation": {
										"id": 872,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 900,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6892:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6916:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 875,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6943:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 877,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:6"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6994:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 880,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:6"
									},
									"scope": 984,
									"src": "6853:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 938,
										"nodeType": "Block",
										"src": "7660:434:6",
										"statements": [
											{
												"condition": {
													"id": 914,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 905,
													"src": "7674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 936,
													"nodeType": "Block",
													"src": "8030:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 932,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "8052:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 933,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 909,
																		"src": "8064:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 931,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8044:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 935,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:6"
														}
													]
												},
												"id": 937,
												"nodeType": "IfStatement",
												"src": "7670:418:6",
												"trueBody": {
													"id": 930,
													"nodeType": "Block",
													"src": "7683:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 915,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "7701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7712:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 927,
															"nodeType": "IfStatement",
															"src": "7697:286:6",
															"trueBody": {
																"id": 926,
																"nodeType": "Block",
																"src": "7725:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 921,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 903,
																							"src": "7927:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 920,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 672,
																						"src": "7916:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 922,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 923,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 919,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 925,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 928,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 907,
																"src": "8003:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 913,
															"id": 929,
															"nodeType": "Return",
															"src": "7996:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 901,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7511:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7535:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 904,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7557:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 906,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7590:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 908,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:6"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7646:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 911,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:6"
									},
									"scope": 984,
									"src": "7466:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "8475:135:6",
										"statements": [
											{
												"condition": {
													"id": 951,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 942,
													"src": "8489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 960,
													"nodeType": "Block",
													"src": "8546:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "8568:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 957,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 946,
																		"src": "8580:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 955,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8560:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 959,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:6"
														}
													]
												},
												"id": 961,
												"nodeType": "IfStatement",
												"src": "8485:119:6",
												"trueBody": {
													"id": 954,
													"nodeType": "Block",
													"src": "8498:42:6",
													"statements": [
														{
															"expression": {
																"id": 952,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "8519:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 950,
															"id": 953,
															"nodeType": "Return",
															"src": "8512:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 963,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8350:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 941,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8372:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8405:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 945,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:6"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8461:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 948,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:6"
									},
									"scope": 984,
									"src": "8315:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "8699:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 970,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 965,
															"src": "8775:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8786:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 972,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 980,
													"nodeType": "Block",
													"src": "9105:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 977,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 967,
																		"src": "9126:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 976,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 979,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:6"
														}
													]
												},
												"id": 981,
												"nodeType": "IfStatement",
												"src": "8771:379:6",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "8798:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:6",
																	"valueSize": 1
																}
															],
															"id": 974,
															"nodeType": "InlineAssembly",
															"src": "8947:142:6"
														}
													]
												}
											}
										]
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8633:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 964,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8658:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 966,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:6"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:6"
									},
									"scope": 984,
									"src": "8616:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 985,
							"src": "194:8964:6",
							"usedErrors": []
						}
					],
					"src": "101:9058:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1006
						]
					},
					"id": 1007,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 986,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 987,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1006,
							"linearizedBaseContracts": [
								1006
							],
							"name": "Context",
							"nameLocation": "626:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 995,
										"nodeType": "Block",
										"src": "702:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 992,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 991,
												"id": 994,
												"nodeType": "Return",
												"src": "712:17:7"
											}
										]
									},
									"id": 996,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:7"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "693:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:7"
									},
									"scope": 1006,
									"src": "640:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1004,
										"nodeType": "Block",
										"src": "809:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1001,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1000,
												"id": 1003,
												"nodeType": "Return",
												"src": "819:15:7"
											}
										]
									},
									"id": 1005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:7"
									},
									"returnParameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "793:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 998,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:7"
									},
									"scope": 1006,
									"src": "742:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1007,
							"src": "608:235:7",
							"usedErrors": []
						}
					],
					"src": "86:758:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						]
					},
					"id": 1019,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1008,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1009,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1018,
							"linearizedBaseContracts": [
								1018
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1017,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1011,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1014,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1018,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1019,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"contracts/Staking/StakingFinal.sol": {
				"ast": {
					"absolutePath": "contracts/Staking/StakingFinal.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"Context": [
							1006
						],
						"IERC165": [
							1018
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						],
						"TokenStaking": [
							1499
						]
					},
					"id": 1500,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1020,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1021,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1500,
							"sourceUnit": 113,
							"src": "81:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1022,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1500,
							"sourceUnit": 508,
							"src": "134:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1023,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1500,
							"sourceUnit": 655,
							"src": "200:79:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1024,
										"name": "Ownable",
										"nameLocations": [
											"306:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "306:7:9"
									},
									"id": 1025,
									"nodeType": "InheritanceSpecifier",
									"src": "306:7:9"
								}
							],
							"canonicalName": "TokenStaking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1499,
							"linearizedBaseContracts": [
								1499,
								112,
								1006
							],
							"name": "TokenStaking",
							"nameLocation": "290:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1029,
									"libraryName": {
										"id": 1026,
										"name": "SafeERC20",
										"nameLocations": [
											"325:9:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "325:9:9"
									},
									"nodeType": "UsingForDirective",
									"src": "319:27:9",
									"typeName": {
										"id": 1028,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1027,
											"name": "IERC20",
											"nameLocations": [
												"339:6:9"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "339:6:9"
										},
										"referencedDeclaration": 190,
										"src": "339:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 1031,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "366:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1499,
									"src": "351:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1030,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "351:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3ae73259",
									"id": 1033,
									"mutability": "mutable",
									"name": "totalStakedTokens",
									"nameLocation": "396:17:9",
									"nodeType": "VariableDeclaration",
									"scope": 1499,
									"src": "384:29:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1032,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "384:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "TokenStaking.Staker",
									"id": 1044,
									"members": [
										{
											"constant": false,
											"id": 1035,
											"mutability": "mutable",
											"name": "depositTokens",
											"nameLocation": "451:13:9",
											"nodeType": "VariableDeclaration",
											"scope": 1044,
											"src": "443:21:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1034,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "443:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1037,
											"mutability": "mutable",
											"name": "stakeTime",
											"nameLocation": "482:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1044,
											"src": "474:17:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1036,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "474:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1039,
											"mutability": "mutable",
											"name": "StakeMonth",
											"nameLocation": "509:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1044,
											"src": "501:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1038,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "501:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1041,
											"mutability": "mutable",
											"name": "EarnPersentage",
											"nameLocation": "537:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 1044,
											"src": "529:22:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1040,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "529:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1043,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "566:5:9",
											"nodeType": "VariableDeclaration",
											"scope": 1044,
											"src": "561:10:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1042,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "561:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "426:6:9",
									"nodeType": "StructDefinition",
									"scope": 1499,
									"src": "419:160:9",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 1049,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "619:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 1499,
									"src": "584:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
										"typeString": "mapping(address => struct TokenStaking.Staker)"
									},
									"typeName": {
										"id": 1048,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1045,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "593:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "584:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
											"typeString": "mapping(address => struct TokenStaking.Staker)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1047,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1046,
												"name": "Staker",
												"nameLocations": [
													"604:6:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1044,
												"src": "604:6:9"
											},
											"referencedDeclaration": 1044,
											"src": "604:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1044_storage_ptr",
												"typeString": "struct TokenStaking.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0deef63a",
									"id": 1053,
									"mutability": "mutable",
									"name": "Tokens",
									"nameLocation": "666:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 1499,
									"src": "632:40:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1052,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1050,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "641:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "632:26:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1051,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "652:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1062,
										"nodeType": "Block",
										"src": "946:45:9",
										"statements": [
											{
												"expression": {
													"id": 1060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1058,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "956:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1059,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1055,
														"src": "971:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "956:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1061,
												"nodeType": "ExpressionStatement",
												"src": "956:28:9"
											}
										]
									},
									"id": 1063,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "931:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1063,
												"src": "923:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "923:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "922:23:9"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:0:9"
									},
									"scope": 1499,
									"src": "911:80:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1090,
										"nodeType": "Block",
										"src": "1270:128:9",
										"statements": [
											{
												"expression": {
													"id": 1075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1070,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "1280:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1073,
														"indexExpression": {
															"expression": {
																"id": 1071,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1287:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1072,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1291:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1287:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1280:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1074,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1065,
														"src": "1301:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1280:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1076,
												"nodeType": "ExpressionStatement",
												"src": "1280:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1081,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1356:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1360:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1356:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1085,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1376:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TokenStaking_$1499",
																		"typeString": "contract TokenStaking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TokenStaking_$1499",
																		"typeString": "contract TokenStaking"
																	}
																],
																"id": 1084,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1368:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1083,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1368:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1086,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1368:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1087,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "1383:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1078,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "1325:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1077,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1318:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1318:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1080,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1339:16:9",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "1318:37:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1318:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1089,
												"nodeType": "ExpressionStatement",
												"src": "1318:73:9"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 1091,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1068,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1067,
												"name": "onlyOwner",
												"nameLocations": [
													"1261:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1261:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1261:9:9"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1226:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1245:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "1240:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1064,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1240:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1239:14:9"
									},
									"returnParameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1270:0:9"
									},
									"scope": 1499,
									"src": "1217:181:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1114,
										"nodeType": "Block",
										"src": "1647:108:9",
										"statements": [
											{
												"expression": {
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1098,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "1657:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1101,
														"indexExpression": {
															"expression": {
																"id": 1099,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1664:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1668:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1664:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1657:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1102,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "1679:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1657:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1104,
												"nodeType": "ExpressionStatement",
												"src": "1657:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1109,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1729:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1733:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1729:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1111,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "1741:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1106,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "1702:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1105,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1695:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1695:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1716:12:9",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 258,
														"src": "1695:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1695:53:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1113,
												"nodeType": "ExpressionStatement",
												"src": "1695:53:9"
											}
										]
									},
									"functionSelector": "a88e132f",
									"id": 1115,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1096,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1095,
												"name": "onlyOwner",
												"nameLocations": [
													"1638:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1638:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1638:9:9"
										}
									],
									"name": "AdminWithDrawToken",
									"nameLocation": "1599:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1623:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "1618:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1618:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1617:13:9"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1647:0:9"
									},
									"scope": 1499,
									"src": "1590:165:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1238,
										"nodeType": "Block",
										"src": "2148:788:9",
										"statements": [
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1126,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1049,
															"src": "2161:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
															}
														},
														"id": 1128,
														"indexExpression": {
															"id": 1127,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1117,
															"src": "2169:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2161:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1044_storage",
															"typeString": "struct TokenStaking.Staker storage ref"
														}
													},
													"id": 1129,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2173:5:9",
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1043,
													"src": "2161:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1226,
													"nodeType": "Block",
													"src": "2672:189:9",
													"statements": [
														{
															"expression": {
																"id": 1212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1201,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1049,
																		"src": "2686:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																			"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																		}
																	},
																	"id": 1203,
																	"indexExpression": {
																		"id": 1202,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1117,
																		"src": "2694:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2686:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1044_storage",
																		"typeString": "struct TokenStaking.Staker storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1205,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1119,
																			"src": "2707:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"id": 1206,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "2715:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2721:9:9",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "2715:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1208,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1121,
																			"src": "2731:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1209,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1123,
																			"src": "2742:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "74727565",
																			"id": 1210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2757:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1204,
																		"name": "Staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1044,
																		"src": "2700:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Staker_$1044_storage_ptr_$",
																			"typeString": "type(struct TokenStaking.Staker storage pointer)"
																		}
																	},
																	"id": 1211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2700:62:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1044_memory_ptr",
																		"typeString": "struct TokenStaking.Staker memory"
																	}
																},
																"src": "2686:76:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1044_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1213,
															"nodeType": "ExpressionStatement",
															"src": "2686:76:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1218,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1117,
																		"src": "2814:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1221,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "2826:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$1499",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$1499",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2818:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1219,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2818:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2818:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1223,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1119,
																		"src": "2834:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1215,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1031,
																				"src": "2783:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1214,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "2776:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2776:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2797:16:9",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "2776:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2776:66:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1225,
															"nodeType": "ExpressionStatement",
															"src": "2776:66:9"
														}
													]
												},
												"id": 1227,
												"nodeType": "IfStatement",
												"src": "2158:703:9",
												"trueBody": {
													"id": 1200,
													"nodeType": "Block",
													"src": "2179:489:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1148,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1142,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1140,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1138,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1136,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1131,
																														"name": "Details",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1049,
																														"src": "2203:7:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																															"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																														}
																													},
																													"id": 1133,
																													"indexExpression": {
																														"id": 1132,
																														"name": "to",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1117,
																														"src": "2211:2:9",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "2203:11:9",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Staker_$1044_storage",
																														"typeString": "struct TokenStaking.Staker storage ref"
																													}
																												},
																												"id": 1134,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "2215:10:9",
																												"memberName": "StakeMonth",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1039,
																												"src": "2203:22:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "*",
																											"rightExpression": {
																												"hexValue": "3330",
																												"id": 1135,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "2226:2:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_30_by_1",
																													"typeString": "int_const 30"
																												},
																												"value": "30"
																											},
																											"src": "2203:25:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "*",
																										"rightExpression": {
																											"hexValue": "3234",
																											"id": 1137,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "2229:2:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_24_by_1",
																												"typeString": "int_const 24"
																											},
																											"value": "24"
																										},
																										"src": "2203:28:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"hexValue": "3630",
																										"id": 1139,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "2232:2:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_60_by_1",
																											"typeString": "int_const 60"
																										},
																										"value": "60"
																									},
																									"src": "2203:31:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3630",
																									"id": 1141,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "2235:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_60_by_1",
																										"typeString": "int_const 60"
																									},
																									"value": "60"
																								},
																								"src": "2203:34:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1143,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2202:36:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1144,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1049,
																								"src": "2241:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1146,
																							"indexExpression": {
																								"id": 1145,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1117,
																								"src": "2249:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "2241:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1044_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1147,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "2253:9:9",
																						"memberName": "stakeTime",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1037,
																						"src": "2241:21:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2202:60:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1149,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2201:62:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"expression": {
																				"id": 1150,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "2266:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1151,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2272:9:9",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "2266:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2201:80:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "596f75722054696d6520506572696f6420436f6d706c6574652e",
																		"id": 1153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2282:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		},
																		"value": "Your Time Period Complete."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_cb203596ca987c41ab975323a33d162318debbfddf18d9884af7551343129599",
																			"typeString": "literal_string \"Your Time Period Complete.\""
																		}
																	],
																	"id": 1130,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2193:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2193:118:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1155,
															"nodeType": "ExpressionStatement",
															"src": "2193:118:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1157,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1049,
																					"src": "2333:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1159,
																				"indexExpression": {
																					"id": 1158,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1117,
																					"src": "2341:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2333:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1044_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1160,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2345:10:9",
																			"memberName": "StakeMonth",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1039,
																			"src": "2333:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1161,
																			"name": "StakeMonth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1121,
																			"src": "2359:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2333:36:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874205374616b654d6f6e7468",
																		"id": 1163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2370:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		},
																		"value": "Enter Right StakeMonth"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a36325e76d171dedbd90a9c2ccb1d35f01a897a9bfff36563e749cfb55a7f11d",
																			"typeString": "literal_string \"Enter Right StakeMonth\""
																		}
																	],
																	"id": 1156,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2325:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2325:70:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1165,
															"nodeType": "ExpressionStatement",
															"src": "2325:70:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1167,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1049,
																					"src": "2417:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1169,
																				"indexExpression": {
																					"id": 1168,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1117,
																					"src": "2425:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2417:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1044_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1170,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2429:14:9",
																			"memberName": "EarnPersentage",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1041,
																			"src": "2417:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 1171,
																			"name": "EarnPersentage",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1123,
																			"src": "2447:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2417:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "456e746572205269676874204561726e50657273656e74616765",
																		"id": 1173,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2462:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		},
																		"value": "Enter Right EarnPersentage"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_68687b6d2750eaf3678427053f1fc9066faf9d66a6b27b7e16b44dd175160089",
																			"typeString": "literal_string \"Enter Right EarnPersentage\""
																		}
																	],
																	"id": 1166,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2409:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2409:82:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1175,
															"nodeType": "ExpressionStatement",
															"src": "2409:82:9"
														},
														{
															"expression": {
																"id": 1186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1176,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1049,
																			"src": "2505:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1178,
																		"indexExpression": {
																			"id": 1177,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1117,
																			"src": "2513:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2505:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1044_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "2517:13:9",
																	"memberName": "depositTokens",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1035,
																	"src": "2505:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1180,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1049,
																				"src": "2533:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																					"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																				}
																			},
																			"id": 1182,
																			"indexExpression": {
																				"id": 1181,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1117,
																				"src": "2541:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2533:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1044_storage",
																				"typeString": "struct TokenStaking.Staker storage ref"
																			}
																		},
																		"id": 1183,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2545:13:9",
																		"memberName": "depositTokens",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1035,
																		"src": "2533:25:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1184,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1119,
																		"src": "2561:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2533:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2505:63:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1187,
															"nodeType": "ExpressionStatement",
															"src": "2505:63:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1192,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1117,
																		"src": "2620:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1195,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "2632:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TokenStaking_$1499",
																					"typeString": "contract TokenStaking"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TokenStaking_$1499",
																					"typeString": "contract TokenStaking"
																				}
																			],
																			"id": 1194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2624:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1193,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2624:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2624:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1197,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1119,
																		"src": "2640:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1189,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1031,
																				"src": "2589:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1188,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "2582:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1190,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2582:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2603:16:9",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "2582:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2582:66:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1199,
															"nodeType": "ExpressionStatement",
															"src": "2582:66:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1228,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "2870:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1230,
														"indexExpression": {
															"id": 1229,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1117,
															"src": "2877:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2870:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1231,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1119,
														"src": "2884:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2870:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1233,
												"nodeType": "ExpressionStatement",
												"src": "2870:21:9"
											},
											{
												"expression": {
													"id": 1236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1234,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "2901:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1235,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1119,
														"src": "2922:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2901:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1237,
												"nodeType": "ExpressionStatement",
												"src": "2901:28:9"
											}
										]
									},
									"functionSelector": "10c404da",
									"id": 1239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DepositTokens",
									"nameLocation": "2057:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2079:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "2071:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1116,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2071:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2090:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "2082:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2082:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "StakeMonth",
												"nameLocation": "2106:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "2098:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2098:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "EarnPersentage",
												"nameLocation": "2125:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "2117:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2117:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2070:70:9"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2148:0:9"
									},
									"scope": 1499,
									"src": "2048:888:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1497,
										"nodeType": "Block",
										"src": "3174:1685:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1245,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1049,
																	"src": "3192:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																		"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																	}
																},
																"id": 1247,
																"indexExpression": {
																	"id": 1246,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1241,
																	"src": "3200:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3192:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1044_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3204:5:9",
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1043,
															"src": "3192:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4669727374205374616b6520546f6b656e73",
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3210:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															},
															"value": "First Stake Tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ccf289630eb35cda78855a87a825863fe9659f5a4c805e181469473a185a29f2",
																"typeString": "literal_string \"First Stake Tokens\""
															}
														],
														"id": 1244,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3184:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3184:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1251,
												"nodeType": "ExpressionStatement",
												"src": "3184:47:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1264,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1262,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1260,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1258,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1253,
																											"name": "Details",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1049,
																											"src": "3251:7:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																												"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																											}
																										},
																										"id": 1255,
																										"indexExpression": {
																											"id": 1254,
																											"name": "to",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1241,
																											"src": "3259:2:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_address",
																												"typeString": "address"
																											}
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3251:11:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Staker_$1044_storage",
																											"typeString": "struct TokenStaking.Staker storage ref"
																										}
																									},
																									"id": 1256,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "3263:10:9",
																									"memberName": "StakeMonth",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1039,
																									"src": "3251:22:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "3330",
																									"id": 1257,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3274:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_30_by_1",
																										"typeString": "int_const 30"
																									},
																									"value": "30"
																								},
																								"src": "3251:25:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"hexValue": "3234",
																								"id": 1259,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "3277:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_24_by_1",
																									"typeString": "int_const 24"
																								},
																								"value": "24"
																							},
																							"src": "3251:28:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3630",
																							"id": 1261,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3280:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_60_by_1",
																								"typeString": "int_const 60"
																							},
																							"value": "60"
																						},
																						"src": "3251:31:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3630",
																						"id": 1263,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3283:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_60_by_1",
																							"typeString": "int_const 60"
																						},
																						"value": "60"
																					},
																					"src": "3251:34:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1265,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3250:36:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 1266,
																					"name": "Details",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1049,
																					"src": "3289:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																						"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																					}
																				},
																				"id": 1268,
																				"indexExpression": {
																					"id": 1267,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1241,
																					"src": "3297:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3289:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Staker_$1044_storage",
																					"typeString": "struct TokenStaking.Staker storage ref"
																				}
																			},
																			"id": 1269,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3301:9:9",
																			"memberName": "stakeTime",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1037,
																			"src": "3289:21:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3250:60:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1271,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3249:62:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 1272,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3314:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3320:9:9",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3314:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3249:80:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c656173652057616974",
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3330:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8",
																"typeString": "literal_string \"Please Wait\""
															},
															"value": "Please Wait"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d9520291074b957441ae25ed8e9c612fe785890a43e560318c8aa6dfc4aa76d8",
																"typeString": "literal_string \"Please Wait\""
															}
														],
														"id": 1252,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3241:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3241:103:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "ExpressionStatement",
												"src": "3241:103:9"
											},
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "InterestAmount",
														"nameLocation": "3359:14:9",
														"nodeType": "VariableDeclaration",
														"scope": 1497,
														"src": "3354:19:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3354:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1280,
												"nodeType": "VariableDeclarationStatement",
												"src": "3354:19:9"
											},
											{
												"assignments": [
													1282
												],
												"declarations": [
													{
														"constant": false,
														"id": 1282,
														"mutability": "mutable",
														"name": "EarnToken",
														"nameLocation": "3388:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1497,
														"src": "3383:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1281,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3383:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1283,
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:14:9"
											},
											{
												"assignments": [
													1285
												],
												"declarations": [
													{
														"constant": false,
														"id": 1285,
														"mutability": "mutable",
														"name": "BurnToken",
														"nameLocation": "3412:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1497,
														"src": "3407:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1284,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3407:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1286,
												"nodeType": "VariableDeclarationStatement",
												"src": "3407:14:9"
											},
											{
												"assignments": [
													1288
												],
												"declarations": [
													{
														"constant": false,
														"id": 1288,
														"mutability": "mutable",
														"name": "AdminFee",
														"nameLocation": "3436:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 1497,
														"src": "3431:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1287,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3431:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1298,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1294,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1289,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1049,
																			"src": "3448:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																				"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																			}
																		},
																		"id": 1291,
																		"indexExpression": {
																			"id": 1290,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1241,
																			"src": "3456:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3448:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1044_storage",
																			"typeString": "struct TokenStaking.Staker storage ref"
																		}
																	},
																	"id": 1292,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3460:13:9",
																	"memberName": "depositTokens",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1035,
																	"src": "3448:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3235",
																	"id": 1293,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3474:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_25_by_1",
																		"typeString": "int_const 25"
																	},
																	"value": "25"
																},
																"src": "3448:28:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1295,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3447:30:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31303030",
														"id": 1296,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3478:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000_by_1",
															"typeString": "int_const 1000"
														},
														"value": "1000"
													},
													"src": "3447:35:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3431:51:9"
											},
											{
												"assignments": [
													1300
												],
												"declarations": [
													{
														"constant": false,
														"id": 1300,
														"mutability": "mutable",
														"name": "OwnerRemainingTokens",
														"nameLocation": "3497:20:9",
														"nodeType": "VariableDeclaration",
														"scope": 1497,
														"src": "3492:25:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1299,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3492:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1307,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1301,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "3520:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1303,
															"indexExpression": {
																"id": 1302,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "3528:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3520:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1304,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3532:13:9",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1035,
														"src": "3520:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1305,
														"name": "AdminFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "3548:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3520:36:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3492:64:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1308,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "3569:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1310,
															"indexExpression": {
																"id": 1309,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "3577:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3569:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3581:10:9",
														"memberName": "StakeMonth",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1039,
														"src": "3569:22:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "33",
														"id": 1312,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3595:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "3569:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1327,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1049,
																	"src": "3682:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																		"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																	}
																},
																"id": 1329,
																"indexExpression": {
																	"id": 1328,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1241,
																	"src": "3690:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3682:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1044_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1330,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3694:10:9",
															"memberName": "StakeMonth",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1039,
															"src": "3682:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "36",
															"id": 1331,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3708:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6_by_1",
																"typeString": "int_const 6"
															},
															"value": "6"
														},
														"src": "3682:27:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1346,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1049,
																		"src": "3797:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																			"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																		}
																	},
																	"id": 1348,
																	"indexExpression": {
																		"id": 1347,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "3805:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3797:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1044_storage",
																		"typeString": "struct TokenStaking.Staker storage ref"
																	}
																},
																"id": 1349,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3809:10:9",
																"memberName": "StakeMonth",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1039,
																"src": "3797:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3132",
																"id": 1350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3823:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_12_by_1",
																	"typeString": "int_const 12"
																},
																"value": "12"
															},
															"src": "3797:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1365,
														"nodeType": "IfStatement",
														"src": "3794:109:9",
														"trueBody": {
															"id": 1364,
															"nodeType": "Block",
															"src": "3826:77:9",
															"statements": [
																{
																	"expression": {
																		"id": 1362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1352,
																			"name": "InterestAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1279,
																			"src": "3840:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1358,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1353,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1049,
																									"src": "3859:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																										"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																									}
																								},
																								"id": 1355,
																								"indexExpression": {
																									"id": 1354,
																									"name": "to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1241,
																									"src": "3867:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3859:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1044_storage",
																									"typeString": "struct TokenStaking.Staker storage ref"
																								}
																							},
																							"id": 1356,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3871:13:9",
																							"memberName": "depositTokens",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1035,
																							"src": "3859:25:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3235",
																							"id": 1357,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3885:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_25_by_1",
																								"typeString": "int_const 25"
																							},
																							"value": "25"
																						},
																						"src": "3859:28:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1359,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3858:30:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "313030",
																				"id": 1360,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3889:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			},
																			"src": "3858:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3840:52:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1363,
																	"nodeType": "ExpressionStatement",
																	"src": "3840:52:9"
																}
															]
														}
													},
													"id": 1366,
													"nodeType": "IfStatement",
													"src": "3679:224:9",
													"trueBody": {
														"id": 1345,
														"nodeType": "Block",
														"src": "3710:79:9",
														"statements": [
															{
																"expression": {
																	"id": 1343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1333,
																		"name": "InterestAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1279,
																		"src": "3724:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1339,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1334,
																								"name": "Details",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1049,
																								"src": "3743:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																									"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																								}
																							},
																							"id": 1336,
																							"indexExpression": {
																								"id": 1335,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1241,
																								"src": "3751:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "3743:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1044_storage",
																								"typeString": "struct TokenStaking.Staker storage ref"
																							}
																						},
																						"id": 1337,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "3755:13:9",
																						"memberName": "depositTokens",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1035,
																						"src": "3743:25:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "323235",
																						"id": 1338,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3769:3:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_225_by_1",
																							"typeString": "int_const 225"
																						},
																						"value": "225"
																					},
																					"src": "3743:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1340,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3742:31:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3774:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "3742:36:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3724:54:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1344,
																"nodeType": "ExpressionStatement",
																"src": "3724:54:9"
															}
														]
													}
												},
												"id": 1367,
												"nodeType": "IfStatement",
												"src": "3566:337:9",
												"trueBody": {
													"id": 1326,
													"nodeType": "Block",
													"src": "3597:77:9",
													"statements": [
														{
															"expression": {
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1314,
																	"name": "InterestAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "3611:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1320,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1315,
																							"name": "Details",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1049,
																							"src": "3630:7:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																								"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																							}
																						},
																						"id": 1317,
																						"indexExpression": {
																							"id": 1316,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1241,
																							"src": "3638:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "3630:11:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Staker_$1044_storage",
																							"typeString": "struct TokenStaking.Staker storage ref"
																						}
																					},
																					"id": 1318,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3642:13:9",
																					"memberName": "depositTokens",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1035,
																					"src": "3630:25:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3230",
																					"id": 1319,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3656:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_20_by_1",
																						"typeString": "int_const 20"
																					},
																					"value": "20"
																				},
																				"src": "3630:28:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1321,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3629:30:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "313030",
																		"id": 1322,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3660:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_100_by_1",
																			"typeString": "int_const 100"
																		},
																		"value": "100"
																	},
																	"src": "3629:34:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3611:52:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1325,
															"nodeType": "ExpressionStatement",
															"src": "3611:52:9"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1368,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "3915:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1370,
															"indexExpression": {
																"id": 1369,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "3923:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3915:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1371,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3927:14:9",
														"memberName": "EarnPersentage",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1041,
														"src": "3915:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1372,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3945:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "3915:33:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1390,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1385,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1049,
																	"src": "4054:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																		"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																	}
																},
																"id": 1387,
																"indexExpression": {
																	"id": 1386,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1241,
																	"src": "4062:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4054:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1044_storage",
																	"typeString": "struct TokenStaking.Staker storage ref"
																}
															},
															"id": 1388,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4066:14:9",
															"memberName": "EarnPersentage",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1041,
															"src": "4054:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "3735",
															"id": 1389,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4084:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_75_by_1",
																"typeString": "int_const 75"
															},
															"value": "75"
														},
														"src": "4054:32:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1428,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1049,
																		"src": "4383:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																			"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																		}
																	},
																	"id": 1430,
																	"indexExpression": {
																		"id": 1429,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "4391:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4383:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1044_storage",
																		"typeString": "struct TokenStaking.Staker storage ref"
																	}
																},
																"id": 1431,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4395:14:9",
																"memberName": "EarnPersentage",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1041,
																"src": "4383:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3530",
																"id": 1432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4413:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_50_by_1",
																	"typeString": "int_const 50"
																},
																"value": "50"
															},
															"src": "4383:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1471,
														"nodeType": "IfStatement",
														"src": "4380:324:9",
														"trueBody": {
															"id": 1470,
															"nodeType": "Block",
															"src": "4416:288:9",
															"statements": [
																{
																	"expression": {
																		"id": 1441,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1434,
																			"name": "EarnToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1282,
																			"src": "4430:9:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1440,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1437,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1435,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1279,
																							"src": "4443:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3530",
																							"id": 1436,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4458:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_50_by_1",
																								"typeString": "int_const 50"
																							},
																							"value": "50"
																						},
																						"src": "4443:17:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1438,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4442:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "313030",
																				"id": 1439,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4462:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			},
																			"src": "4442:23:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4430:35:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1442,
																	"nodeType": "ExpressionStatement",
																	"src": "4430:35:9"
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1447,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1241,
																				"src": "4509:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1450,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1448,
																					"name": "OwnerRemainingTokens",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1300,
																					"src": "4513:20:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1449,
																					"name": "EarnToken",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1282,
																					"src": "4536:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "4513:32:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1444,
																						"name": "ERC20Address",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1031,
																						"src": "4486:12:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1443,
																					"name": "IERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 190,
																					"src": "4479:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																						"typeString": "type(contract IERC20)"
																					}
																				},
																				"id": 1445,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4479:20:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$190",
																					"typeString": "contract IERC20"
																				}
																			},
																			"id": 1446,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4500:8:9",
																			"memberName": "transfer",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 157,
																			"src": "4479:29:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																				"typeString": "function (address,uint256) external returns (bool)"
																			}
																		},
																		"id": 1451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4479:67:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1452,
																	"nodeType": "ExpressionStatement",
																	"src": "4479:67:9"
																},
																{
																	"expression": {
																		"id": 1460,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1453,
																			"name": "BurnToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1285,
																			"src": "4560:9:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1459,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1456,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1454,
																							"name": "InterestAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1279,
																							"src": "4573:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3530",
																							"id": 1455,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4588:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_50_by_1",
																								"typeString": "int_const 50"
																							},
																							"value": "50"
																						},
																						"src": "4573:17:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1457,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4572:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "313030",
																				"id": 1458,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4592:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			},
																			"src": "4572:23:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4560:35:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1461,
																	"nodeType": "ExpressionStatement",
																	"src": "4560:35:9"
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																				"id": 1466,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4639:42:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"value": "0x000000000000000000000000000000000000dEaD"
																			},
																			{
																				"id": 1467,
																				"name": "BurnToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1285,
																				"src": "4683:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1463,
																						"name": "ERC20Address",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1031,
																						"src": "4616:12:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1462,
																					"name": "IERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 190,
																					"src": "4609:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																						"typeString": "type(contract IERC20)"
																					}
																				},
																				"id": 1464,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4609:20:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$190",
																					"typeString": "contract IERC20"
																				}
																			},
																			"id": 1465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4630:8:9",
																			"memberName": "transfer",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 157,
																			"src": "4609:29:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																				"typeString": "function (address,uint256) external returns (bool)"
																			}
																		},
																		"id": 1468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4609:84:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1469,
																	"nodeType": "ExpressionStatement",
																	"src": "4609:84:9"
																}
															]
														}
													},
													"id": 1472,
													"nodeType": "IfStatement",
													"src": "4051:653:9",
													"trueBody": {
														"id": 1427,
														"nodeType": "Block",
														"src": "4087:288:9",
														"statements": [
															{
																"expression": {
																	"id": 1398,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1391,
																		"name": "EarnToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1282,
																		"src": "4101:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1394,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1392,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1279,
																						"src": "4114:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3735",
																						"id": 1393,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4129:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_75_by_1",
																							"typeString": "int_const 75"
																						},
																						"value": "75"
																					},
																					"src": "4114:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1395,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4113:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "313030",
																			"id": 1396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4133:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"value": "100"
																		},
																		"src": "4113:23:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4101:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1399,
																"nodeType": "ExpressionStatement",
																"src": "4101:35:9"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1404,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1241,
																			"src": "4180:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1405,
																				"name": "OwnerRemainingTokens",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1300,
																				"src": "4184:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 1406,
																				"name": "EarnToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1282,
																				"src": "4207:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4184:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1401,
																					"name": "ERC20Address",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1031,
																					"src": "4157:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1400,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 190,
																				"src": "4150:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1402,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4150:20:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4171:8:9",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "4150:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4150:67:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1409,
																"nodeType": "ExpressionStatement",
																"src": "4150:67:9"
															},
															{
																"expression": {
																	"id": 1417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1410,
																		"name": "BurnToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1285,
																		"src": "4231:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1416,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1413,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1411,
																						"name": "InterestAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1279,
																						"src": "4244:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3235",
																						"id": 1412,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4259:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_25_by_1",
																							"typeString": "int_const 25"
																						},
																						"value": "25"
																					},
																					"src": "4244:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1414,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4243:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "313030",
																			"id": 1415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4263:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"value": "100"
																		},
																		"src": "4243:23:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4231:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1418,
																"nodeType": "ExpressionStatement",
																"src": "4231:35:9"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
																			"id": 1423,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4310:42:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"value": "0x000000000000000000000000000000000000dEaD"
																		},
																		{
																			"id": 1424,
																			"name": "BurnToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1285,
																			"src": "4354:9:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1420,
																					"name": "ERC20Address",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1031,
																					"src": "4287:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1419,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 190,
																				"src": "4280:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4280:20:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4301:8:9",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "4280:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4280:84:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1426,
																"nodeType": "ExpressionStatement",
																"src": "4280:84:9"
															}
														]
													}
												},
												"id": 1473,
												"nodeType": "IfStatement",
												"src": "3912:792:9",
												"trueBody": {
													"id": 1384,
													"nodeType": "Block",
													"src": "3949:97:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1378,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "3993:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1381,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1379,
																			"name": "OwnerRemainingTokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1300,
																			"src": "3997:20:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1380,
																			"name": "InterestAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1279,
																			"src": "4020:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3997:37:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1375,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1031,
																				"src": "3970:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1374,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3963:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1376,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3963:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1377,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3984:8:9",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "3963:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1382,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3963:72:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1383,
															"nodeType": "ExpressionStatement",
															"src": "3963:72:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1474,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "4713:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1476,
															"indexExpression": {
																"id": 1475,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "4721:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4713:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1477,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4725:5:9",
														"memberName": "check",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1043,
														"src": "4713:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4733:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4713:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1480,
												"nodeType": "ExpressionStatement",
												"src": "4713:25:9"
											},
											{
												"expression": {
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1481,
															"name": "Tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "4748:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1483,
														"indexExpression": {
															"id": 1482,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "4755:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4748:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1484,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "4762:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1486,
															"indexExpression": {
																"id": 1485,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "4770:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4762:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1487,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4774:13:9",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1035,
														"src": "4762:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4748:39:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1489,
												"nodeType": "ExpressionStatement",
												"src": "4748:39:9"
											},
											{
												"expression": {
													"id": 1495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1490,
														"name": "totalStakedTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "4797:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1491,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "4818:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1044_storage_$",
																	"typeString": "mapping(address => struct TokenStaking.Staker storage ref)"
																}
															},
															"id": 1493,
															"indexExpression": {
																"id": 1492,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "4826:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4818:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1044_storage",
																"typeString": "struct TokenStaking.Staker storage ref"
															}
														},
														"id": 1494,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4830:13:9",
														"memberName": "depositTokens",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1035,
														"src": "4818:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4797:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1496,
												"nodeType": "ExpressionStatement",
												"src": "4797:46:9"
											}
										]
									},
									"functionSelector": "9131a05a",
									"id": 1498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "WithdrawTokens",
									"nameLocation": "3140:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3163:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1498,
												"src": "3155:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3154:12:9"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3174:0:9"
									},
									"scope": 1499,
									"src": "3131:1728:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1500,
							"src": "281:4580:9",
							"usedErrors": []
						}
					],
					"src": "56:4805:9"
				},
				"id": 9
			}
		}
	}
}